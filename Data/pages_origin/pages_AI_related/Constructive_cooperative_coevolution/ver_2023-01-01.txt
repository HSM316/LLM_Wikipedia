{{Short description|Algorithm in AI}}
The '''constructive cooperative coevolutionary algorithm''' (also called C<sup>3</sup>) is a [[global optimisation]] algorithm in [[artificial intelligence]] based on the multi-start architecture of the [[greedy randomized adaptive search procedure]] (GRASP).<ref>T.A. Feo and M.G.C. Resende (1989) [http://www.sciencedirect.com/science/article/pii/0167637789900023 "A probabilistic heuristic for a computationally difficult set covering problem"]. ''Operations Research Letters'', 8:67&ndash;71, 1989.</ref><ref>T.A. Feo and M.G.C. Resende (1995) [https://link.springer.com/article/10.1007/BF01096763 "Greedy randomized adaptive search procedures"]. ''Journal of Global Optimization'', 6:109&ndash;133, 1995.</ref> It incorporates the existing [[Cooperative coevolution|cooperative coevolutionary algorithm]] (CC).<ref>M. A. Potter and K. A. D. Jong, [https://link.springer.com/chapter/10.1007/3-540-58484-6_269 "A cooperative coevolutionary approach to function optimization"], in ''PPSN III: Proceedings of the International Conference on Evolutionary Computation. The Third Conference on Parallel Problem Solving from Nature'' London, UK:Springer-Verlag, 1994, pp. 249–257.</ref> The considered problem is decomposed into subproblems. These subproblems are optimised separately while exchanging information in order to solve the complete problem. An optimisation algorithm, usually but not necessarily an [[evolutionary algorithm]], is embedded in C<sup>3</sup> for optimising those subproblems. The nature of the embedded optimisation algorithm determines whether C<sup>3</sup>'s behaviour is [[deterministic]] or [[stochastic]].

The C<sup>3</sup> optimisation algorithm was originally designed for [[Stochastic optimization|simulation-based optimisation]]<ref name="Glorieux et al 2014a" /><ref name="Glorieux et al 2014b" /> but it can be used for [[global optimization|global optimisation]] problems in general.<ref name="Glorieux et al 2017b">Glorieux E., Svensson B., Danielsson F., Lennartson B.: [https://doi.org/10.1007/s10732-017-9351-z "Constructive cooperative coevolution for large-scale global optimisation"], ''Journal of Heuristics'', 2017.</ref> Its strength over other optimisation algorithms, specifically cooperative coevolution, is that it is better able to handle non-separable optimisation problems.<ref name="Glorieux et al 2014a" /><ref>Glorieux E., Danielsson F., Svensson B., Lennartson B.: [https://link.springer.com/article/10.1007/s00170-015-7012-7 "Constructive cooperative coevolutionary optimisation for interacting production stations"], ''International Journal of Advanced Manufacturing Technology'', 2015.</ref>

An improved version was proposed later, called the Improved Constructive Cooperative Coevolutionary Differential Evolution (C<sup>3i</sup>DE), which removes several limitations with the previous version. A novel element of C<sup>3i</sup>DE is the advanced initialisation of the subpopulations. C<sup>3i</sup>DE initially optimises the subpopulations in a partially co-adaptive fashion. During the initial optimisation of a subpopulation, only a subset of the other subcomponents is considered for the co-adaptation. This subset increases stepwise until all subcomponents are considered. This makes C<sup>3i</sup>DE very effective on large-scale global optimisation problems (up to 1000 dimensions) compared to [[Cooperative coevolution|cooperative coevolutionary algorithm]] (CC) and [[Differential evolution]].<ref name="Glorieux et al 2015b">Glorieux E., Svensson B., Danielsson F., Lennartson B., [https://ieeexplore.ieee.org/document/7376815/ "Improved Constructive Cooperative Coevolutionary Differential Evolution for Large-Scale Optimisation"], 2015 IEEE Symposium Series on Computational Intelligence, December 2015</ref>

The improved algorithm has then been adapted for [[multi-objective optimization]].<ref name="Glorieux et al 2017a">Glorieux E., Svensson B., Danielsson F., Lennartson B., [http://www.tandfonline.com/10.1080/0305215X.2016.1264220 "Multi-objective constructive cooperative coevolutionary optimization of robotic press-line tending"], Engineering Optimization, Vol. 49, Iss. 10, 2017, pp 1685-1703</ref>

==Algorithm==

As shown in the pseudo code below, an iteration of C<sup>3</sup> exists of two phases. In Phase I, the constructive phase, a feasible solution for the entire problem is constructed in a stepwise manner. Considering a different subproblem in each step. After the final step, all subproblems are considered and a solution for the complete problem has been constructed. This constructed solution is then used as the initial solution in Phase II, the local improvement phase. The CC algorithm is employed to further optimise the constructed solution. A cycle of Phase II includes optimising the subproblems separately while keeping the parameters of the other subproblems fixed to a central blackboard solution. When this is done for each subproblem, the found solution are combined during a "collaboration" step, and the best one among the produced combinations becomes the blackboard solution for the next cycle. In the next cycle, the same is repeated. Phase II, and thereby the current iteration, are terminated when the search of the CC algorithm stagnates and no significantly better solutions are being found. Then, the next iteration is started. At the start of the next iteration, a new feasible solution is constructed, utilising solutions that were found during the Phase I of the previous {{Not a typo|iteration(s)}}. This constructed solution is then used as the initial solution in Phase II in the same way as in the first iteration. This is repeated until one of the termination criteria for the optimisation is reached, e.g. a maximum number of evaluations.

 {'''S'''<sub>phase1</sub>} ← ∅
 '''while''' termination criteria not satisfied '''do'''
     '''if''' {'''S'''<sub>phase1</sub>} = ∅ '''then'''
         {'''S'''<sub>phase1</sub>} ← SubOpt(∅, 1)
     '''end if'''
     '''while''' '''p'''<sub>phase1</sub> not completely constructed '''do'''
         '''p'''<sub>phase1</sub> ← GetBest({'''S'''<sub>phase1</sub>})
         {'''S'''<sub>phase1</sub>} ← SubOpt('''p'''<sub>phase1</sub>, i<sub>next subproblem</sub>)
     '''end while'''
     '''p'''<sub>phase2</sub> ← GetBest({'''S'''<sub>phase1</sub>})
     '''while''' not stagnate '''do'''
         {'''S'''<sub>phase2</sub>} ← ∅ 
         '''for each''' subproblem i '''do'''
             {'''S'''<sub>phase2</sub>} ← SubOpt('''p'''<sub>phase2</sub>,i)
         '''end for'''
         {'''S'''<sub>phase2</sub>} ← Collab({'''S'''<sub>phase2</sub>})
         '''p'''<sub>phase2</sub> ← GetBest({'''S'''<sub>phase2</sub>})
     '''end while'''
 '''end while'''

==Multi-objective optimisation==
The multi-objective version of the C<sup>3</sup> algorithm <ref name="Glorieux et al 2017a" /> is a Pareto-based algorithm which uses the same divide-and-conquer strategy as the single-objective C<sup>3</sup> optimisation algorithm . The algorithm again starts with the advanced constructive initial optimisations of the subpopulations, considering an increasing subset of subproblems. The subset increases until the entire set of all subproblems is included. During these initial optimisations, the subpopulation of the latest included subproblem is evolved by a multi-objective evolutionary algorithm. For the fitness calculations of the members of the subpopulation, they are combined with a collaborator solution from each of the previously optimised subpopulations.  Once all subproblems' subpopulations have been initially optimised, the multi-objective C<sup>3</sup> optimisation algorithm continues to optimise each subproblem in a [[Round-robin scheduling|round-robin fashion]], but now collaborator solutions from all other subproblems' subspopulations are combined with the member of the subpopulation that is being evaluated. The collaborator solution is selected randomly from the solutions that make up the Pareto-optimal front of the subpopulation. The fitness assignment to the collaborator solutions is done in an optimistic fashion (i.e. an "old" fitness value is replaced when the new one is better).

==Applications==

The constructive cooperative coevolution algorithm has been applied to different types of problems, e.g. a set of standard benchmark functions,<ref name="Glorieux et al 2014a">Glorieux E., Danielsson F., Svensson B., Lennartson B., [https://ieeexplore.ieee.org/document/6899345/ "Optimisation of interacting production stations using a Constructive Cooperative Coevolutionary approach"], 2014 IEEE International Conference on Automation Science and Engineering (CASE), pp.322-327, August 2014, Taipei, Taiwan</ref><ref name="Glorieux et al 2017b"/> optimisation of sheet metal press lines<ref name="Glorieux et al 2014a" /><ref name="Glorieux et al 2014b">Glorieux E., Svensson B., Danielsson F., Lennartson B., [http://hv.diva-portal.org/smash/record.jsf?pid=diva2%3A754165&dswid=-2044 "A Constructive Cooperative Coevolutionary Algorithm Applied to Press Line Optimisation"], Proceedings of the 24th International Conference on Flexible Automation and Intelligent Manufacturing (FAIM), pp.909-917, May 2014, San Antonio, Texas, USA</ref> and interacting production stations.<ref name="Glorieux et al 2014b" /> The C<sup>3</sup> algorithm has been embedded with, amongst others, the [[Differential evolution|differential evolution algorithm]]<ref>Storn, Rainer, and Kenneth Price. [https://link.springer.com/article/10.1023/A:1008202821328 "Differential evolution–a simple and efficient heuristic for global optimization over continuous spaces"], Journal of global optimization 11.4 (1997): 341-359.</ref> and the [[Particle swarm optimization|particle swarm optimiser]]<ref>Eberhart, Russ C., and James Kennedy. [https://ieeexplore.ieee.org/document/494215/ "A new optimizer using particle swarm theory"], Proceedings of the sixth international symposium on micro machine and human science. Vol. 1. 1995.</ref> for the subproblem optimisations.

== See also ==
<!-- Please don't add a whole list of optimization algorithms, the categories serve that purpose. -->
<!-- 27/3/11 Updated with more meaningful category organisation - I have tried to keep the list as brief as possible, relying on sub-pages for further breakdown of categories. Please try to maintain this spirit on edits. -->

* [[Cooperative coevolution]]
* [[Metaheuristic]]
* [[Stochastic search]]
* [[Differential evolution]]
* [[Swarm intelligence]]
* [[Genetic algorithms]]
* [[Hyper-heuristics]]

==References==
{{reflist}}

*

[[Category:Evolutionary algorithms]]
[[Category:Evolutionary computation]]