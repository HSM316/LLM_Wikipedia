{{Short description|Open-source machine learning system for end-to-end data science lifecycle}}
{{DISPLAYTITLE:Apache SystemDS}}{{Infobox software
| name = Apache SystemDS
| logo = [[File:Apache SystemDS Logo.svg|250px|Apache SystemML Logo]]
| developer = [[Apache Software Foundation]], [[IBM]]
| released = {{Start date and age|2015|11|02}}
| latest release version = 3.0.0
| operating system = [[Linux]], [[macOS]], [[Windows]]
| latest release date = {{Start date and age|2022|07|05}}
| repo = {{URL|https://github.com/apache/systemds|SystemDS Repository}}
| programming language = [[Java (programming language)|Java]], [[Python (programming language)|Python]], [[(Descriptive Machine Learning)| DML]], [[C (programming language)|C]]
| genre = [[Machine Learning]], [[Deep Learning]], [[Data Science]]
| license = [[Apache License 2.0]]
| website = {{URL|https://systemds.apache.org/}}
}}
'''Apache SystemDS''' (Previously, Apache SystemML) is an open source ML system for the end-to-end data science lifecycle. 

SystemDS's distinguishing characteristics are:

# Algorithm customizability via R-like and Python-like languages.
# Multiple execution modes, including Standalone, [[Apache Spark|Spark]] Batch, [[Apache Spark|Spark]] MLContext, [[Apache Hadoop|Hadoop]] Batch, and JMLC.
# Automatic optimization based on data and cluster characteristics to ensure both efficiency and scalability.

==History==
SystemML was created in 2010 by researchers at the [[IBM Almaden Research Center]] led by IBM Fellow Shivakumar Vaithyanathan. It was observed that data scientists would write machine learning algorithms in languages such as [[R (programming language)|R]] and [[Python (programming language)|Python]] for small data. When it came time to scale to big data, a systems programmer would be needed to scale the algorithm in a language such as [[Scala (programming language)|Scala]]. This process typically involved days or weeks per iteration, and errors would occur translating the algorithms to operate on big data. SystemML seeks to simplify this process. A primary goal of SystemML is to automatically scale an algorithm written in an R-like or Python-like language to operate on big data, generating the same answer without the error-prone, multi-iterative translation approach.

On June 15, 2015, at the Spark Summit in San Francisco, Beth Smith, General Manager of IBM Analytics, announced that IBM was open-sourcing SystemML as part of IBM's major commitment to [[Apache Spark]] and Spark-related projects. SystemML became publicly available on [[GitHub]] on August 27, 2015 and became an [[Apache Incubator]] project on November 2, 2015. On May 17, 2017, the Apache Software Foundation Board approved the graduation of Apache SystemML as an Apache Top Level Project.

== Key technologies ==
The following are some of the technologies built into the SystemDS engine.

* [https://cacm.acm.org/magazines/2019/5/236413-compressed-linear-algebra-for-declarative-large-scale-machine-learning/fulltext Compressed Linear Algebra for Large Scale Machine Learning]
* [https://arxiv.org/pdf/1605.05826 Declarative Machine Learning Language]

== Examples ==

=== Principal Component Analysis ===
The following code snippet<ref>{{Citation |title=Apache SystemDS |date=2022-02-24 |url=https://github.com/apache/systemds |publisher=The Apache Software Foundation |access-date=2022-03-06}}</ref> does the [[Principal component analysis]] of input matrix <math>A</math> , which returns the <math>eigen vectors</math> and the <math display="inline">eigen values</math>.<syntaxhighlight lang="r" line="1">
# PCA.dml
# Refer: https://github.com/apache/systemds/blob/master/scripts/algorithms/PCA.dml#L61

N = nrow(A);
D = ncol(A);

# perform z-scoring (centering and scaling)
A = scale(A, center==1, scale==1);

# co-variance matrix 
mu = colSums(A)/N;
C = (t(A) %*% A)/(N-1) - (N/(N-1))*t(mu) %*% mu;


# compute eigen vectors and values
[evalues, evectors] = eigen(C);
</syntaxhighlight>

=== Invocation script ===
<syntaxhighlight lang="shell-session">
spark-submit SystemDS.jar -f PCA.dml -nvargs INPUT=INPUT_DIR/pca-1000x1000 \
  OUTPUT=OUTPUT_DIR/pca-1000x1000-model PROJDATA=1 CENTER=1 SCALE=1
</syntaxhighlight>

=== Database functions ===
[[DBSCAN]] clustering algorithm with [[Euclidean distance]].<syntaxhighlight lang="r" line="1">
X = rand(rows=1780, cols=180, min=1, max=20) 
[indices, model] = dbscan(X = X, eps = 2.5, minPts = 360)
</syntaxhighlight>

== Improvements ==
SystemDS 2.0.0 is the first major release under the new name. This release contains a major refactoring, a few major features, a large number of improvements and fixes, and some experimental features to better support the end-to-end data science lifecycle. In addition to that, this release also removes several features that are not up date and outdated.

* New mechanism for DML-bodied (script-level) <code>builtin</code> functions, and a wealth of new built-in functions for data preprocessing including data cleaning, augmentation and feature engineering techniques, new ML algorithms, and model debugging.
* Several methods for data cleaning have been implemented including multiple imputations with multivariate imputation by chained equations (MICE) and other techniques, SMOTE, an oversampling technique for class imbalance, forward and backward NA filling, cleaning using schema and length information, support for outlier detection using standard deviation and inter-quartile range, and functional dependency discovery.
* A complete framework for lineage tracing and reuse including support for loop deduplication, full and partial reuse, compiler assisted reuse, several new rewrites to facilitate reuse.
* New federated runtime backend including support for federated matrices and frames, federated <code>builtin</code>s (<code>transform-encode</code>, <code>decode</code> etc.).
* Refactor compression package and add functionalities including quantization for lossy compression, binary cell operations, left matrix multiplication. [experimental]
* New python bindings with supports for several <code>builtin</code>s, matrix operations, federated tensors and lineage traces.
* Cuda implementation of cumulative aggregate operators (<code>cumsum</code>, <code>cumprod</code> etc.)
* New model debugging technique with slice finder.
* New tensor data model (basic tensors of different value types, data tensors with schema) [experimental]
* Cloud deployment scripts for AWS and scripts to set up and start federated operations.
* Performance improvements with <code>parallel sort</code>, <code>gpu cum agg</code>, <code>append cbind</code> etc.
* Various compiler and runtime improvements including new and improved rewrites, reduced Spark context creation, new <code>eval</code> framework, list operations, updated native kernel libraries to name a few.
* New data reader/writer for <code>json</code> frames and support for <code>sql</code> as a data source.
* Miscellaneous improvements: improved documentation, better testing, run/release scripts, improved packaging, Docker container for systemds, support for lambda expressions, bug fixes.
* Removed MapReduce compiler and runtime backend, <code>pydml</code> parser, Java-UDF framework, script-level debugger.
* Deprecated <code>./scripts/algorithms</code>, as those algorithms gradually will be part of SystemDS <code>builtin</code>s.
<ref>{{Cite web|last=SystemDS|first=Apache|title=SystemML 1.2.0 Release Notes|url=https://systemds.apache.org/|access-date=2021-02-26|website=systemds.apache.org|language=en}}</ref>

== Contributions ==
Apache SystemDS welcomes contributions in code, question and answer, community building, or spreading the word. The contributor guide is available at https://github.com/apache/systemds/blob/main/CONTRIBUTING.md

==See also==
*[[Comparison of deep learning software]]

==References==
{{Reflist}}

==External links==
*[http://systemds.apache.org/ Apache SystemML website]
*[http://researcher.watson.ibm.com/researcher/view_group.php?id=3174 IBM Research - SystemML]
*[https://web.archive.org/web/20180321002223/http://www.spark.tc/q-a-with-shiv-vaithyanathan-creator-of-systemml-and-ibm-fellow/ Q & A with Shiv Vaithyanathan, Creator of SystemML and IBM Fellow]
*[http://www.spark.tc/a-universal-translator-for-big-data-and-machine-learning/ A Universal Translator for Big Data and Machine Learning]
*[https://www.youtube.com/watch?v=WkYqjWL1xzk SystemML: Declarative Machine Learning at Scale presentation by Fred Reiss]
*[http://researcher.watson.ibm.com/researcher/files/us-ytian/systemML.pdf SystemML: Declarative Machine Learning on MapReduce]
*[http://www.vldb.org/pvldb/vol7/p553-boehm.pdf Hybrid Parallelization Strategies for Large-Scale Machine Learning in SystemML]
*[https://web.archive.org/web/20150218102423/http://sites.computer.org/debull/A14sept/p52.pdf SystemML's Optimizer: Plan Generation for Large-Scale Machine Learning Programs]
*[http://www.zdnet.com/article/ibms-systemml-machine-learning-system-becomes-apache-incubator-project/ IBM's SystemML machine learning system becomes Apache Incubator project]
*[https://web.archive.org/web/20150617032644/http://www.theinquirer.net/inquirer/news/2413132/ibm-donates-machine-learning-tech-to-apache-spark-open-source-community IBM donates machine learning tech to Apache Spark open source community]
*[http://www.eweek.com/developer/ibms-systemml-moves-forward-as-apache-incubator-project.html IBM's SystemML Moves Forward as Apache Incubator Project]

{{Apache Software Foundation}}

{{DEFAULTSORT:SystemML}}
[[Category:Cluster computing]]
[[Category:Data mining and machine learning software]]
[[Category:Hadoop]]
[[Category:Apache Software Foundation projects|SystemML]]
[[Category:Software using the Apache license]]
[[Category:Java platform]]
[[Category:Big data products]]
[[Category:2015 software]]