{{distinguish|Hyperparameter (Bayesian)}}

In [[machine learning]], a '''hyperparameter''' is a [[parameter]] whose value is used to control the learning process. By contrast, the values of other parameters (typically node weights) are derived via training.

Hyperparameters can be classified as model hyperparameters, that cannot be inferred while [[Model fitting|fitting the machine to the training set]] because they refer to the [[model selection]] task, or algorithm hyperparameters, that in principle have no influence on the performance of the model but affect the speed and quality of the learning process. An example of a model hyperparameter is the topology and size of a neural network. Examples of algorithm hyperparameters are [[learning rate]] and mini-[[batch size]].{{clarify|date=April 2020}}

Different model training algorithms require different hyperparameters, some simple algorithms (such as [[ordinary least squares]] regression) require none. Given these hyperparameters, the training algorithm learns the parameters from the data. For instance, [[LASSO]] is an algorithm that adds a [[Regularization (mathematics)|regularization]] hyperparameter to [[ordinary least squares]] regression, which has to be set before estimating the parameters through the training algorithm.

== Considerations ==
The time required to train and test a model can depend upon the choice of its hyperparameters.<ref name=abs1502.02127>{{cite news |arxiv=1502.02127 |title=Claesen, Marc, and Bart De Moor. "Hyperparameter Search in Machine Learning." arXiv preprint arXiv:1502.02127 (2015).|bibcode=2015arXiv150202127C}}</ref> A hyperparameter is usually of continuous or integer type, leading to mixed-type optimization problems.<ref name=abs1502.02127/> The existence of some hyperparameters is conditional upon the value of others, e.g. the size of each hidden layer in a neural network can be conditional upon the number of layers.<ref name=abs1502.02127/>

=== Difficulty learnable parameters ===

Usually, but not always, hyperparameters cannot be learned using well known gradient based methods (such as gradient descent, LBFGS) - which are commonly employed to learn parameters. These hyperparameters are those parameters describing a model representation that cannot be learned by common optimization methods but nonetheless affect the loss function. An example would be the tolerance hyperparameter for errors in support vector machines.

=== Untrainable parameters ===

Sometimes, hyperparameters cannot be learned from the training data because they aggressively increase the capacity of a model and can push the loss function to a bad minimum - overfitting to, and picking up noise, in the data - as opposed to correctly mapping the richness of the structure in the data. For example - if we treat the degree of a polynomial equation fitting a regression model as a [[trainable parameter]] - this would just raise the degree up until the model perfectly fit the data, giving small training error - but bad generalization performance.

=== Tunability ===
Most performance variation can be attributed to just a few hyperparameters.<ref name=hutter14>{{Cite journal|url=http://proceedings.mlr.press/v32/hutter14.html|title=An Efficient Approach for Assessing Hyperparameter Importance|first1=Kevin|last1=Leyton-Brown|first2=Holger|last2=Hoos|first3=Frank|last3=Hutter|date=January 27, 2014|pages=754–762|via=proceedings.mlr.press}}</ref><ref name=abs1502.02127/><ref name=abs1710.04725>{{cite news |arxiv=1710.04725 |title=van Rijn, Jan N., and Frank Hutter. "Hyperparameter Importance Across Datasets." arXiv preprint arXiv:1710.04725 (2017).|bibcode=2017arXiv171004725V}}</ref> The tunability of an algorithm, hyperparameter, or interacting hyperparameters is a measure of how much performance can be gained by tuning it.<ref name=arXiv:1802.09596>{{cite news |arxiv=1802.09596 |title=Probst, Philipp, Bernd Bischl, and Anne-Laure Boulesteix. "Tunability: Importance of Hyperparameters of Machine Learning Algorithms." arXiv preprint arXiv:1802.09596 (2018).|bibcode=2018arXiv180209596P}}</ref> For an [[Long short-term memory|LSTM]], while the [[learning rate]] followed by the network size are its most crucial hyperparameters,<ref name=pmid27411231>{{Cite journal|title=LSTM: A Search Space Odyssey|first1=K.|last1=Greff|first2=R. K.|last2=Srivastava|first3=J.|last3=Koutník|first4=B. R.|last4=Steunebrink|first5=J.|last5=Schmidhuber|date=October 23, 2017|journal=IEEE Transactions on Neural Networks and Learning Systems|volume=28|issue=10|pages=2222–2232|doi=10.1109/TNNLS.2016.2582924|pmid=27411231|arxiv=1503.04069|s2cid=3356463}}</ref> batching and momentum have no significant effect on its performance.<ref name=abs1508.02774>{{cite news |arxiv=1508.02774 |title=Breuel, Thomas M. "Benchmarking of LSTM networks." arXiv preprint arXiv:1508.02774 (2015).|bibcode=2015arXiv150802774B}}</ref>

Although some research has advocated the use of mini-batch sizes in the thousands, other work has found the best performance with mini-batch sizes between 2 and 32.<ref name=arXiv:1804.07612>{{cite news |arxiv=1804.07612 |title=Revisiting Small Batch Training for Deep Neural Networks (2018).|bibcode=2018arXiv180407612M}}</ref>

=== Robustness ===
An inherent stochasticity in learning directly implies that the empirical hyperparameter performance is not necessarily its true performance.<ref name=abs1502.02127/> Methods that are not robust to simple changes in hyperparameters, [[random seed]]s, or even different implementations of the same algorithm cannot be integrated into mission critical control systems without significant simplification and robustification.<ref name=arXiv:1803.07055>{{cite news |arxiv=1803.07055 |title=Mania, Horia, Aurelia Guy, and Benjamin Recht. "Simple random search provides a competitive approach to reinforcement learning." arXiv preprint arXiv:1803.07055 (2018).|bibcode=2018arXiv180307055M}}</ref>

[[Reinforcement learning]] algorithms, in particular, require measuring their performance over a large number of random seeds, and also measuring their sensitivity to choices of hyperparameters.<ref name=arXiv:1803.07055/> Their evaluation with a small number of random seeds does not capture performance adequately due to high variance.<ref name=arXiv:1803.07055/> Some reinforcement learning methods, e.g. DDPG (Deep Deterministic Policy Gradient), are more sensitive to hyperparameter choices than others.<ref name=arXiv:1803.07055/>

== Optimization ==
{{main|Hyperparameter optimization}}

Hyperparameter optimization finds a tuple of hyperparameters that yields an optimal model which minimizes a predefined [[loss function]] on given test data.<ref name=abs1502.02127/>  The objective function takes a tuple of hyperparameters and returns the associated loss.<ref name=abs1502.02127/>

== Reproducibility ==
Apart from tuning hyperparameters, machine learning involves storing and organizing the parameters and results, and making sure they are reproducible.<ref name=sacred2015>{{cite news |url=https://indico.lal.in2p3.fr/event/2914/contributions/6476/subcontributions/169/attachments/6034/7159/Sacred_3.pdf |title=Greff, Klaus, and Jürgen Schmidhuber. "Introducing Sacred: A Tool to Facilitate Reproducible Research." |year=2015}}</ref> In the absence of a robust infrastructure for this purpose, research code often evolves quickly and compromises essential aspects like bookkeeping and [[reproducibility]].<ref name=sacred2017>{{cite news |url=http://conference.scipy.org/proceedings/scipy2017/pdfs/klaus_greff.pdf |title=Greff, Klaus, et al. "The Sacred Infrastructure for Computational Research." |year=2017}}</ref> Online collaboration platforms for machine learning go further by allowing scientists to automatically share, organize and discuss experiments, data, and algorithms.<ref name=arXiv:1407.7722>{{cite news |arxiv=1407.7722 |title=Vanschoren, Joaquin, et al. "OpenML: networked science in machine learning." arXiv preprint arXiv:1407.7722 (2014).|bibcode=2014arXiv1407.7722V}}</ref> Reproducibility can be particularly difficult for [[deep learning]] models.<ref>{{cite web |url=https://determined.ai/blog/reproducibility-in-ml/ |title=Reproducibility in ML: why it matters and how to achieve it |last1=Villa |first1=Jennifer |last2= Zimmerman |first2=Yoav |date=25 May 2018 |website=Determined AI Blog |access-date=31 August 2020}}</ref>

A number of relevant services and open source software exist:

=== Services ===
<!--Add in alphabetical order.-->
{| class="wikitable sortable"
|-
! Name !! Interfaces
|-
| [https://www.comet.ml/ Comet.ml]<ref name=kdn-cometml>{{Cite web|url=https://www.kdnuggets.com/2018/04/comet-ml-machine-learning-experiment-management.html|title=Comet.ml – Machine Learning Experiment Management}}</ref> || Python<ref name=pypi_cometml>{{Cite web|url=https://www.comet.ml/|title=comet-ml: Supercharging Machine Learning|first=Comet ML|last=Inc|via=PyPI}}</ref>
|-
| [https://www.openml.org/ OpenML]<ref name=openml2013>{{cite book |title=Van Rijn, Jan N., et al. "OpenML: A collaborative science platform." Joint European Conference on Machine Learning and Knowledge Discovery in Databases. Springer, Berlin, Heidelberg, 2013.|volume=7908|pages=645–649|doi=10.1007/978-3-642-40994-3_46|chapter = OpenML: A Collaborative Science Platform|series = Lecture Notes in Computer Science|year = 2013|last1 = Van Rijn|first1 = Jan N.|last2=Bischl|first2=Bernd|last3=Torgo|first3=Luis|last4=Gao|first4=Bo|last5=Umaashankar|first5=Venkatesh|last6=Fischer|first6=Simon|last7=Winter|first7=Patrick|last8=Wiswedel|first8=Bernd|last9=Berthold|first9=Michael R.|last10=Vanschoren|first10=Joaquin|isbn=978-3-642-38708-1}}</ref><ref name=arXiv:1407.7722/><ref name=openml2015>{{Cite web|url=http://www.jmlr.org/proceedings/papers/v41/vanschoren15.pdf|title=Vanschoren, Joaquin, Jan N. van Rijn, and Bernd Bischl. "Taking machine learning research online with OpenML." Proceedings of the 4th International Conference on Big Data, Streams and Heterogeneous Source Mining: Algorithms, Systems, Programming Models and Applications-Volume 41. JMLR. org, 2015.}}</ref><ref name=openml2016>{{cite web |url=https://openaccess.leidenuniv.nl/handle/1887/44814 |title=van Rijn, J. N. Massively collaborative machine learning. Diss. 2016.|date=2016-12-19}}</ref> || REST, Python, Java, R<ref name=gh_openml>{{Cite web|url=https://github.com/openml|title=OpenML|website=GitHub}}</ref>
|-
|[https://wandb.com Weights & Biases]<ref>{{Cite web|url=https://www.wandb.com/articles/h-weights-biases-for-experiment-tracking-and-collaboration-a-case-study|title=Weights & Biases for Experiment Tracking and Collaboration|last=|first=|date=|website=|url-status=live|archive-url=|archive-date=|access-date=}}</ref>
|Python<ref>{{Cite web|url=https://www.wandb.com/articles/pyenv-for-ml|title=Monitor your Machine Learning models with PyEnv|last=|first=|date=|website=|url-status=live|archive-url=|archive-date=|access-date=}}</ref>
|}

=== Software ===
<!--Add in alphabetical order. Remove entries that have been unmaintained for the last three years.-->
{| class="wikitable sortable"
|-
! Name !! Interfaces !! Store
|-
| [https://determined.ai Determined] || REST, Python || [[PostgreSQL]]
|-
| [https://github.com/openml/openml-docker-dev OpenML Docker]<ref name=openml2013/><ref name=arXiv:1407.7722/><ref name=openml2015/><ref name=openml2016/> || REST, Python, Java, R<ref name=gh_openml/> || MySQL
|-
| [https://github.com/IDSIA/sacred sacred]<ref name=sacred2015/><ref name=sacred2017/> || Python<ref name=pypi_sacred>{{Cite web|url=https://github.com/IDSIA/sacred|title=sacred: Facilitates automated and reproducible experimental research|first=Klaus|last=Greff|via=PyPI|date=2020-01-03}}</ref> || file, [[MongoDB]], TinyDB, SQL
|}

== See also ==
* [[Hyper-heuristic]]
* [[Replication crisis]]

== References ==
{{Reflist}}

{{Differentiable computing}}

[[Category:Machine learning]]
[[Category:Model selection]]