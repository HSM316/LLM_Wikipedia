{{multiple issues|
{{original research|date=May 2015}}
{{refimprove|date=May 2015}}
}}

In [[Knowledge representation and reasoning|knowledge representation]], particularly in the [[Semantic Web]], a '''metaclass''' is a [[Class (knowledge representation)|class]] whose instances can themselves be classes. Similar to their role [[metaclass|in programming languages]], metaclasses in [[ontology language]]s can have properties otherwise applicable only to individuals, while retaining the same class's ability to be classified in a concept hierarchy.  This enables knowledge about instances of those metaclasses to be inferred by [[semantic reasoners]] using statements made in the metaclass.  Metaclasses thus enhance the expressivity of knowledge representations in a way that can be intuitive for users. 

While classes are suitable to represent a population of individuals, metaclasses can, as one of their feature, be used to represent the conceptual dimension of an [[Ontology (information science)|ontology]].<ref>{{Cite journal|journal=Journal of Object Technology|title=Integrating Two Descriptions of Taxonomies with Materialization|author1=Alain Pirotte |author2=David Massart |year=2004|url=http://www.jot.fm/issues/issue_2004_05/article4.pdf}}</ref>  Metaclasses are supported in the [[Web Ontology Language]] (OWL) and the data-modeling vocabulary [[RDFS]].  
Metaclasses are often modeled by setting them as the [[Resource Description Framework#Overview|object]] of claims involving rdf:type and rdfs:subClassOf—built-in properties commonly referred to as ''instance of'' and ''subclass of''.  ''Instance of'' entails that the [[Resource Description Framework#Overview|subject]] of the claim is an instance, i.e. an individual that is a member of a class.  ''Subclass of'' entails that the subject is a class.  In the context of ''instance of'' and ''subclass of'', the key difference between metaclasses and ordinary classes is that metaclasses are the object of ''instance of'' claims used on a class, while ordinary classes are not objects of such claims. (e.g. in a claim <code>Bob ''instance of'' Human</code>, Bob is the subject and an Instance, while the object, Human, is an ordinary class; but a further claim that <code>Human ''instance of'' Animal species</code> makes "Animal species" a metaclass because it has a member, "Human", that is also a Class).

OWL 2 DL supports metaclasses by a feature called [[#Punning|punning]],<ref name="w3OWL2">{{cite web | url=http://www.w3.org/TR/owl2-new-features/#F12:_Punning | title=OWL 2 Web Ontology Language New Features and Rationale (Second Edition) | publisher=W3C | access-date=7 March 2015}}</ref> in which one entity is interpreted as two different types of thing—a class and an individual—depending on its syntactic context.  For example, through punning, an ontology could have a concept hierarchy such as <code>Harry the eagle ''instance of'' [[golden eagle]]</code>, <code>golden eagle ''subclass of'' [[bird]]</code>, and <code>golden eagle ''instance of'' [[species]]</code>.  In this case, the punned entity would be golden eagle, because it is represented as a class (second claim) and an instance (third claim); whereas the metaclass would be species, as it has an instance that is a class.  Punning also enables other properties that would otherwise be applicable only to ordinary instances to be used directly on classes, for example "golden eagle ''conservation status'' [[least concern]]."<ref name="HigherOrder">{{cite web|url=http://ontogenesis.knowledgeblog.org/1080|title=Higher Order Knowledge in Ontologies|author1=Robert Stevens|author2=Alan Rector|website=ontogenesis.knowledgeblog.org|date=13 May 2011 }}</ref>

Having arisen from the fields of [[knowledge representation]], [[description logic]] and [[formal ontology]], Semantic Web languages have a closer relationship to [[ontology|philosophical ontology]] than do conventional programming languages such as [[Java (programming language)|Java]] or [[Python (programming language)|Python]]. Accordingly, the nature of metaclasses is informed by philosophical notions such as [[abstract objects]], the [[abstract and concrete]], and [[type-token distinction]].  Metaclasses permit concepts to be construed as tokens of other concepts while retaining their ontological status as types.  This enables types to be enumerated over, while preserving the ability to inherit from types.  For example, metaclasses could allow a machine reasoner to infer from a human-friendly ontology how many [[chemical elements|elements]] are in the [[periodic table]], or, given that [[atomic number|number of protons]] is a property of chemical element and isotopes are a subclass of elements, how many protons exist in the isotope [[Deuterium|hydrogen-2]].

Metaclasses are sometime organized by levels, in a similar way to the simple Theory of types<ref>{{citation|last=Whitehead|first= Alfred North|last2= Russell|first2= Bertrand|title=Principia mathematica|volume=1|publisher= Cambridge University Press|place= Cambridge|year= 1910|edition=1|url=http://www.hti.umich.edu/cgi/b/bib/bibperm?q1=AAT3201.0001.001|jfm= 41.0083.02}}</ref> where classes that are not metaclasses are assigned the first level, classes of classes in the first level are in the second level, classes of classes in the second level on the next and so on.<ref name="Cyc">{{cite conference|author=Foxvog, D.|year=2005|title=Instances of instances modeled via higher-order classes|conference=Workshop on Foundational Aspects of Ontologies (FOnt 2005), 28th German Conference on Artificial Intelligence|place=Koblenz, Germany|pages=46–54|url=https://www.researchgate.net/publication/231599269}}</ref>

== Examples ==
Following the [[type-token distinction]], real world objects such as [[Abraham Lincoln]] or the planet [[Mars]] are regrouped into classes of similar objects.  Abraham Lincoln is said to be an ''instance of'' human, and Mars is an ''instance of'' planet. This is a kind of [[is-a]] relationship.  Metaclasses are class of classes, such as for example the [[nuclide]] concept. In chemistry, [[atom]]s are often classified as [[Chemical element|element]]s and, more specifically, [[isotope]]s.  The glass of water one last drank has many hydrogen atoms, each of which is an ''instance of'' [[hydrogen]].  [[Hydrogen]] itself, a class of atoms, is an ''instance of'' [[nuclide]].  Nuclide is a class of classes, hence a metaclass.

== Implementations ==

=== RDF and RDFS ===
In [[Resource Description Framework|RDF]], the {{mono|rdf:type}} property is used to state that a resource is an instance of a class.<ref name="rdf_type_definition">{{cite web|title=RDF Vocabulary Description Language 1.0: RDF Schema. Section 3.3, rdf:type.|author=Dan Brickley |author2=R.V. Guha |date=2004-02-10|publisher=World Wide Web Consortium|url=http://www.w3.org/TR/2004/REC-rdf-schema-20040210/#ch_type}}</ref>  This enables metaclasses to be easily created by using {{mono|rdf:type}} in a chain-like fashion.{{citation needed|date=April 2016}}{{Dubious |Quantification_of_.22whose_instances.22 |date=April 2016}} For example, in the two [[Resource Description Framework#Overview|triples]]

<pre>Harry the eagle rdf:type golden eagle
golden eagle rdf:type species</pre>

the resource {{mono|species}} is a metaclass,{{Dubious |Quantification_of_.22whose_instances.22 |date=April 2016}} because {{mono|golden eagle}} is used as a class in the first statement and the class {{mono|golden eagle}} is said to be an instance of the class {{mono|species}} in the second statement.

RDF also provides {{mono|rdf:Property}} as a way to create properties beyond those defined in the built-in vocabulary.  Properties can be used directly on metaclasses, for example "{{mono|[[Species#Numbers_of_species|species ''quantity'' 8.7 million]]}}", where {{mono|quantity}} is a property defined via {{mono|rdf:Property}} and {{mono|species}} is a metaclass per the preceding example above.

[[RDFS]], an extension of RDF, introduced {{mono|rdfs:Class}} and {{mono|rdfs:subClassOf}} and enriched how vocabularies can classify concepts.<ref name="rdfs_class_definition">{{cite web|title=RDF Vocabulary Description Language 1.0: RDF Schema. Section 2.2, rdfs:Class.|author=Dan Brickley |author2=R.V. Guha |date=2004-02-10|publisher=World Wide Web Consortium|url=http://www.w3.org/TR/2004/REC-rdf-schema-20040210/#ch_class}}</ref><ref name="rdfs_subclassof_definition">{{cite web|title=RDF Vocabulary Description Language 1.0: RDF Schema. Section 3.4, rdfs:subClassOf.|author=Dan Brickley |author2=R.V. Guha |date=2004-02-10|publisher=World Wide Web Consortium|url=http://www.w3.org/TR/2004/REC-rdf-schema-20040210/#ch_subclassof}}</ref>  Whereas {{mono|rdf:type}} enables vocabularies to represent [[instance (computer science)|instantiation]], the property {{mono|rdfs:subClassOf}} enables vocabularies to represent [[Hierarchy#Subsumptive containment hierarchy|subsumption]].  RDFS thus makes it possible for vocabularies to represent [[Taxonomy (general)|taxonomies]], also known as subsumption hierarchies or concept hierarchies, which is an important addition to the [[type–token distinction]] made possible by RDF.

Notably, the resource {{mono|rdfs:Class}} is an instance of itself,<ref name="rdfs_class_definition"/> demonstrating both the use of metaclasses in the language's internal implementation and a [[Reflexive relation|reflexive]] usage of {{mono|rdf:type}}. RDFS is its own [[metamodel]]<ref>{{Cite news|title=MetaModeling in OOP, MOF, RDFS, and OwL|author=S Koide|url=https://km.aifb.kit.edu/ws/swese2006/final/koide_full.pdf}}</ref>

=== OWL ===

In some OWL flavors like [[Web Ontology Language|OWL1]]-DL, entities can be either classes or instances, but cannot be both. This limitations forbids metaclasses and [[metamodeling]].<ref name="OWL-lite">{{cite web | url=http://www.w3.org/TR/owl-ref/#separatenames | title=OWL Web Ontology Language Reference | publisher=[[W3C]] | date=2004 | access-date=7 March 2015 | pages=Appendix E. Rules of Thumb for OWL DL ontologies}}</ref> This is not the case in the OWL1 full flavor, but this allows the model to be computationally undecidable.<ref name="motikmetamodeling">{{cite journal | url=https://www.cs.ox.ac.uk/boris.motik/pubs/motik07metamodeling-journal.pdf | author=Boris Motik | journal=Journal of Logic and Computation | year=2007 | doi=10.1093/logcom/exm027 | title =On the properties of metamodeling in OWL | volume=17 | issue=4 | pages=617–637 }}</ref>
In [[Web Ontology Language|OWL2]], metaclasses can implemented with ''punning'', that is a way to treat classes as if they were individuals.<ref name="w3OWL2"/> Other approaches have also been proposed and used to check the properties of [[ontologies]] at a meta level.<ref name="diagnosis">{{cite conference | url=https://www.cs.ox.ac.uk/files/3129/paper.pdf | title=Integrated metamodeling and diagnosis in OWL 2 | access-date=7 March 2015 | conference=international semantic web conference}}</ref>

==== Punning ====
OWL 2 supports metaclasses through a feature called ''punning''.  In metaclasses implemented by punning, the same subject is interpreted as two fundamentally different types of thing—a class and an individual—depending on its syntactic context.  This is similar to a [[pun]] in natural language, where different senses of the same word are emphasized to illustrate a point.  Unlike in natural language, where puns are typically used for comedic or rhetorical effect, the  main goal of punning in Semantic Web technologies is to make concepts easier to represent, closer to how they are discussed in everyday speech or academic literature.

=== Protégé ===

In the ontology editor [[Protégé (software)|Protégé]], metaclasses are templates for other classes who are their instances.<ref name="protege2000">{{cite conference | url=http://das.ufsc.br/~gb/pg-ia/Protege05/combining.pdf | title=The knowledge model of protégé 2000 | access-date=7 March 2015 | editor=Rose Dieng and Olivier Corby | book-title=Methods, Models, and Tools proceedings | conference=Knowledge engineering and knowledge management}} §6.1 summary of the RDFS model</ref>

== Classification ==
[[file:atom classes.svg|thumb|an example of ontology with a first metaclass order: the classification of some chemical atoms]]

Some ontologies like the [[Cyc|Cyc AI project]]'s classifies classes and metaclasses.<ref name="Cyc"/> Classes are divided into ''fixed-order classes'' and ''variable-order classes''. In the case of fixed-order classes, an order is attributed for metaclasses by measuring the distance to individuals with respect to the number of "instance of" triples that are necessary to find an individual. Classes that are not metaclasses are classes of individuals, so their order is "1" (''first-order classes''). Metaclasses that are classes of first-order classes' order is "2" (''second-order classes''), and so on. Variable-order metaclasses, on the other hand, can have instances; one example of variable-order metaclass is the class of all fixed-order classes.

==See also==
* [[Metaclass]]
* [[class (knowledge representation)]]

==References==
{{reflist}}

[[Category:Ontology languages]]
[[Category:Web Ontology Language]]
[[Category:Resource Description Framework]]
[[Category:Knowledge representation]]