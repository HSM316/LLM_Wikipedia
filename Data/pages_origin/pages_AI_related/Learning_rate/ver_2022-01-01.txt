{{short description|Tuning parameter (hyperparameter) in optimization}}
{{Machine learning bar}}
In [[machine learning]] and [[statistics]], the '''learning rate''' is a [[Hyperparameter (machine learning)|tuning parameter]] in an [[Mathematical optimization|optimization algorithm]] that determines the step size at each iteration while moving toward a minimum of a [[loss function]].<ref>{{cite book |first=Kevin P. |last=Murphy |title=Machine Learning: A Probabilistic Perspective |location=Cambridge |publisher=MIT Press |year=2012 |isbn=978-0-262-01802-9 |page=247 |url=https://www.google.com/books/edition/Machine_Learning/NZP6AQAAQBAJ?hl=en&gbpv=1&kptab=sideways&pg=PA247 }}</ref> Since it influences to what extent newly acquired information overrides old information, it metaphorically represents the speed at which a machine learning model "learns". In the [[adaptive control]] literature, the learning rate is commonly referred to as '''gain'''.<ref>{{cite paper |first=Bernard |last=Delyon |title=Stochastic Approximation with Decreasing Gain: Convergence and Asymptotic Theory |journal=Unpublished Lecture Notes |url=http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.29.4428&rep=rep1&type=pdf#page=5 |date=2000 |publisher=Université de Rennes |citeseerx=10.1.1.29.4428 }}</ref>

In setting a learning rate, there is a trade-off between the rate of convergence and overshooting. While the [[descent direction]] is usually determined from the [[Gradient descent|gradient]] of the loss function, the learning rate determines how big a step is taken in that direction. A too high learning rate will make the learning jump over minima but a too low learning rate will either take too long to converge or get stuck in an undesirable local minimum.<ref>{{cite book |first1=Nikhil |last1=Buduma |first2=Nicholas |last2=Locascio |year=2017 |title=Fundamentals of Deep Learning : Designing Next-Generation Machine Intelligence Algorithms |publisher=O'Reilly |isbn=978-1-4919-2558-4 |page=21 }}</ref>

In order to achieve faster convergence, prevent oscillations and getting stuck in undesirable local minima the learning rate is often varied during training either in accordance to a learning rate schedule or by using an adaptive learning rate.<ref name="variablelearningrate">{{cite book |title=Deep Learning : A Practitioner's Approach |first1=Josh |last1=Patterson |first2=Adam |last2=Gibson |publisher=O'Reilly |year=2017 |chapter=Understanding Learning Rates |pages=258–263 |isbn=978-1-4919-1425-0 }}</ref> The learning rate and its adjustments may also differ per parameter, in which case it is a [[diagonal matrix]] that can be interpreted as an approximation to the [[Invertible matrix|inverse]] of the [[Hessian matrix]] in [[Newton's method in optimization|Newton's method]].<ref>{{cite arXiv |first=Sebastian |last=Ruder |title=An Overview of Gradient Descent Optimization Algorithms |date=2017 |arxiv=1609.04747 }}</ref> The learning rate is related to the step length determined by inexact [[line search]] in [[quasi-Newton method]]s and related optimization algorithms.<ref>{{cite book |first=Y. |last=Nesterov |title=Introductory Lectures on Convex Optimization: A Basic Course |location=Boston |publisher=Kluwer |year=2004 |isbn=1-4020-7553-7 |page=25 |url=https://www.google.com/books/edition/Introductory_Lectures_on_Convex_Optimiza/2-ElBQAAQBAJ?hl=en&gbpv=1&pg=PA25 }}</ref><ref>{{cite book |first=L. C. W. |last=Dixon |chapter=The Choice of Step Length, a Crucial Factor in the Performance of Variable Metric Algorithms |title=Numerical Methods for Non-linear Optimization |location=London |publisher=Academic Press |year=1972 |isbn=0-12-455650-7 |pages=149–170 }}</ref> 

When conducting line searches, mini-batch sub-sampling (MBSS) affect the characteristics of the loss function along which the learning rate needs to be resolved.<ref>{{cite paper |first1=Dominic|last1=Kafka|first2=Daniel N.|last2=Wilke|title=An empirical study into finding optima in stochastic optimization of neural networks |journal=Information Sciences|volume=560|pages=235-255|url=https://www.sciencedirect.com/science/article/abs/pii/S0020025521000062 |date=2021|arxiv=1903.08552}}</ref> Static MBSS keeps the mini-batch fixed along a search direction, resulting in a smooth loss function along the search direction. Dynamic MBSS updates the mini-batch at every function evaluation, resulting in a point-wise discontinuous loss function along the search direction. Line searches that adaptively resolve learning rates for static MBSS loss functions include the parabolic approximation line (PAL) search.<ref>{{cite arXiv |first1=Maximus|last1=Mutschler|first2=Andreas|last2=Zell|title=Parabolic Approximation Line Search for DNNs |date=2019|arxiv=1903.11991}}</ref> Line searches that adaptively resolve learning rates for dynamic MBSS loss functions include probabilistic line searches,<ref>{{cite arXiv |first1=Maren |last1=Mahsereci |first2=Phillip |last2=Hennig |title=Probabilistic Line Searches for Stochastic Optimization |date=2016 |arxiv=1502.02846v4}}</ref> gradient-only line searches (GOLS)<ref>{{cite paper |first1=Dominic|last1=Kafka|first2=Daniel N.|last2=Wilke|title=Resolving learning rates adaptively by locating stochastic non-negative associated gradient projection points using line searches |journal=Journal of Global Optimization|volume=79|pages=111-152|url=https://link.springer.com/article/10.1007/s10898-020-00921-z |date=2021|arxiv=2001.05113}}</ref> and quadratic approximations.<ref>{{cite arXiv |first1=Younghwan|last1=Chae |first2=Daniel N.|last2=Wilke|title=Empirical study towards understanding line search approximations for training neural networks |date=2019|arxiv=1909.06893}}</ref>

== Learning rate schedule ==
Initial rate can be left as system default or can be selected using a range of techniques.<ref>{{cite arxiv |last1=Smith |first1=Leslie N. |title=Cyclical Learning Rates for Training Neural Networks |date=4 April 2017 |class=cs.CV |eprint=1506.01186 }}</ref> A learning rate schedule changes the learning rate during learning and is most often changed between epochs/iterations. This is mainly done with two parameters: '''decay''' and '''momentum''' . There are many different learning rate schedules but the most common are '''time-based, step-based''' and '''exponential'''.<ref name="variablelearningrate" />

'''Decay''' serves to settle the learning in a nice place and avoid oscillations, a situation that may arise when a too high constant learning rate makes the learning jump back and forth over a minimum, and is controlled by a hyperparameter.

'''Momentum''' is analogous to a ball rolling down a hill; we want the ball to settle at the lowest point of the hill (corresponding to the lowest error). Momentum both speeds up the learning (increasing the learning rate) when the error cost gradient is heading in the same direction for a long time and also avoids local minima by 'rolling over' small bumps. Momentum is controlled by a hyper parameter analogous to a ball's mass which must be chosen manually—too high and the ball will roll over minima which we wish to find, too low and it will not fulfil its purpose. [[Stochastic gradient descent#Momentum|The formula for factoring in the momentum]] is more complex than for decay but is most often built in with deep learning libraries such as [[Keras]].

'''Time-based''' learning schedules alter the learning rate depending on the learning rate of the previous time iteration. Factoring in the decay the mathematical formula for the learning rate is:

<math>\eta_{n+1} = \frac{\eta_n }{1+dn}</math>

where <math>\eta</math> is the learning rate, <math>d</math> is a decay parameter and <math>n</math> is the iteration step.

'''Step-based''' learning schedules changes the learning rate according to some pre defined steps. The decay application formula is here defined as:

<math>\eta_{n} = \eta_0d^{\left\lfloor\frac{1+n}{r}\right\rfloor}</math>

where <math>\eta_{n}</math> is the learning rate at iteration <math>n</math>, <math>\eta_0</math> is the initial learning rate, <math>d</math> is how much the learning rate should change at each drop (0.5 corresponds to a halving) and <math>r</math> corresponds to the droprate, or how often the rate should be dropped (10 corresponds to a drop every 10 iterations). The ''[[Floor and ceiling functions|floor]]'' function (<math>\lfloor\dots\rfloor</math>) here drops the value of its input to 0 for all values smaller than 1.

'''Exponential''' learning schedules are similar to step-based but instead of steps a decreasing exponential function is used. The mathematical formula for factoring in the decay is:

<math>\eta_{n} = \eta_0e^{-dn}</math>

where <math>d</math> is a decay parameter.

==Adaptive learning rate==
The issue with learning rate schedules is that they all depend on hyperparameters that must be manually chosen for each given learning session and may vary greatly depending on the problem at hand or the model used. To combat this there are many different types of [[Adaptive algorithm|adaptive]] gradient descent algorithms such as [[Stochastic gradient descent#AdaGrad|Adagrad]], Adadelta, [[Stochastic gradient descent#RMSProp|RMSprop]], and [[Stochastic gradient descent#Adam|Adam]]<ref>{{cite book |last1=Murphy |first1=Kevin |title=Probabilistic Machine Learning: An Introduction |url=https://probml.github.io/pml-book/book1.html |website=Probabilistic Machine Learning: An Introduction |access-date=10 April 2021 |date=2021 |publisher=MIT Press}}</ref> which are generally built into deep learning libraries such as [[Keras]].<ref>{{cite web |last1=Brownlee |first1=Jason |title=How to Configure the Learning Rate When Training Deep Learning Neural Networks |url=https://machinelearningmastery.com/learning-rate-for-deep-learning-neural-networks/ |website=Machine Learning Mastery |access-date=4 January 2021 |date=22 January 2019}}</ref>

==See also==
{{Div col|colwidth=20em}}
*[[Hyperparameter (machine learning)]]
*[[Hyperparameter optimization]]
*[[Stochastic gradient descent]]
*[[Variable metric methods]]
*[[Overfitting]]
*[[Backpropagation]]
*[[AutoML]]
*[[Model selection]]
*[[Self-tuning]]
{{Div col end}}

==References==
{{Reflist}}

==Further reading==
*{{cite book |first=Aurélien |last=Géron |title=Hands-On Machine Learning with Scikit-Learn and TensorFlow |publisher=O'Reilly |year=2017 |isbn=978-1-4919-6229-9 |pages=113–124 |chapter=Gradient Descent |chapter-url=https://books.google.com/books?id=khpYDgAAQBAJ&pg=PA113 }}
*{{cite book |first1=V. P. |last1=Plagianakos |first2=G. D. |last2=Magoulas |first3=M. N. |last3=Vrahatis |chapter=Learning Rate Adaptation in Stochastic Gradient Descent |title=Advances in Convex Analysis and Global Optimization |publisher=Kluwer |year=2001 |isbn=0-7923-6942-4 |pages=433–444 |chapter-url=https://books.google.com/books?id=YW4KBwAAQBAJ&pg=PA433 }}

==External links==
*{{cite web |first=Nando |last=de Freitas |title=Optimization |work=Deep Learning Lecture 6 |location=University of Oxford |date=February 12, 2015 |url=https://www.youtube.com/watch?v=0qUAb94CpOw&list=PLE6Wd9FR--EfW8dtjAuPoTuPcqmOV53Fu&index=9 |via=[[YouTube]] }}

[[Category:Machine learning]]
[[Category:Model selection]]
[[Category:Optimization algorithms and methods]]