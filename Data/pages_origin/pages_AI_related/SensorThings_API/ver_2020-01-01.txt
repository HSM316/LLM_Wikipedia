{{Infobox technology standard
| title             = OGC SensorThings API - Part 1 Sensing
| status            = OGC Standard Implementation Specification
| year_started      = 2015
| version = 1.0
| editors           = Steve Liang ([[SensorUp]]), Chih-Yuan Huang ([http://www.ncu.edu.tw National Central University]), Tania Khalafbeigi ([[SensorUp]])
| base_standards    = [[Json|JSON]], [[Observations and Measurements|OGC/ISO 19156:2011 O&M]]
| abbreviation      = OGC STA
| domain            = [[Open Geospatial Consortium]], [[Internet of Things]]
| website           = [https://github.com/opengeospatial/sensorthings OGC SensorThings API Standard GitHub Page]
}}
{{Infobox technology standard
| title             = OGC SensorThings API - Part 2 Tasking Core
| status            = OGC Standard Implementation Specification
| year_started      = 2018
| version = 1.0
| editors           = Steve Liang ([[SensorUp]]), Tania Khalafbeigi ([[SensorUp]])
| base_standards    = [http://www.opengeospatial.org/standards/sps OGC SPS]
| abbreviation      = OGC STA
| domain            = [[Open Geospatial Consortium]], [[Internet of Things]]
| website           = [https://github.com/opengeospatial/sensorthings OGC SensorThings API Standard GitHub Page]
}}
{{Infobox technology standard
| title             = OGC SensorThings API - Part 2 Tasking Core Discussion Paper
| status            = OGC Discussion Paper
| year_started      = 2018
| version = 1.0
| editors           = Steve Liang ([[SensorUp]]), Tania Khalafbeigi ([[SensorUp]]), Kan Luo(University of Calgary)
| base_standards    = [http://www.opengeospatial.org/standards/sensorthings OGC SensorThings]
| abbreviation      = OGC STA
| domain            = [[Open Geospatial Consortium]], [[Internet of Things]]
| website           = [https://portal.opengeospatial.org/files/?artifact_id=79179 OGC SensorThings API Tasking Core Discussion Paper download page]
}}

'''SensorThings API'''<ref>{{Cite web|url=http://www.opengeospatial.org/standards/sensorthings|title=OGC SensorThings API|website=Open Geospatial Consortium|access-date=2018-02-20}}</ref> is an [[Open Geospatial Consortium|Open Geospatial Consortium (OGC)]] standard providing an open and unified framework to interconnect [[Internet of Things|IoT]] sensing devices, data, and applications over the Web. It is an open standard addressing the [[Interoperability#Syntactic interoperability|syntactic interoperability]] and [[semantic interoperability]] of the Internet of Things. It complements the existing IoT networking protocols such [[CoAP]], [[MQTT]], [[Hypertext Transfer Protocol|HTTP]], [[6LoWPAN|6LowPAN]]. While the above-mentioned IoT networking protocols are addressing the ability for different IoT systems to exchange information, OGC SensorThings API is addressing the ability for different IoT systems to use and understand the exchanged information. As an OGC standard, SensorThings API also allows easy integration into existing [[Spatial Data Infrastructure]]s or [[Geographic Information Systems]].

OGC SensorThings API has two parts: (1) Part I - Sensing and (2) Part II - Tasking. OGC SensorThings API Part I - Sensing was released for public comment on June 18, 2015.<ref>{{Cite web|title = OGC seeks public comment on SensorThings API standard for Internet of Things {{!}} OGC|url = http://www.opengeospatial.org/pressroom/pressreleases/2238|website = www.opengeospatial.org|access-date = 2016-01-26}}</ref> The OGC Technical Committee (TC) approves start of electronic vote on December 3, 2015, and the SensorThings API Part I - Sensing passed the TC vote on February 1, 2016. The [http://docs.opengeospatial.org/is/15-078r6/15-078r6.html official OGC standard specification] was published online on July 26, 2016. In 2019 the SensorThings API was also published as a United Nation's ITU-T Technical Specification<ref>{{Cite web|url=https://www.itu.int/pub/T-FG-DPM-2019-3.2|title=Technical Specification D3.2 - SensorThings API - Sensing|website=www.itu.int|access-date=2019-07-17}}</ref>.  

OGC SensorThings API Part II - Tasking Core was released for public comment on February 20, 2018<ref>{{Cite web|url=http://www.opengeospatial.org/pressroom/pressreleases/2739|title=OGC seeks public comment on 'SensorThings API Part 2 – Tasking Core' Candidate Standard for use in the Internet of Things {{!}} OGC|website=www.opengeospatial.org|language=en|access-date=2018-02-21}}</ref>, and it passed the TC vote on June 1, 2018. The [http://docs.opengeospatial.org/is/17-079r1/17-079r1.html official OGC standard specification] for the SensorThings API Part II - Tasking Core was published online on January 8, 2019.

In order to offer a better developer experience, [https://portal.opengeospatial.org/files/?artifact_id=79179 the SensorThings API Part II - Tasking Core Discussion Paper] was published online on December 18th 2018. The Tasking Core Discussion paper provides 15 JSON examples showing how SensorThings API Part II - Tasking Core can be used.

== Design ==
SensorThings API is designed specifically for resource-constrained IoT devices and the Web developer community. It follows [[REST]] principles, the [[JSON]] encoding, and the OASIS [[Open Data Protocol|OData]] protocol and URL conventions. Also, it has an [[MQTT]] extension allowing users/devices to publish and subscribe updates from devices, and can use [[CoAP]] in addition to HTTP.
[[File:SensorThings API data model.svg|thumb|400x400px|SensorThings API data model]]
The foundation of the SensorThings API is its data model that is based on the [[ISO 19156]] (ISO/OGC [[Observations and Measurements]]), that defines a conceptual model for observations, and for features involved in sampling when making observations. In the context of the SensorThings, the features are modelled as ''Things'', ''Sensors'' (''i.e.'', Procedures in O&M), and ''Feature of Interests''. As a result, the SensorThings API provides an interoperable Observation-focus view, that is particularly useful to reconcile the differences between heterogeneous sensing systems (e.g., ''in-situ'' sensors and remote sensors).

An IoT device or system is modelled as a ''Thing''. A ''Thing'' has an arbitrary number of ''Location''s (including 0 ''Location''s) and an arbitrary number of ''Datastreams'' (including 0 ''Datastream''s). Each ''Datastream'' observes one ''ObservedProperty'' with one ''Sensor'' and has many ''Observations'' collected by the ''Sensor''. Each ''Observation'' observes one particular ''FeatureOfInterest''. The O&M based model allows SensorThings to accommodate heterogeneous IoT devices and the data collected by the devices.<ref>{{Cite web|title = API Reference|url = http://www.sensorup.com/docs/?json#introduction|website = www.sensorup.com|access-date = 2016-01-26}}</ref>

SensorThings API provides two main functionalities, each handled by a part. The two profiles are the Sensing part and the Tasking part. The Sensing part provides a standard way to manage and retrieve observations and metadata from heterogeneous IoT sensor systems, and the Sensing part functions are similar to the OGC [[Sensor Observation Service]]. The Tasking part provides a standard way for parameterizing - also called tasking - of task-able IoT devices, such as sensors or actuators. The Tasking part functions are similar to the OGC [http://www.opengeospatial.org/standards/sps Sensor Planning Service].  The Sensing part is designed based on the ISO/OGC [[Observations and Measurements]] (O&M) model, and allows IoT devices and applications to CREATE, READ, UPDATE, and DELETE (''i.e.'', HTTP POST, GET, PATCH, and DELETE) IoT data and metadata in a SensorThings service.

== Entities (Resources) ==
SensorThings API Part I - Sensing defines the following resources. As SensorThings is a RESTful web service, each entity can be CREATE, READ, UPDATE, and DELETE with standard [[HTTP Verbs|HTTP verbs]] ([[POST (HTTP)|POST]], [[HTTP GET|GET]], PATCH, and DELETE):<ref name=":0">{{Cite book|url=http://docs.opengeospatial.org/is/15-078r6/15-078r6.html|title=OGC® SensorThings API Part 1: Sensing|last=|first=|publisher=|isbn=|editor-last=Liang|editor-first=Steve|location=|pages=|editor-last2=Huang|editor-first2=Chih-Yuan|editor-last3=Khalafbeigi|editor-first3=Tania|via=|date=2016-07-26}}</ref><ref>{{Cite web|title = SensorThings Data Model|url = https://ogc-iot.github.io/ogc-iot-api/datamodel.html|website = ogc-iot.github.io|access-date = 2016-01-26}}</ref>
* <code>Thing</code>: An object of the physical world (physical things) or the information world (virtual things) that is capable of being identified and integrated into communication networks.<ref>{{Cite web|title = Y.2060&nbsp;:&nbsp;Overview of the Internet of things|url = https://www.itu.int/rec/T-REC-Y.2060-201206-I|website = www.itu.int|access-date = 2016-01-26|last = tsbmail}}</ref>
* <code>Locations</code>: Locates the ''Thing'' or the ''Things'' it associated with.
* <code>HistoricalLocations</code>: Set provides the current (i.e., last known) and previous locations of the ''Thing'' with their time.
* <code>Datastream</code>: A collection of Observations and the Observations in a ''Datastream'' measure the same ''ObservedProperty'' and are produced by the same ''Sensor''.
* <code>ObservedProperty</code> : Specifies the phenomenon of an ''Observation''.
* <code>Sensor</code> : An instrument that observes a property or phenomenon with the goal of producing an estimate of the value of the property.
* <code>Observation</code>: Act of measuring or otherwise determining the value of a property.<ref name=":2">{{Cite web|title = ISO 19156:2011 - Geographic information -- Observations and measurements|url = http://www.iso.org/iso/catalogue_detail.htm?csnumber=32574|website = www.iso.org|access-date = 2016-01-26}}</ref>
* <code>FeatureOfInterest</code>: An ''Observation'' results in a value being assigned to a phenomenon.The phenomenon is a property of a feature, the latter being the ''FeatureOfInterest'' of the ''Observation''.<ref name=":2" />
In addition to the above sensing resources, SensorThings API Part II - Tasking Core defines the following resources:<ref name=":1">{{Cite book|url=http://docs.opengeospatial.org/is/17-079r1/17-079r1.html|title=OGC® SensorThings API Part 2: Tasking Core|last=|first=|publisher=|isbn=|editor-last=Liang|editor-first=Steve|location=|pages=|editor-last2=Khalafbeigi|editor-first2=Tania|date=2019-01-08}}</ref>

* <code>TaskingCapabilities</code>: Specifies the task-able parameters of an actuator.
* <code>Tasks</code>: A collection of Tasks that has been created.
* <code>Actuator</code> : A type of transducer that converts a signal to some real-world action or phenomenon<ref>{{Cite web|url=http://www.opengeospatial.org/standards/sensorml|title=Sensor Model Language (SensorML) {{!}} OGC|website=www.opengeospatial.org|language=en|access-date=2018-02-21}}</ref>.

== Example Payload ==
<code>http://example.org/v1.0/Datastream(id)/Observations</code>
<syntaxhighlight lang="javascript" enclose="div" line>
{
  "@iot.count": 2,
  "value": [
    {
      "@iot.id": 1,
      "@iot.selfLink": "http://example.org/v1.0/Observations(1)",
      "phenomenonTime": "2016-01-01T05:00:00.000Z",
      "result": "-9",
      "resultTime": null,
      "Datastream@iot.navigationLink": "http://example.org/v1.0/Observations(1)/Datastream",
      "FeatureOfInterest@iot.navigationLink": "http://example.org/v1.0/Observations(1)/FeatureOfInterest"
    },
    {
      "@iot.id": 2,
      "@iot.selfLink": "http://example.org/v1.0/Observations(2)",
      "phenomenonTime": "2016-01-01T04:00:00.000Z",
      "result": "-10",
      "resultTime": null,
      "Datastream@iot.navigationLink": "http://example.org/v1.0/Observations(2)/Datastream",
      "FeatureOfInterest@iot.navigationLink": "http://example.org/v1.0/Observations(2)/FeatureOfInterest"
    }
  ]
}
</syntaxhighlight>

== Data Array Extensions ==
In order to reduce the data size transmitted over the network, SensorThings API data array extension allows users to request for multiple Observation entities and format the entities in the dataArray format. When a SensorThings service returns a dataArray response, the service groups Observation entities by Datastream or MultiDatastream, which means the Observation entities that link to the same Datastream or the same MultiDatastream are aggregated in one dataArray.

=== Example request for data array ===
<code>http://example.org/v1.0/Observations?$resultFormat=dataArray</code>

=== Example data array response ===
<syntaxhighlight lang="javascript" enclose="div" line>
{
  "value": [
    {
      "Datastream@iot.navigationLink": "http://example.org/v1.0/Datastreams(1)",
      "components": [
        "id",
        "phenomenonTime",
        "resultTime",
        "result"
      ],
      "dataArray@iot.count": 3,
      "dataArray": [
        [
          1,
          "2005-08-05T12:21:13Z",
          "2005-08-05T12:21:13Z",
          20
        ],
        [
          2,
          "2005-08-05T12:22:08Z",
          "2005-08-05T12:21:13Z",
          30
        ],
        [
          3,
          "2005-08-05T12:22:54Z",
          "2005-08-05T12:21:13Z",
          0
        ]
      ]
    }
  ]
}
</syntaxhighlight>

== Evaluation ==
'''Interoperability between OpenIoT and SensorThings'''
"''We believe that the implementation of the SensorThing API will be a major improvement for the OpenIoT middleware. It will give OpenIoT a standardized and truly easy to use interface to sensor values.This will complement the rich semantic reasoning services with a simple resource based interface. And the consistent data model mapping gives both a common context to describe the internet of things''".<ref>{{Cite book|title = Mapping the OGC SensorThings API onto the OpenIoT Middleware|publisher = Springer International Publishing|date = 2015-01-01|isbn = 9783319165455|pages = 62–70|series = Lecture Notes in Computer Science|doi = 10.1007/978-3-319-16546-2_6|language = en|first = Hylke van der|last = Schaaf|first2 = Reinhard|last2 = Herzog|editor-first = Ivana Podnar|editor-last = Žarko|editor-first2 = Krešimir|editor-last2 = Pripužić|editor-first3 = Martin|editor-last3 = Serrano}}</ref>

'''Efficiency of SensorThings API'''
A comprehensive evaluation of the SensorThings API is published in [http://www.mdpi.com/1424-8220/15/9/24343 Jazayeri, Mohammad Ali, Steve HL Liang, and Chih-Yuan Huang. "Implementation and Evaluation of Four Interoperable Open Standards for the Internet of Things." ''Sensors'' 15.9 (2015): 24343-24373].

== Quotes ==
SensorThings API was demonstrated in a pilot project<ref>{{Cite web|title = OGC announces successful completion of Incident Management Information Sharing IoT Pilot|url = http://www.opengeospatial.org/pressroom/pressreleases/2394}}</ref> sponsored by the [[Department of Homeland Security]] [[DHS Science and Technology Directorate|Science and Technology Directorate]]. Dr. Reginald Brothers, the Undersecretary of the Homeland Security Science and Technology, was "impressed with the ‘state of the practical’ where these various industry sensors can be integrated today using open standards that remove the stovepipe limitations of one-off technologies.<ref>{{Cite web|title = S&T's Internet of Things Pilot Demonstrates 'State of the Practical'|url = https://www.dhs.gov/science-and-technology/blog/2016/01/25/st-internet-things-pilot-demonstrates-state-practical|access-date = 2016-02-14|date = 2016-01-25}}</ref> "

== OGC SensorThings API Standard Specification ==
* '''[http://docs.opengeospatial.org/is/15-078r6/15-078r6.html OGC® SensorThings API Part 1: Sensing]'''<ref name=":0" />
** Internal reference number of this OGC®&nbsp; document: 15-078r6
** Submission Date: 2015-06-18
** Publication Date: 2016-07-26
** Editor: Steve Liang ([[University of Calgary]]/[[SensorUp]])
** Co-Editors: Chih-Yuan Huang ([[National Central University]]) / Tania Khalafbeigi ([[University of Calgary]]/[[SensorUp]])
* '''[http://docs.opengeospatial.org/is/17-079r1/17-079r1.html OGC® SensorThings API Part 2: Tasking Core]'''<ref name=":1" />
** Internal reference number of this OGC®&nbsp; document: 17-079r1
** Submission Date: 2017-10-13
** Publication Date: 2019-01-08
** Editor: Steve Liang ([[University of Calgary]]/[[SensorUp]])
** Co-Editors: Tania Khalafbeigi ([[University of Calgary]]/[[SensorUp]])
* Developer API Documentation
** '''[http://developers.sensorup.com/docs/#sensorthingsAPISensing Part I - Sensing]'''
** '''[http://developers.sensorup.com/docs/#sensorthingsAPITasking Part II - Tasking]'''
* [http://scratchpad.sensorup.com '''SensorThings API Sandbox''']
* '''[http://cite.opengeospatial.org/te2/about/sta10/1.0/site/ SensorThings Compliance Test Suite]'''

== Free and Open Source SensorThings API Implementations ==

=== Whiskers ===
In March 2016 [[SensorUp]] and the GeoSensorWeb Lab at the University of Calgary submitted an open source software project proposal to the Eclipse Foundation and has been approved. The project is called [https://github.com/eclipse/whiskers Whiskers].<ref>{{Cite web|title = Whisker, an Eclipse project proposal|url = https://projects.eclipse.org/proposals/whiskers|access-date = 2016-03-24|date = 2016-03-11}}</ref> Whiskers is an OGC SensorThings API framework. It will have a [[JavaScript]] client and a light-weight server for IoT gateway devices (e.g., Raspberry Pi or BeagleBone). Whiskers aim to foster a healthy and open IoT ecosystem, as opposed to one dominated by proprietary information silos. Whiskers aims to make SensorThings development easy for the large and growing world of IoT developers.

=== GOST ===
GOST<ref>{{Cite web|url=https://github.com/gost/home|title=Geodan/gost|website=GitHub|access-date=2016-06-30}}</ref> is an open source implementation of the SensorThings API in the [[Go (programming language)|Go programming language]] initiated by Geodan. It contains easily deployable server software and a JavaScript client. Currently (June 2016) it is in development but a first version can already be downloaded and deployed. The software can be installed on any device supporting Docker or Go (e.g. Windows, Linux, Mac OS and Raspberry Pi). By default sensor data is stored in a [[PostgreSQL]] database.

=== FROST ===
FROST-Server<ref>{{Cite web|url=https://github.com/FraunhoferIOSB/FROST-Server|title=FraunhoferIOSB/FROST-Server|website=GitHub|access-date=2018-07-04}}</ref> is a server implementation of the OGC SensorThings API. FROST-Server implements the entire specification, including all extensions. It is written in Java and can run in Tomcat or Wildfly and is available as a Docker image. Among its many features is the ability to use String or UUID based entity IDs.

FROST-Client<ref>{{Cite web|url=https://github.com/FraunhoferIOSB/FROST-Client|title=FraunhoferIOSB/FROST-Client|website=GitHub|access-date=2018-07-04}}</ref> is a Java client library for communicating with a SensorThings API compatible server.

=== SensorThings HcDT Charting SDK ===
SensorThings HcDT<ref>{{Cite web|url=http://www.sensorup.com/sensorthings-high-chart-and-data-table-hcdt/|title=SensorThings Highchart and DataTable (HcDT) {{!}} SensorUp|website=www.sensorup.com|access-date=2016-08-31}}</ref> is a JavaScript charting library for the OGC SensorThings API. It is based on the open source{{huh|date=December 2019}} [[Highcharts]] library and [https://datatables.net/ DataTables]. Table plug-in for jQuery|website=datatables.net|access-date=2016-08-31}}</ref> It is a front-end charting library enable developers to connect to datastreams from any OGC SensorThings API service, and display the sensor observations in charts, tables, or dashboard widgets for web applications.

=== Mozilla STA ===
[[Mozilla]] developed a node implementation of the OGC SensorThings API.<ref>{{Cite web|url=https://github.com/mozilla-sensorweb/sensorthings|title=mozilla-sensorweb/sensorthings|website=GitHub|language=en|access-date=2017-03-05}}</ref>

== Example Applications ==

=== [https://www.dhs.gov/science-and-technology Department of Homeland Security S&T] Shaken Fury Operational Experiment ===
In 2019 the Shaken Fury operational experiment<ref>{{Cite web|url=https://www.dhs.gov/science-and-technology/news/2019/06/10/news-release-st-industry-responders-partner-evaluate-tech|title=News Release: S&T, Industry, Responders Partner to Evaluate Tech|date=2019-06-10|website=Department of Homeland Security|language=en|access-date=2019-07-17}}</ref> for the DHS Next Generation First Responder program depicts a scenario of an earthquake causing partial structural collapse and HAZMAT leak at a stadium. OGC SensorThings API is used as the standard interface<ref>{{Cite web|url=https://www.dhs.gov/science-and-technology/ngfr/handbook|title=NGFR Integration Handbook|date=2018-02-06|website=Department of Homeland Security|language=en|access-date=2019-07-17}}</ref> that interconnects multiple sensors and offers an IoT enabled real-time situational awareness.

=== Smart Citizens for Smart Cities YYC - Crowd-sourced Air Quality Sensing ===
On Oct 8th 2016,<ref>{{Cite news|url=http://metronews.ca/news/calgary/2016/09/27/calgary-sensor-pilot-helps-you-plan-a-run-best-air-quality.html|title=Calgary sensor pilot helps you plan a run with the best air quality {{!}} Metro News|newspaper=metronews.ca|access-date=2016-11-04}}</ref> a group of volunteers (smart citizens) in Calgary gathered together, assembled their own sensors, installed at their houses, and formed a crowd-sourced air quality sensor network. All data are publicly available via OGC SensorThings API.<ref>{{Cite web|url=http://calgary-air.sensorup.com/|title=Air Quality in Calgary|website=calgary-air.sensorup.com|access-date=2016-11-04}}</ref> This citizen sensing efforts increased the number of Calgary's air quality sensors from 3 to more than 50.

=== Smart Emission Project in Nijmegen, NL ===
Smart emission<ref>{{Cite web|url=http://data.smartemission.nl/|title=Smart Emission|last=contributors|first=Just van den Broecke - Geonovum original: Mark Otto, Jacob Thornton, and Bootstrap|website=data.smartemission.nl|access-date=2016-11-04}}</ref> is an air quality monitoring project in the city of Nijmegen, NL. The project deployed multiple air quality sensors throughout the city. Data are published with open standards, including OGC SensorThings API. Part of the project is an open source ETL engine to load the project sensor data into an OGC SensorThings API.<ref>{{Cite web|url=https://github.com/Geonovum/smartemission/tree/master/etl|title=Geonovum/smartemission|website=GitHub|access-date=2016-11-04}}</ref>

=== SensorThings Dashboard ===

This [https://github.com/SensorThings-Dashboard/SensorThings-Dashboard dashboard] provides easy-to-use client-side visualisation of Internet-of-Things sensor data from OGC SensorThings API compatible servers. Various types of widgets can be arranged and configured on the dashboard. It is a web application and can be embedded into any website. A live demo is available on the [https://sensorthings-dashboard.github.io/ project page].
https://github.com/SensorThings-Dashboard/SensorThings-Dashboard

=== GOST Dashboard v2 ===
[https://github.com/gost/dashboard-v2 GOST Dashboard v2] is an open source library of custom HTML elements (web components) supporting SensorThings API. These elements facilitate the development of HTML applications integrating functionality and data from SensorThings API compatible services. The components are developed with [https://www.predix-ui.com Predix-UI] and [https://www.polymer-project.org/ Polymer].


== Comparison between OGC SensorThings API and OGC Sensor Observation Services ==
SensorThings API provides functions similar to the OGC [[Sensor Observation Service]], an OGC specification approved in 2005. Both standard specifications are under the OGC [[Sensor Web Enablement]] standard suite. The following table summarizes the technical difference between the two specifications.<ref>{{Cite web|title = Comparison of SensorThings API and Sensor Observation Service|url = http://www.sensorup.com/index.php/2016/03/01/comparison-of-sensorthings-api-and-sensor-observation-service/|access-date = 2016-02-29}}</ref>

{| class="wikitable"
|-
!   !! '''OGC SensorThings API''' !! '''OGC [[Sensor Observation Service]] (SOS)'''
|-
| '''Encoding''' || [[JSON]] || [[XML]]
|-
| '''Architecture Style''' || [[Resource-oriented architecture|Resource Oriented Architecture]] || [[Service-oriented architecture|Service Oriented Architecture]]
|-
| '''Binding''' || [[Representational state transfer|REST]] || [[SOAP]]
|-
| '''Inserting new sensors or observations''' || HTTP POST (e.g., [[CRUD]]) || using SOS specific interfaces, e.g., RegisterSensor(), InsertObservation()
|-
| '''Deleting existing sensors''' || HTTP DELETE || using SOS specific interfaces, i.e., DeleteSensor()
|-
| '''[[Pagination]] || $top, $skip, $nextLink || Not Supported
|-
| '''[[Publish–subscribe pattern|Pub/Sub]] Support''' || MQTT and SensorThings MQTT Extension || Not Supported
|-
| '''Updating properties of existing sensors or observations''' || HTTP PATCH and JSON PATCH || Not Supported
|-
| '''Deleting observations''' || HTTP DELETE || Not Supported
|-
| '''[[Linked data]] support''' || [[JSON-LD]] || Not Supported
|-
| '''Return only the properties selected by the client''' || $select || Not Supported
|-
| '''Return multiple O&M entities (e.g., FeatureOfInterest and Observation) in one request/response''' || $expand || Not Supported
|}

== Links ==
# [https://github.com/opengeospatial/sensorthings SensorThings API - GitHub]
# '''Presentation''': [https://vimeo.com/144475741 Sensor up your connected applications with OGC SensorThings API (FOSS4G)]
# '''Chapter:''' [https://link.springer.com/chapter/10.1007/978-3-319-16546-2_6 Mapping the OGC SensorThings API onto the OpenIoT Middleware]
# '''Tutorial'''&nbsp;in YouTube: [https://www.youtube.com/playlist?list=PLUSJC5mjKZ9TQb2sSkqqoikXFHUMKWr25 Getting Started Series #1], [http://www.sensorup.com/index.php/2016/04/07/spring-webinar-series-recordings/ SensorThings Tutorial Series #2] and [http://www.sensorup.com/blog/tutorials/sense-your-smart-city-connect-environmental-sensors-to-sensorthings-api/ SensorThings Tutorial Series #3]
# '''Application''': [https://pg.sensorup.com/ SensorThings Playground] allows interested people and organizations to experiment with a SensorThings system via a friendly, step-by-step process.

== References ==
<references />

[[Category:Geographic information systems]]
[[Category:Open Geospatial Consortium]]
[[Category:Open standards]]
[[Category:Web services]]