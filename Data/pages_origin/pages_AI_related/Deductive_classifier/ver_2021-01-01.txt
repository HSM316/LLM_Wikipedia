A '''deductive classifier''' is a type of [[artificial intelligence]] [[inference engine]]. It takes as input a set of declarations in a [[frame language]] about a domain such as medical research or molecular biology. For example, the names of [[Class hierarchy|classes, sub-classes]], properties, and restrictions on allowable values. The classifier determines if the various declarations are logically consistent and if not will highlight the specific inconsistent declarations and the inconsistencies among them. If the declarations are consistent the classifier can then assert additional information based on the input. For example, it can add information about existing classes, create additional classes, etc. This differs from traditional inference engines that trigger off of IF-THEN conditions in rules. Classifiers are also similar to [[Automated theorem proving|theorem provers]] in that they take as input and produce output via [[First Order Logic]]. Classifiers originated with [[KL-ONE]] [[Frame language]]s. They are increasingly significant now that they form a part in the enabling technology of the [[Semantic Web]]. Modern classifiers leverage the [[Web Ontology Language]]. The models they analyze and generate are called [[Ontologies (computer science)|ontologies]].<ref>{{cite journal|last=Berners-Lee|first=Tim|first2=James|last2=Hendler|first3=Ora|last3=Lassila|title=The Semantic Web A new form of Web content that is meaningful to computers will unleash a revolution of new possibilities|journal=Scientific American|date=May 17, 2001|url=http://www.cs.umd.edu/~golbeck/LBSC690/SemanticWeb.html|doi=10.1038/scientificamerican0501-34|volume=284|issue=5|pages=34–43|url-status=dead|archive-url=https://web.archive.org/web/20130424071228/http://www.cs.umd.edu/~golbeck/LBSC690/SemanticWeb.html|archive-date=April 24, 2013}}</ref>

== History ==
A classic problem in [[knowledge representation]] for artificial intelligence is the trade off between the expressive power and the computational efficiency of the knowledge representation system. The most powerful form of knowledge representation is First Order Logic (FOL). However, it is not possible to implement knowledge representation that provides the complete expressive power of first order logic. Such a representation will include the capability to represent concepts such as the set of all integers which are impossible to iterate through. Implementing an assertion quantified for an infinite set by definition results in an undecidable non-terminating program. However, the problem is deeper than not being able to implement infinite sets. As Levesque demonstrated, the closer a knowledge representation mechanism comes to FOL, the more likely it is to result in expressions that require infinite or unacceptably large resources to compute.<ref>{{cite book|last=Levesque|first=Hector|title=Reading in Knowledge Representation|year=1985|publisher=Morgan Kaufmann|isbn=978-0-934613-01-9|page=[https://archive.org/details/readingsinknowle00brac/page/49 49]|author2=Ronald Brachman|editor=Ronald Brachman and Hector J. Levesque|chapter=A Fundamental Tradeoff in Knowledge Representation and Reasoning|quote=The good news in reducing KR service to theorem proving is that we now have a very clear, very specific notion of what the KR system should do; the bad new is that it is also clear that the services can not be provided... deciding whether or not a sentence in FOL is a theorem... is unsolvable.|chapter-url=https://archive.org/details/readingsinknowle00brac|url=https://archive.org/details/readingsinknowle00brac/page/49}}</ref>

As a result of this trade-off, a great deal of early work on knowledge representation for artificial intelligence involved experimenting with various compromises that provide a subset of FOL with acceptable computation speeds. One of the first and most successful compromises was to develop languages based predominately on [[modus ponens]], i.e. IF-THEN rules. [[Rule-based systems]] were the predominate knowledge representation mechanism for virtually all early [[expert systems]]. Rule-based systems provided acceptable computational efficiency while still providing powerful knowledge representation. Also, rules were highly intuitive to knowledge workers. Indeed, one of the data points that encouraged researchers to develop rule-based knowledge representation was psychological research that humans often represented complex logic via rules.<ref>{{cite book|last=Hayes-Roth|first=Frederick|pages=[https://archive.org/details/buildingexpertsy00temd/page/6 6–7]|title=Building Expert Systems|year=1983|publisher=Addison-Wesley|isbn=978-0-201-10686-2|first2=Donald|last2=Waterman|first3=Douglas|last3=Lenat|url=https://archive.org/details/buildingexpertsy00temd/page/6}}</ref>

However, after the early success of rule-based systems there arose more pervasive use of frame languages instead of or more often combined with rules. Frames provided a more natural way to represent certain types of concepts, especially concepts in subpart or subclass hierarchies. This led to development of a new kind of inference engine known as a classifier. A classifier could analyze a class hierarchy (also known as an [[Ontology (computer science)|ontology]]) and determine if it was valid. If the hierarchy was invalid the classifier would highlight the inconsistent declarations. For a language to utilize a classifier it required a formal foundation. The first language to successfully demonstrate a classifier was the KL-ONE family of languages. The [[Loom (ontology)|LOOM language]] from ISI was heavily influenced by KL-ONE.  LOOM also was influenced by the rising popularity of object-oriented tools and environments. Loom provided a true object-oriented capability (e.g. message passing) in addition to Frame language capabilities. Classifiers play a significant role in the vision for the next generation Internet known as the Semantic Web. The Web Ontology Language provides a formalism that can be validated and reasoned on via classifiers such as Hermit and Fact++.<ref>{{cite journal|last1=MacGregor|first1=Robert|title=A Descriptive Classifier for the Predicate Calculus|journal=AAAI - 94 Proceedings|date=1994|url=http://www.aaai.org/Papers/AAAI/1994/AAAI94-033.pdf|access-date=17 July 2014}}</ref>

== Implementations ==
[[File:Protégé 3.4.3.png|500px|thumbnail|right|Protege Ontology Editor]]
The earliest versions of classifiers were [[Automated theorem proving|logic theorem provers]]. The first classifier to work with a [[Frame language]] was the [[KL-ONE]] classifier.<ref>{{Cite journal | last1 = Woods | first1 = W. A. | author-link1 = William Aaron Woods| last2 = Schmolze | first2 = J. G. | doi = 10.1016/0898-1221(92)90139-9 | title = The KL-ONE family | journal = Computers & Mathematics with Applications | volume = 23 | issue = 2–5 | pages = 133–177 | year = 1992 }}</ref><ref>{{Cite journal | last1 = Brachman | first1 = R. J. | author-link1 = Ronald J. Brachman| last2 = Schmolze | first2 = J. G. | doi = 10.1207/s15516709cog0902_1 | title = An Overview of the KL-ONE Knowledge Representation System | journal = Cognitive Science | volume = 9 | issue = 2 | pages = 171–216 | year = 1985 | doi-access = free }}</ref> A later system built on common lisp was LOOM from the Information Sciences Institute. LOOM provided true object-oriented capabilities leveraging the Common Lisp Object System, along with a frame language.<ref>{{cite journal|last=MacGregor|first=Robert|title=Using a description classifier to enhance knowledge representation|journal=IEEE Expert|date=June 1991|volume=6|issue=3|doi=10.1109/64.87683|pages=41–46}}</ref> In the Semantic Web the [[Protégé (software)|Protege]] tool from [[Stanford University|Stanford]] provides classifiers (also known as reasoners) as part of the default environment.<ref>{{cite web|title=Protege Wiki: Reasoners that integrate with Protege|url=http://protegewiki.stanford.edu/wiki/Reasoning|publisher=Stanford University|access-date=19 July 2014}}</ref>

== External links ==
* [http://owl.man.ac.uk/factplusplus/ Fact++ Reasoner]
* [http://hermit-reasoner.com/ HermiT Reasoner]
* [http://protege.stanford.edu/ Protege Ontology Editor]

==References==
{{Reflist}}

[[Category:Artificial intelligence]]
[[Category:Knowledge representation]]
[[Category:Ontology languages]]
[[Category:Classification algorithms]]