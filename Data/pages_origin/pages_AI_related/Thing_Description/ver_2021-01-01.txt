{{AFC submission|d|neo|u=Citrullin|ns=118|decliner=AngusWOOF|declinets=20201203171400|reason2=web|ts=20201203161559}} <!-- Do not remove this line! -->
{{AFC submission|d|nn|u=Egekorkan|ns=118|decliner=Hellknowz|declinets=20200124105122|small=yes|ts=20200123143854}} <!-- Do not remove this line! -->
{{AFC submission|d|nn|u=Egekorkan|ns=118|decliner=Theroadislong|declinets=20200108154332|small=yes|ts=20191122173237}} <!-- Do not remove this line! -->

{{AFC comment|1=needs ck for better sources '''[[User:DGG| DGG]]''' ([[User talk:DGG| talk ]]) 08:10, 15 October 2020 (UTC)}}

{{AFC comment|1=Same concern as before. The new sources do not pass [[WP:GNG]] as either reliable or in-depth. —&nbsp;<small>&nbsp;[[user:Hellknowz|<span style="color: #B00;">HELL</span>KNOWZ]]&nbsp;&nbsp;&nbsp;▎[[User talk:Hellknowz|TALK]]</small> 10:51, 24 January 2020 (UTC)}}

{{AFC comment|1=Wikipedia requires independent sources, we have very little interest in what their own website says. [[User:Theroadislong|Theroadislong]] ([[User talk:Theroadislong|talk]]) 15:43, 8 January 2020 (UTC)}}

----

<!-- EDIT BELOW THIS LINE -->
= Thing Description (TD) =
{{Infobox file format
| name          = Thing Description
| icon          = [[File:ThingDescription_Logo.png|ThingDescription|150px]]
| iconcaption   = The logo of the latest version, [[Thing Description]]
| extension     = .jsonld
| mime          = application/td+json
| developer     = [[W3C]]
| type          = [[JSON-LD]]
| released      = April 9, 2020
| url           = https://www.w3.org/TR/wot-thing-description/
| standard      = W3C Web of Things
| free          = Yes
| genre         = Device Description
}}

The '''Thing Description (TD)''' (or '''[[W3C]] WoT Thing Description (TD)''') is a [[royalty-free]], open information model with a  [[JSON]] based representation format for the [[Internet of Things]] (IoT). A TD provides a unified way to describe the capabilities of an IoT device or service with its offered data model and functions, protocol usage, and further metadata. Using Thing Descriptions help reduce the complexity of integrating IoT devices and their capabilities into IoT applications<ref>{{Cite web|title=Web of Things over IoT and Its Applications|url=https://www.infoq.com/articles/web-of-things-iot-apps/|access-date=2020-12-03|website=InfoQ|language=en}}</ref>.

The TD originated from the [[Web of Things]] (WoT) initative of the international standards organization of the [[W3C]] which has the intention to increase the interoperability in the IoT<ref>{{Cite web|title=Solution for IoT Interoperability – W3C Web of Things|url=https://www.dataversity.net/solution-for-iot-interoperability-w3c-web-of-things/|access-date=2020-04-13|website=DATAVERSITY - Data Education for Business and IT Professionals |language=en}}</ref>. Since April 2020, the '''Thing Description<ref name=":0">{{Cite web|url=https://www.w3.org/TR/wot-thing-description/|title=Web of Things (WoT) Thing Description|last=Käbisch|first=Sebastian|last2=Kamiya|first2=Takuki|last3=McCool|first3=Michael|last4=Charpenay|first4=Victor|last5=Kovatsch|first5=Matthias|date=2020-04-09|website=www.w3.org|url-status=live|archive-url=https://www.w3.org/TR/2020/REC-wot-thing-description-20200409/|archive-date=2020-04-09|access-date=2020-04-17}}</ref>''' is a [[W3C recommendation]]. 

== Principles ==
The major principle of the Thing Description is to provide a human-readable and machine-interpretable interface description of an IoT device/Thing. In that context, the ''WoT Thing Description is to the IoT what [[index.html]] is to a website: it can be considered as the entry point of a physical or virtual Thing/device''<ref>{{cite web |title=Solution for IoT Interoperability - W3C Web of Things (WoT) |url=https://www.w3.org/2020/04/pressrelease-wot-rec.html.en |website=W3C |publisher=W3C Press |access-date=22 December 2020}}</ref>. Thing Description are not limited to a specific communication protocol, rather it provides a framework called a '''WoT Binding Template'''<ref name=":11">{{Cite web|url=https://www.w3.org/TR/wot-binding-templates/|title=Web of Things (WoT) Binding    Templates|last=Koster|first=Michael|last2=Korkan|first2=Ege|date=2019-01-30|website=www.w3.org|url-status=live|archive-url=https://www.w3.org/TR/2020/NOTE-wot-binding-templates-20200130/|archive-date=2020-01-30|access-date=2020-04-17}}</ref>. Such a Protocol Binding defines the mapping from an '''Interaction Affordance''' to concrete messages of a specific IoT protocol such as [[MQTT]], [[HTTP]], [[CoAP]], [[Modbus]] or [[OPC UA]].

The WoT Thing Description defines 3 kinds of Interaction Affordances, named '''Property''', '''Action''' and '''Event''':

==== Property ====

An Interaction Affordance that exposes state of an IoT device. This state can then be retrieved (read) and optionally updated (write). Devices can also choose to make Properties observable by pushing the new state after a change.

==== Action ====

An Interaction Affordance that allows to invoke a function of an IoT device, which manipulates state (e.g., toggling a lamp on or off) or triggers a process on the device (e.g., dim a lamp over time).

==== Event ====

An Interaction Affordance that describes an event source, which asynchronously pushes event data to the subscribers of the event (e.g., overheating alerts).

== Components and Standard Technologies ==

[[File:WoT Thing Description Components.png|alt=WoT Thing Description components: Context Extension Framework, Security Framework, Things Relation Definitions, WoT Interaction Model (containing Properties, Actions and Evens), Data Model, Binding Templates.|thumb|428x428px|Figure 1. WoT Thing Description components.]]

In general, the Thing Description is designed to reuse and rely on established Internet and Web standards, this includes:
* Serializiation: The JSON serialization of the TD information model is aligned with the syntax of [[JSON-LD]] 1.1<ref>{{cite web |url=https://www.w3.org/TR/json-ld11/|title=JSON-LD Syntax 1.1|last=Kellogg |first=Gregg |last2=Champin|first2=Pierre-Antoine|last3=Longley|first3=Dave|date=2020-07-16}}</ref>. JSON-LD opens the oppertunity of context extension and enrich the Thing Description instances with additional (e.g., domain-specific) semantics such as from [[Schema.org]]. This also supports the extraction  and the understanding of relevant information such as in discovery scenarios in IoT applications<ref>{{cite book |last1=Serena |first1=Fernando |last2=Poveda-Villalón |first2=María |last3=García-Castro |first3=Raúl |title=Semantic Discovery in the Web of Things |date=22 February 2018 |publisher=Springer |location=Cham, Switzerland |isbn=978-3-319-74433-9 |url=https://link.springer.com/chapter/10.1007/978-3-319-74433-9_2}}</ref>.
* Security: The Thing Description comes with a framework that allows to provide metadata to follow existing security scheme such as [[https://en.wikipedia.org/wiki/OAuth#OAuth_2.0_2| OAuth2]] or Digest Access Authentication<ref>{{cite web |last1=Ed. |first1=R. Shekh-Yusef |last2=Ahrens |first2=D. |last3=Bremer |first3=S. |title=HTTP Digest Access Authentication |url=https://tools.ietf.org/html/rfc7616 |publisher=IETF |access-date=2020-09-01}}</ref>. Due to the context extension concept of the Thing Description specific security schemes can be imported.
* Linking: Things may have references to other Things or like to link to further information. For defining such kind of relations the Thing Description relys on on the well know Web Linking<ref>{{cite web |last1=Nottingham |first1=M. |title=Web Linking |url=https://tools.ietf.org/html/rfc8288 |publisher=IETF |date=September 2017}}</ref> concept.
* Interactions: The offered data and/or functions of a Thing are assigned to the corresponding interaction affordance Properties, Actions, and Events. 
* Data Schema: For modeling the Thing's data that can be exchanged, the concept of JSON schema<ref>{{cite web |last1=Wright |first1=Austin |last2=Andrews |first2=Henry |last3=Luff |first3=Geraint |title=JSON Schema Validation: A Vocabulary for Structural Validation of JSON |url=https://tools.ietf.org/html/draft-handrews-json-schema-validation-01 |publisher=IETF}}</ref> is embedded in the Thing Description.
* Bindings: The binding templates define the specific protocol and serialization method for the properties, actions, and events of the Thing. As protocol identification and adressing method URI Identifier<ref>{{cite web |last1=Berners-Lee |first1=T. |last2=Fielding |first2=R. |last3=Masinter |first3=L. |title=Uniform Resource Identifier (URI): Generic Syntax |url=https://tools.ietf.org/html/rfc3986 |publisher=IETF}}</ref> are used. For announcing the serializiation encoding  (e.g., [[JSON]], [[CBOR]], [[XML]], [[Efficient XML Interchange]]) of the payload that is specified by the data schema, Media Type<ref>{{cite web |last1=Freed |first1=N. |last2=Borenstein |first2=N. |title=Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types |url=https://tools.ietf.org/html/rfc2046 |publisher=IETF}}</ref> assignment is applied in the Thing Description.

== Thing Description Examples ==

Below is an example TD serialized in JSON-LD fo<nowiki/>rmat, which has one property, one action and one event. The IoT device represented by this TD uses the HTTP protocol but a TD can represent any protocol with a [[URI scheme]], as shown in the example below.<syntaxhighlight lang="json-ld" line="1">
{
    "@context": "https://www.w3.org/2019/wot/td/v1",
    "id": "urn:dev:ops:32473-WoTLamp-1234",
    "title": "MyLampThing",
    "securityDefinitions": {
        "basic_sc": {"scheme": "basic", "in":"header"}
    },
    "security": ["basic_sc"],
    "properties": {
        "status" : {
            "type": "string",
            "forms": [{
                "href": "https://mylamp.example.com/status",
                "htv:methodName":"GET"
            }]
        }
    },
    "actions": {
        "toggle" : {
            "forms": [{
                "href": "https://mylamp.example.com/toggle",
                "htv:methodName":"POST"
            }]
        }
    },
    "events":{
        "overheating":{
            "data": {"type": "string"},
            "forms": [{
                "href": "https://mylamp.example.com/oh",
                "htv:methodName":"GET",
                "subprotocol": "longpoll"
            }]
        }
    }
}
</syntaxhighlight>This TD represents an Internet connected lamp, which could be thought as a simple version of a [[Philips Hue]] lamp.

From this TD example, a client knows that there exists one Property affordance with the title ''status'' (lines 10-16). In addition, information is provided in lines 13-14 that this Property is readable with an HTTP GET request to the [[URI]] <code><nowiki>https://mylamp.example.com/status</nowiki></code>, and will return a string-based status value. In a similar manner, an Action affordance is specified to toggle the switch status using the POST method on the <code><nowiki>https://mylamp.example.com/toggle</nowiki></code> resource. The Event affordance enables a mechanism for asynchronous messages to be sent by a Thing. Here, a subscription to be notified upon a possible overheating event of the lamp can be obtained by using HTTP with its long polling subprotocol on <code><nowiki>https://mylamp.example.com/oh</nowiki></code>. The use of the GET or POST method is stated explicitly but can be omitted using the default assumptions stated in the TD specification. It can be seen that the HTTP methods are defined using the <code>"htv:methodName"</code> vocabulary terms. This vocabulary terms for HTTP are included in the TD vocabulary that is found in the <code>"@context"</code> value.

This example also specifies the <code>basic</code> security scheme, requiring a username and password for access. A security scheme is first given a name and its corresponding scheme in the <code>securityDefinitions</code> and then activated by specifying that name in a <code>security</code> section. In combination with the use of the HTTP this example demonstrates the use of [[Basic access authentication]].

Below is the same connected lamp but using MQTT protocol and no security.<syntaxhighlight lang="json-ld" line="1">
{
    "@context": [
        "https://www.w3.org/2019/wot/td/v1",
        {"mqv": "http://www.example.org/mqtt-binding#"}
    ],
    "id": "urn:dev:ops:32473-WoTLamp-1234",
    "title": "MyLampThing",
    "securityDefinitions": {
        "nosec_sc": {"scheme": "nosec"}
    },
    "security": ["nosec_sc"],
    "properties": {
        "status" : {
            "type": "string",
            "forms": [{
                "href": "mqtt://mylamp.example.com/status",
                "mqv:controlPacketValue": "SUBSCRIBE"
            }]
        }
    },
    "actions": {
        "toggle" : {
            "forms": [{
                "href": "mqtt://mylamp.example.com/toggle",
                "mqv:controlPacketValue": "PUBLISH"
            }]
        }
    },
    "events":{
        "overheating":{
            "data": {"type": "string"},
            "forms": [{
                "href": "mqtt://mylamp.example.com/oh",
                "mqv:controlPacketValue": "SUBSCRIBE"
            }]
        }
    }
}

</syntaxhighlight>Differently from the last TD, here the forms include MQTT protocol as specified by the WoT Binding Templates. More specifically, lines 17, 25 and 34 describe what message types should be used to use the affordances. For example, instead of [[HTTP GET]] and longpoll subprotocol to observe the overheating event, a client can subscribe to this event using the MQTT protocol. Furthermore, a WoT device with MQTT protocol can be both a publisher and a subscriber. For the property and event affordances, it would publish the values, whereas for action affordances it would subscribe to the action topics that other MQTT publishers can trigger by publishing to these topics.<br />

== Implementations ==
Thing Description editing and validation tools
* Eclipse edi{TD}or<ref>{{Citation|title=Eclipse edi{TD}or project|publisher=Eclipse Foundation|date=2020-12-04|url=https://github.com/eclipse/editdor/}}</ref> : A tool for simply designing W3C Thing Descriptions and Thing Models
* TD Playground<ref>{{Citation|title=Thing Description Playground |date=2020-11-14|url=http://plugfest.thingweb.io/playground/}}</ref> : Playground for validation of Thing Description instances

Implementations using Thing Description
* Eclipse node-wot<ref name=":3">{{Citation|title=thingweb.node-wot. W3C Web of Things implementation on NodeJS.|date=2019-11-14|url=https://github.com/eclipse/thingweb.node-wot|publisher=Eclipse Foundation|access-date=2019-11-17}}</ref> : An implementation of W3C WoT technologies in [[Node.js]]
* WoTify<ref>{{cite arxiv|eprint=1909.03296|class=cs.DC|first=Ege|last=Korkan|first2=Hassib Belhaj|last2=Hassine|title=WoTify: A platform to bring Web of Things to your devices|date=2019-09-07|last3=Schlott|first3=Verena Eileen|last4=Käbisch|first4=Sebastian|last5=Steinhorst|first5=Sebastian}}</ref> : A library of WoT implementation that support a Thing Description
*wot-py<ref>{{Citation|last=Mangas|first=Andrés García|title=Experimental implementation of a W3C Web of Things runtime: agmangas/wot-py|date=2020-01-08|url=https://github.com/agmangas/wot-py|access-date=2020-01-15}}</ref>: An implementation of W3C WoT technologies in [[Python (programming language)]]
*Node-RED node-gen<ref>{{Citation|last=Toumura|first=Kunihiko|title=Contribute to k-toumura/node-red-nodegen development by creating an account on GitHub|date=2019-05-21|url=https://github.com/k-toumura/node-red-nodegen|access-date=2020-01-15}}</ref>: Generates nodes based on a Thing Description in [[Node-RED]]
*SANE<ref>{{Cite web|title=Java-Implementation für das Web of Things veröffentlicht|url=https://sane.city/news/2019/11/19/wot_servient/|access-date=2020-01-28|website=sane.city|language=en-us}}</ref>: An implementation of W3C WoT technologies in [[Java (programming language)]]

== See also ==

* [[Web of Things]]
* [[Digital Twin]]
* [[OpenAPI Specification]]

== References ==
{{reflist}}

== Thing Description ==

{{AfC submission|||ts=20201223131149|u=Articelexpert|ns=118}}

