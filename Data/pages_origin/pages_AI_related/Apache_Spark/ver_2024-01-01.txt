{{Short description|Open-source data analytics cluster computing framework}}
{{Infobox software
| name = Apache Spark
| logo = [[File:Apache Spark logo.svg|frameless|250px|Spark Logo]]
| caption = 
| author = [[Matei Zaharia]]
| developer = Apache Spark
| released = [https://github.com/apache/spark/releases/tag/v1.0.0 {{Start date and age|2014|05|26}}]
| latest release version = 3.5.0 ([[Scala (programming language)|Scala]] 2.13)
| latest release date = {{Start date and age|2023|09|09}}
| latest preview version = 
| latest preview date = 
| operating system = [[Microsoft Windows]], [[macOS]], [[Linux]]
| size = 
| programming language = [[Scala (programming language)|Scala]]<ref>{{cite web |url=https://spark.apache.org/releases/spark-release-2-0-0.html |title=Spark Release 2.0.0 |quote=MLlib in R: SparkR now offers MLlib APIs [..] Python: PySpark now offers many more MLlib algorithms"}}</ref>
| genre = Data analytics, [[machine learning]] algorithms
| license = [[Apache License 2.0]]
| website = {{Official URL}}
| repo = {{URL|https://gitbox.apache.org/repos/asf?p{{=}}spark.git|Spark Repository}}
| language = [[Scala (programming language)|Scala]], [[Java (programming language)|Java]], [[SQL]], [[Python (programming language)|Python]], [[R (programming language)|R]], [[C Sharp (programming language)|C#]], [[F Sharp (programming language)|F#]]
}}
'''Apache Spark'''  is an [[Open-source software|open-source]] unified analytics engine for large-scale data processing. Spark provides an [[application programming interface|interface]] for programming clusters with implicit [[data parallelism]] and [[fault tolerance]]. Originally developed at the [[UC Berkeley|University of California, Berkeley]]'s [[AMPLab]], the Spark [[codebase]] was later donated to the [[Apache Software Foundation]], which has maintained it since.

==Overview==
Apache Spark has its architectural foundation in the resilient distributed dataset (RDD), a read-only [[Set (abstract data type)#Multiset|multiset]] of data items distributed over a cluster of machines, that is maintained in a [[fault-tolerant computing|fault-tolerant]] way.<ref name="hc10">{{cite conference |first1=Matei |last1=Zaharia |first2=Mosharaf |last2=Chowdhury |first3=Michael J. |last3=Franklin |first4=Scott |last4=Shenker |first5=Ion |last5=Stoica |title=Spark: Cluster Computing with Working Sets |conference=USENIX Workshop on Hot Topics in Cloud Computing (HotCloud) |url=https://amplab.cs.berkeley.edu/wp-content/uploads/2011/06/Spark-Cluster-Computing-with-Working-Sets.pdf}}</ref> The Dataframe API was released as an abstraction on top of the RDD, followed by the Dataset API. In Spark 1.x, the RDD was the primary [[application programming interface]] (API), but as of Spark 2.x use of the Dataset API is encouraged<ref>{{cite web |url=https://spark.apache.org/docs/2.2.0/quick-start.html |title=Spark 2.2.0 Quick Start |author=<!--Not stated--> |date=2017-07-11 |website=apache.org |access-date=2017-10-19 |quote=we highly recommend you to switch to use Dataset, which has better performance than RDD}}</ref> even though the RDD API is not [[deprecated]].<ref>{{cite web |url=https://spark.apache.org/docs/2.2.0/api/scala/index.html#deprecated-list |title=Spark 2.2.0 deprecation list |author=<!--Not stated--> |date=2017-07-11 |website=apache.org |access-date=2017-10-10}}</ref><ref>{{cite web |url=https://databricks.com/blog/2016/07/14/a-tale-of-three-apache-spark-apis-rdds-dataframes-and-datasets.html |title=A Tale of Three Apache Spark APIs: RDDs, DataFrames, and Datasets: When to use them and why |last=Damji |first=Jules |date=2016-07-14 |website=databricks.com |access-date=2017-10-19}}</ref> The RDD technology still underlies the Dataset API.<ref>{{cite book |last=Chambers |first=Bill |date=2017-08-10 |title=Spark: The Definitive Guide |chapter-url=http://techbus.safaribooksonline.com/book/operating-systems-and-server-administration/apache/9781491912201/12dot-resilient-distributed-datasets-rdds/about_rdds_html |publisher=[[O'Reilly Media]] |chapter=12 |quote=virtually all Spark code you run, where DataFrames or Datasets, compiles down to an RDD }}{{Dead link|date=September 2023 |bot=InternetArchiveBot |fix-attempted=yes }}</ref><ref>{{cite web |url=https://www.janbasktraining.com/blog/what-is-spark/ |title= What is Apache Spark? Spark Tutorial Guide for Beginner |website=janbasktraining.com |access-date=2018-04-13|date= 2018-04-13 }}</ref>

Spark and its RDDs were developed in 2012 in response to limitations in the [[MapReduce]] cluster computing [[Programming paradigm|paradigm]], which forces a particular linear [[dataflow]] structure on distributed programs: MapReduce programs read input data from disk, [[Map (parallel pattern)|map]] a function across the data, [[Fold (higher-order function)|reduce]] the results of the map, and store reduction results on disk. Spark's RDDs function as a [[working set]] for distributed programs that offers a (deliberately) restricted form of distributed [[shared memory]].<ref>{{cite conference |first1=Matei |last1=Zaharia |first2=Mosharaf |last2=Chowdhury |first3=Tathagata |last3=Das |first4=Ankur |last4=Dave |first5=Justin |last5=Ma |first6=Murphy |last6=McCauley |first7=Michael |last7=J. |first8=Scott |last8=Shenker |first9=Ion |last9=Stoica |date=2010 |title=Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing |url=https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf |conference=USENIX Symp. Networked Systems Design and Implementation}}</ref>

Inside Apache Spark the workflow is managed as a [[directed acyclic graph]] (DAG). Nodes represent RDDs while edges represent the operations on the RDDs.

Spark facilitates the implementation of both [[iterative algorithm]]s, which visit their data set multiple times in a loop, and interactive/exploratory data analysis, i.e., the repeated [[database]]-style querying of data. The [[latency (engineering)|latency]] of such applications may be reduced by several orders of magnitude compared to [[Apache Hadoop]] MapReduce implementation.{{r|hc10}}<ref>{{cite conference|first1=Reynold| last1=Xin| first2=Josh |last2=Rosen| first3=Matei| last3=Zaharia| first4=Michael| last4=Franklin| first5=Scott| last5=Shenker| first6=Ion| last6=Stoica|title=Shark: SQL and Rich Analytics at Scale| conference=SIGMOD 2013|date=June 2013| url=https://amplab.cs.berkeley.edu/wp-content/uploads/2013/02/shark_sigmod2013.pdf| bibcode=2012arXiv1211.6176X| arxiv=1211.6176}}</ref>
Among the class of iterative algorithms are the training algorithms for [[machine learning]] systems, which formed the initial impetus for developing Apache Spark.<ref>{{cite web |title=4 reasons why Spark could jolt Hadoop into hyperdrive |first=Derrick |last=Harris |date=28 June 2014 |url=https://gigaom.com/2014/06/28/4-reasons-why-spark-could-jolt-hadoop-into-hyperdrive/ |website=[[Gigaom]] |access-date=25 February 2016 |archive-date=24 October 2017 |archive-url=https://web.archive.org/web/20171024090226/https://gigaom.com/2014/06/28/4-reasons-why-spark-could-jolt-hadoop-into-hyperdrive/ |url-status=dead }}</ref>

Apache Spark requires a [[cluster manager]] and a [[Clustered file system|distributed storage system]]. For cluster management, Spark supports standalone (native Spark cluster,  where you can launch a cluster either manually or use the launch scripts provided by the install package. It is also possible to run these daemons on a single machine for testing), [[Apache Hadoop|Hadoop YARN]], [[Apache Mesos]] or [[Kubernetes]].<ref>{{cite web|url=https://spark.apache.org/docs/2.4.0/cluster-overview.html#cluster-manager-types|title=Cluster Mode Overview - Spark 2.4.0 Documentation - Cluster Manager Types|author=<!--Staff writer(s); no by-line.-->|date=2019-07-09|website=apache.org|publisher=Apache Foundation|access-date=2019-07-09}}</ref> For distributed storage, Spark can interface with a wide variety, including [[Alluxio]], [[Apache Hadoop#Hadoop distributed file system|Hadoop Distributed File System (HDFS)]],<ref>[https://amplab.cs.berkeley.edu/software/ Figure showing Spark in relation to other open-source Software projects including Hadoop]</ref> [[MapR#MapR converged data platform|MapR File System (MapR-FS)]],<ref>[http://doc.mapr.com/display/MapR/Ecosystem+Support+Matrix MapR ecosystem support matrix]</ref> [[Apache Cassandra|Cassandra]],<ref>{{cite mailing list |url=http://mail-archives.apache.org/mod_mbox/cassandra-user/201409.mbox/%3CCABNXB2DE5Apmvn1nNg79+VdPCSZiCsGdt=ZB4s4OF_5JzS60iA@mail.gmail.com%3E |title=Re: cassandra + spark / pyspark |date=2014-09-10 |access-date=2014-11-21 |mailing-list=Cassandra User |last=Doan |first=DuyHai }}</ref> [[OpenStack#Object storage (Swift)|OpenStack Swift]], [[Amazon S3]], [[Apache Kudu|Kudu]], [[Lustre (file system)|Lustre file system]],<ref>{{cite book|chapter=Characterization and Optimization of Memory-Resident MapReduce on HPC Systems|publisher=IEEE|date=May 2014|doi=10.1109/IPDPS.2014.87|isbn=978-1-4799-3800-1|title=2014 IEEE 28th International Parallel and Distributed Processing Symposium|last1=Wang|first1=Yandong|last2=Goldstone|first2=Robin|last3=Yu|first3=Weikuan|last4=Wang|first4=Teng|pages=799–808|s2cid=11157612}}</ref> or a custom solution can be implemented. Spark also supports a pseudo-distributed local mode, usually used only for development or testing purposes, where distributed storage is not required and the local file system can be used instead; in such a scenario, Spark is run on a single machine with one executor per [[CPU core]].

===Spark Core===
Spark Core is the foundation of the overall project. It provides distributed task dispatching, scheduling, and basic [[I/O interface|I/O]] functionalities, exposed through an application programming interface (for [[Java (programming language)|Java]], [[Python (programming language)|Python]], [[Scala (programming language)|Scala]], [[.NET]]<ref name=":1">{{Citation|title=dotnet/spark|date=2020-09-14|url=https://github.com/dotnet/spark|publisher=.NET Platform|access-date=2020-09-14}}</ref> and [[R (programming language)|R]]) centered on the RDD [[Abstraction (computer science)|abstraction]] (the Java API is available for other JVM languages, but is also usable for some other non-JVM languages that can connect to the JVM, such as [[Julia (programming language)|Julia]]<ref>{{Cite web | url=https://github.com/dfdx/Spark.jl |title =GitHub - DFDX/Spark.jl: Julia binding for Apache Spark.|website =[[GitHub]]|date = 2019-05-24}}</ref>). This interface mirrors a [[functional programming|functional]]/[[higher-order programming|higher-order]] model of programming: a "driver" program invokes parallel operations such as map, [[Filter (computer science)|filter]] or reduce on an RDD by passing a function to Spark, which then schedules the function's execution in parallel on the cluster.{{r|hc10}} These operations, and additional ones such as [[Join (database)|joins]], take RDDs as input and produce new RDDs. RDDs are [[Immutable object|immutable]] and their operations are [[lazy evaluation|lazy]]; fault-tolerance is achieved by keeping track of the "lineage" of each RDD (the sequence of operations that produced it) so that it can be reconstructed in the case of data loss. RDDs can contain any type of Python, .NET, Java, or Scala objects.

Besides the RDD-oriented functional style of programming, Spark provides two restricted forms of shared variables: ''broadcast variables'' reference read-only data that needs to be available on all nodes, while ''accumulators'' can be used to program reductions in an [[imperative programming|imperative]] style.{{r|hc10}}

A typical example of RDD-centric functional programming is the following Scala program that computes the frequencies of all words occurring in a set of text files and prints the most common ones. Each {{mono|map}}, {{mono|flatMap}} (a variant of {{mono|map}}) and {{mono|reduceByKey}} takes an [[anonymous function]] that performs a simple operation on a single data item (or a pair of items), and applies its argument to transform an RDD into a new RDD.

<syntaxhighlight lang="scala">
val conf = new SparkConf().setAppName("wiki_test") // create a spark config object
val sc = new SparkContext(conf) // Create a spark context
val data = sc.textFile("/path/to/somedir") // Read files from "somedir" into an RDD of (filename, content) pairs.
val tokens = data.flatMap(_.split(" ")) // Split each file into a list of tokens (words).
val wordFreq = tokens.map((_, 1)).reduceByKey(_ + _) // Add a count of one to each token, then sum the counts per word type.
wordFreq.sortBy(s => -s._2).map(x => (x._2, x._1)).top(10) // Get the top 10 words. Swap word and count to sort by count.
</syntaxhighlight>

===Spark SQL===
Spark [[SQL]] is a component on top of Spark Core that introduced a data abstraction called DataFrames,{{efn|Called SchemaRDDs before Spark 1.3<ref>{{Cite web | url=https://spark.apache.org/releases/spark-release-1-3-0.html |title = Spark Release 1.3.0 {{pipe}} Apache Spark}}</ref>}} which provides support for structured and [[semi-structured data]]. Spark SQL provides a [[domain-specific language]] (DSL) to manipulate DataFrames in [[Scala (programming language)|Scala]], [[Java (programming language)|Java]], [[Python (programming language)|Python]] or [[.NET]].<ref name=":1" /> It also provides SQL language support, with [[command-line interface]]s and [[Open Database Connectivity|ODBC]]/[[Java Database Connectivity|JDBC]] server. Although DataFrames lack the compile-time type-checking afforded by RDDs, as of Spark 2.0, the strongly typed DataSet is fully supported by Spark SQL as well.

<syntaxhighlight lang="scala">
import org.apache.spark.sql.SparkSession

val url = "jdbc:mysql://yourIP:yourPort/test?user=yourUsername;password=yourPassword" // URL for your database server.
val spark = SparkSession.builder().getOrCreate() // Create a Spark session object

val df = spark
  .read
  .format("jdbc")
  .option("url", url)
  .option("dbtable", "people")
  .load()

df.printSchema() // Looks at the schema of this DataFrame.
val countsByAge = df.groupBy("age").count() // Counts people by age

//or alternatively via SQL:
//df.createOrReplaceTempView("people")
//val countsByAge = spark.sql("SELECT age, count(*) FROM people GROUP BY age")
</syntaxhighlight>

===Spark Streaming===
Spark Streaming uses Spark Core's fast scheduling capability to perform [[Event stream processing|streaming analytics]]. It ingests data in mini-batches and performs RDD transformations on those mini-batches of data. This design enables the same set of application code written for batch analytics to be used in streaming analytics, thus facilitating easy implementation of [[lambda architecture]].<ref>{{Cite web|url=https://www.pluralsight.com/courses/spark-kafka-cassandra-applying-lambda-architecture|title=Applying the Lambda Architecture with Spark, Kafka, and Cassandra {{!}} Pluralsight|website=www.pluralsight.com|access-date=2016-11-20}}</ref><ref>{{cite web |url=http://blog.cloudera.com/blog/2014/08/building-lambda-architecture-with-spark-streaming/ |title=Building Lambda Architecture with Spark Streaming |last1=Shapira |first1=Gwen |date=29 August 2014 |website=cloudera.com |publisher=Cloudera |access-date=17 June 2016 |quote=re-use the same aggregates we wrote for our batch application on a real-time data stream |archive-url=https://web.archive.org/web/20160614022751/http://blog.cloudera.com/blog/2014/08/building-lambda-architecture-with-spark-streaming/ |archive-date=14 June 2016 |url-status=dead }}</ref> However, this convenience comes with the penalty of latency equal to the mini-batch duration. Other streaming data engines that process event by event rather than in mini-batches include [[Storm (event processor)|Storm]] and the streaming component of [[Apache Flink|Flink]].<ref>{{cite book |chapter= Benchmarking Streaming Computation Engines: Storm, Flink and Spark Streaming |date=May 2016 |publisher=IEEE |doi=10.1109/IPDPSW.2016.138 |title=2016 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW) |pages=1789–1792 |last1=Chintapalli |first1=Sanket |last2=Dagit |first2=Derek |last3=Evans |first3=Bobby |last4=Farivar |first4=Reza |last5=Graves |first5=Thomas |last6=Holderbaugh |first6=Mark |last7=Liu |first7=Zhuo |last8=Nusbaum |first8=Kyle |last9=Patil |first9=Kishorkumar |last10=Peng |first10=Boyang Jerry |last11=Poulosky |first11=Paul |isbn=978-1-5090-3682-0 |s2cid=2180634 }}</ref> Spark Streaming has support built-in to consume from [[Apache Kafka|Kafka]], [[Apache Flume|Flume]], [[Twitter#Implementation|Twitter]], [[ZeroMQ]], [[Amazon Web Services#Database|Kinesis]], and [[Network socket|TCP/IP sockets]].<ref>{{cite web |url=https://www.sigmoid.com/getting-data-into-spark-streaming/ |title=Getting Data into Spark Streaming |last1=Kharbanda |first1=Arush |date=17 March 2015 |website=sigmoid.com |publisher=Sigmoid (Sunnyvale, California IT product company) |access-date=7 July 2016 |archive-url=https://web.archive.org/web/20160815025917/https://www.sigmoid.com/getting-data-into-spark-streaming/ |archive-date=15 August 2016 |url-status=dead }}</ref>

In Spark 2.x, a separate technology based on Datasets, called Structured Streaming, that has a higher-level interface is also provided to support streaming.<ref>{{cite web |url=https://databricks.com/blog/2016/07/28/structured-streaming-in-apache-spark.html |title=Structured Streaming In Apache Spark: A new high-level API for streaming |last=Zaharia |first=Matei |date=2016-07-28 |website=databricks.com |access-date=2017-10-19}}</ref>

Spark can be deployed in a traditional [[On-premises software|on-premises]] [[data center]] as well as in the [[Cloud computing|cloud]].<ref>{{Cite web |title=On-Premises vs. Cloud Data Warehouses: Pros and Cons |url=https://www.techtarget.com/searchdatamanagement/tip/On-premises-vs-cloud-data-warehouses-Pros-and-cons |access-date=2022-10-16 |website=SearchDataManagement |language=en}}</ref>

===MLlib Machine Learning Library===
Spark MLlib is a [[Distributed computing|distributed]] machine-learning framework on top of Spark Core that, due in large part to the distributed memory-based Spark architecture, is as much as nine times as fast as the disk-based implementation used by [[Apache Mahout]] (according to benchmarks done by the MLlib developers against the [[Linear regression|alternating least squares]] (ALS) implementations, and before Mahout itself gained a Spark interface), and [[Scale (computing)|scales]] better than [[Vowpal Wabbit]].<ref>{{cite web |url=http://www.slideshare.net/chaochen5496/mlllib-sparkmeetup8613finalreduced/68 |title=Spark Meetup: MLbase, Distributed Machine Learning with Spark |last1=Sparks |first1=Evan |last2=Talwalkar |first2=Ameet |date=2013-08-06 |website=slideshare.net |publisher=Spark User Meetup, San Francisco, California |access-date=10 February 2014}}</ref> Many common machine learning and statistical algorithms have been implemented and are shipped with MLlib which simplifies large scale machine learning [[Pipeline (software)|pipelines]], including:

* [[summary statistics]], [[Correlation and dependence|correlations]], [[stratified sampling]], [[hypothesis testing]], random data generation<ref>{{Cite web|title = MLlib {{!}} Apache Spark|url = http://spark.apache.org/mllib/|website = spark.apache.org|access-date = 2016-01-18}}</ref>
* [[Statistical classification|classification]] and [[Regression analysis|regression]]: [[support vector machines]], [[logistic regression]], [[linear regression]], [[Naive Bayes classifier|naive Bayes classification]], [[Decision tree|Decision Tree]], [[Random forest|Random Forest]], [[Gradient boosting|Gradient-Boosted Tree]]
* [[collaborative filtering]] techniques including alternating least squares (ALS)
* [[Cluster analysis|cluster analysis methods]] including [[K-means clustering|k-means]], and [[latent Dirichlet allocation]] (LDA)
* [[dimensionality reduction|dimensionality reduction techniques]] such as [[singular value decomposition]] (SVD), and [[principal component analysis]] (PCA)
* [[feature extraction]] and [[Data transformation (statistics)|transformation]] functions
* [[optimization (mathematics)|optimization]] algorithms such as [[stochastic gradient descent]], [[limited-memory BFGS]] (L-BFGS)

===GraphX===
GraphX is a distributed [[Graph (abstract data type)|graph-processing]] framework on top of Apache Spark. Because it is based on RDDs, which are immutable, graphs are immutable and thus GraphX is unsuitable for graphs that need to be updated, let alone in a transactional manner like a [[graph database]].<ref>{{cite web |url=http://www.slideshare.net/SparkSummit/finding-graph-isomorphisms-in-graphx-and-graphframes/11 |title=Finding Graph Isomorphisms In GraphX And GraphFrames: Graph Processing vs. Graph Database |last1=Malak |first1=Michael |date=14 June 2016 |website=slideshare.net |publisher=sparksummit.org |access-date=11 July 2016}}</ref> GraphX provides two separate APIs for implementation of massively parallel algorithms (such as [[PageRank]]): a [[Graph database#Distributed processing|Pregel]] abstraction, and a more general MapReduce-style API.<ref>{{cite book |last=Malak |first=Michael |date=1 July 2016 |title=Spark GraphX in Action |url=https://books.google.com/books?id=8XcPjwEACAAJ |publisher=Manning |page=89 |isbn=9781617292521 |quote=Pregel and its little sibling aggregateMessages() are the cornerstones of graph processing in GraphX. ... algorithms that require more flexibility for the terminating condition have to be implemented using aggregateMessages()}}</ref> Unlike its predecessor Bagel, which was formally deprecated in Spark 1.6, GraphX has full support for property graphs (graphs where properties can be attached to edges and vertices).<ref>{{cite web |url=http://www.slideshare.net/SparkSummit/finding-graph-isomorphisms-in-graphx-and-graphframes/15 |title=Finding Graph Isomorphisms In GraphX And GraphFrames: Graph Processing vs. Graph Database |last1=Malak |first1=Michael |date=14 June 2016 |website=slideshare.net |publisher=sparksummit.org |access-date=11 July 2016}}</ref>

Like Apache Spark, GraphX initially started as a research project at UC Berkeley's AMPLab and Databricks, and was later donated to the Apache Software Foundation and the Spark project.<ref>{{cite conference|first1=Joseph| last1=Gonzalez| first2=Reynold |last2=Xin| first3=Ankur| last3=Dave| first4=Daniel| last4=Crankshaw| first5=Michael| last5=Franklin| first6=Ion| last6=Stoica|title=GraphX: Graph Processing in a Distributed Dataflow Framework| conference=OSDI 2014|date=Oct 2014| url=https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-gonzalez.pdf}}</ref>

===Language support===

Apache Spark has built-in support for Scala, Java, SQL, R, and Python with 3rd party support for the .NET CLR,<ref>{{Cite web|url=https://dotnet.microsoft.com/apps/data/spark|title = .NET for Apache Spark {{pipe}} Big data analytics}}</ref> Julia,<ref>{{Cite web|url=https://github.com/dfdx/Spark.jl|title = Spark.jl| website=[[GitHub]] |date = 14 October 2021}}</ref> and more.

==History==
Spark was initially started by [[Matei Zaharia]] at UC Berkeley's AMPLab in 2009, and open sourced in 2010 under a [[BSD licenses|BSD license]].<ref name=":0">{{Cite news|url=https://www.computerweekly.com/feature/Apache-Spark-speeds-up-big-data-decision-making|title=Apache Spark speeds up big data decision-making|last=Clark|first=Lindsay|work=ComputerWeekly.com|access-date=2018-05-16|language=en-GB}}</ref>

In 2013, the project was donated to the Apache Software Foundation and switched its license to [[Apache License|Apache 2.0]]. In February 2014, Spark became a [[Apache Software Foundation#Projects|Top-Level Apache Project]].<ref>{{cite web |url=https://blogs.apache.org/foundation/entry/the_apache_software_foundation_announces50 |title=The Apache Software Foundation Announces Apache&#8482 Spark&#8482 as a Top-Level Project |author=<!--Staff writer(s); no by-line.--> |date=27 February 2014 |website=apache.org |publisher=Apache Software Foundation |access-date=4 March 2014}}</ref>

In November 2014, Spark founder M. Zaharia's company [[Databricks]] set a new world record in large scale sorting using Spark.<ref>[http://databricks.com/blog/2014/11/05/spark-officially-sets-a-new-record-in-large-scale-sorting.html Spark officially sets a new record in large-scale sorting]</ref><ref name=":0" />

Spark had in excess of 1000 contributors in 2015,<ref>[https://www.openhub.net/p/apache-spark Open HUB Spark development activity]</ref> making it one of the most active projects in the Apache Software Foundation<ref>{{cite web |url=https://blogs.apache.org/foundation/entry/the_apache_software_foundation_announces50 |title=The Apache Software Foundation Announces Apache&#8482 Spark&#8482 as a Top-Level Project |author=<!--Staff writer(s); no by-line.--> |date=27 February 2014 |website=apache.org |publisher=Apache Software Foundation |access-date=4 March 2014}}</ref> and one of the most active open source [[big data]] projects.

{| class="wikitable"
|-
! Version
! Original release date
! Latest version
! Release date
|-
| {{Version|o|0.5}}
| 2012-06-12
| 0.5.2
| 2012-11-22
|-
| {{Version|o|0.6}}
| 2012-10-15
| 0.6.2
| 2013-02-07
|-
| {{Version|o|0.7}}
| 2013-02-27
| 0.7.3
| 2013-07-16
|-
| {{Version|o|0.8}}
| 2013-09-25
| 0.8.1
| 2013-12-19
|-
| {{Version|o|0.9}}
| 2014-02-02
| 0.9.2
| 2014-07-23
|-
| {{Version|o|1.0}}
| 2014-05-26
| 1.0.2
| 2014-08-05
|-
| {{Version|o|1.1}}
| 2014-09-11
| 1.1.1
| 2014-11-26
|-
| {{Version|o|1.2}}
| 2014-12-18
| 1.2.2
| 2015-04-17
|-
| {{Version|o|1.3}}
| 2015-03-13
| 1.3.1
| 2015-04-17
|-
| {{Version|o|1.4}}
| 2015-06-11
| 1.4.1
| 2015-07-15
|-
| {{Version|o|1.5}}
| 2015-09-09
| 1.5.2
| 2015-11-09
|-
| {{Version|o|1.6}}
| 2016-01-04
| 1.6.3
| 2016-11-07
|-
| {{Version|o|2.0}}
| 2016-07-26
| 2.0.2
| 2016-11-14
|-
| {{Version|o|2.1}}
| 2016-12-28
| 2.1.3
| 2018-06-26
|-
| {{Version|o|2.2}}
| 2017-07-11
| 2.2.3
| 2019-01-11
|-
| {{Version|o|2.3}}
| 2018-02-28
| 2.3.4
| 2019-09-09
|-
| {{Version|o|2.4 LTS}}
| 2018-11-02
| 2.4.8
| 2021-05-17<ref>{{cite web |author=<!--Not stated--> |title=Spark 2.4.8 released |url=https://spark.apache.org/news/spark-2-4-8-released.html |url-status=live |archive-url=https://web.archive.org/web/20210825155614/https://spark.apache.org/news/spark-2-4-8-released.html |archive-date=2021-08-25 |website=spark.apache.org }}</ref>
|-
| {{Version|o|3.0}}
| 2020-06-18
| 3.0.3
| 2021-06-01<ref>{{cite web|author=<!--Not stated-->|title=Spark 3.0.3 released |url=https://spark.apache.org/news/spark-3-0-3-released.html |website=spark.apache.org }}</ref>
|-
| {{Version|o|3.1}}
| 2021-03-02
| 3.1.3
| 2022-02-18<ref>{{cite web |author=<!--Not stated--> |title=Spark 3.1.3 released |url=https://spark.apache.org/news/3-1-3-released.html |url-status=live |archive-url=https://web.archive.org/web/20220618140827/https://spark.apache.org/news/3-1-3-released.html |archive-date=2022-06-18 |website=spark.apache.org }}</ref>
|-
| {{Version|o|3.2}}
| 2021-10-13
| 3.2.4
| 2023-04-13<ref>{{cite web |author=<!--Not stated--> |title=Spark 3.2.4 released |url=https://spark.apache.org/news/spark-3-2-4-released.html |website=spark.apache.org }}</ref>
|-
| {{Version|c|3.3}}
| 2022-06-16
| 3.3.3
| 2023-08-21<ref>{{cite web |author=<!--Not stated--> |title=Spark 3.3.3 released |url=https://spark.apache.org/news/spark-3-3-3-released.html |website=spark.apache.org }}</ref>
|-
| {{Version|c|3.4}}
| 2023-04-13
| 3.4.1
| 2023-06-23<ref>{{cite web |author=<!--Not stated--> |title=Spark 3.4.1 released |url=https://spark.apache.org/news/spark-3-4-1-released.html |website=spark.apache.org }}</ref>
|-
| {{Version|c|3.5}}
| 2023-09-09
| 3.5.0
| 2023-09-09<ref>{{cite web |author=<!--Not stated--> |title=Spark 3.5.0 released |url=https://spark.apache.org/news/spark-3-5-0-released.html |website=spark.apache.org }}</ref>
|-
| colspan="4" | <small>{{Version |l |show=111110}}</small>
|}
<!-- o=Old version; co=Older version, still supported; c=Latest version; p=Latest preview version (same as "Planned-Future"?) -->

=== Scala Version ===
Spark 3.5.0 is based on Scala 2.13 (and thus works with Scala 2.12 and 2.13 out-of-the-box), but it can also be made to work with Scala 3.<ref>{{cite web |title=Using Scala 3 with Spark |url=https://www.47deg.com/blog/using-scala-3-with-spark/ |website=47 Degrees |access-date=29 July 2022 |language=en}}</ref>

===Developers===
Apache Spark is developed by a community. The project is managed by a group called the "Project Management Committee" (PMC).<ref>{{Cite web|url=https://projects.apache.org/committee.html?spark|title=Apache Committee Information}}</ref>

===Maintenance releases and EOL===
Feature release branches will, generally, be maintained with bug fix releases for a period of 18 months. For example, branch 2.3.x is no longer considered maintained as of September 2019, 18 months after the release of 2.3.0 in February 2018. No more 2.3.x releases should be expected after that point, even for bug fixes.

The last minor release within a major a release will typically be maintained for longer as an “LTS” release. For example, 2.4.0 was released on November 2, 2018, and had been maintained for 31 months until 2.4.8 was released in May 2021. 2.4.8 is the last release and no more 2.4.x releases should be expected even for bug fixes.<ref>{{Cite web |title=Versioning policy |url=https://spark.apache.org/versioning-policy.html |website=spark.apache.org }}</ref>

==See also==
* [[List of concurrent and parallel programming languages#APIs/frameworks|List of concurrent and parallel programming APIs/Frameworks]]

==Notes==
{{Notelist}}

==References==
{{Reflist|30em}}

==External links==
* {{Official website}}

{{Apache Software Foundation}}
{{Parallel computing}}

{{DEFAULTSORT:Spark}}
[[Category:Apache Software Foundation projects|Spark]]
[[Category:Big data products]]
[[Category:Cluster computing]]
[[Category:Data mining and machine learning software]]
[[Category:Free software programmed in Scala]]
[[Category:Hadoop]]
[[Category:Java platform]]
[[Category:Software using the Apache license]]
[[Category:University of California, Berkeley]]
[[Category:Articles with example Scala code]]