{{Short description|Decentralized machine learning}}
[[File:Centralized federated learning protocol.png|thumb|Diagram of a Federated Learning protocol with smartphones training a global AI model]]
'''Federated learning''' (also known as '''collaborative learning''') is a [[machine learning]] technique that trains an algorithm via multiple independent sessions, each using its own dataset. This approach stands in contrast to traditional centralized machine learning techniques where local datasets are merged into one training session, as well as to approaches that assume that local data samples are [[Independent and identically distributed random variables|identically distributed]].

Federated learning enables multiple actors to build a common, robust machine learning model without sharing data, thus addressing critical issues such as data privacy, data security, data access rights and access to heterogeneous data. Its applications engage industries including defense, telecommunications, [[Internet of things|Internet of Things]], and pharmaceuticals. A major open question is when/whether federated learning is preferable to pooled data learning. Another open question concerns the trustworthiness of the devices and the impact of malicious actors on the learned model.

== Definition ==
Federated learning aims at training a machine learning algorithm, for instance deep [[neural network]]s, on multiple local datasets contained in local nodes without explicitly exchanging data samples. The general principle consists in training local models on local data samples and exchanging [[Parameters (computer science)|parameters]] (e.g. the weights and biases of a deep neural network) between these local nodes at some frequency to generate a global model shared by all nodes.

The main difference between federated learning and distributed learning lies in the assumptions made on the properties of the local datasets,<ref name=":1">{{Cite arXiv|eprint = 1511.03575|last1 = Konečný|first1 = Jakub|last2 = McMahan|first2 = Brendan|last3 = Ramage|first3 = Daniel|title = Federated Optimization: Distributed Optimization Beyond the Datacenter|year = 2015|class = cs.LG}}</ref> as distributed learning originally aims at [[Computing power|parallelizing computing power]] where federated learning originally aims at training on [[Homogeneity and heterogeneity|heterogeneous datasets]]. While distributed learning also aims at training a single model on multiple servers, a common underlying assumption is that the local datasets are [[Independent and identically distributed random variables|independent and identically distributed]] (i.i.d.) and roughly have the same size. None of these hypotheses are made for federated learning; instead, the datasets are typically heterogeneous and their sizes may span several orders of magnitude. Moreover, the clients involved in federated learning may be unreliable as they are subject to more failures or drop out since they commonly rely on less powerful communication media (i.e. [[Wi-Fi]]) and battery-powered systems (i.e. [[smartphone]]s and IoT devices) compared to distributed learning where nodes are typically [[data center|datacenters]] that have powerful computational capabilities and are connected to one another with fast networks.<ref name="Survey-2019">{{cite arXiv |title=Advances and Open Problems in Federated Learning |date=10 December 2019 |eprint=1912.04977 |last1=Kairouz |first1=Peter |last2=Brendan McMahan |first2=H. |last3=Avent |first3=Brendan |last4=Bellet |first4=Aurélien |last5=Bennis |first5=Mehdi |author6=Arjun Nitin Bhagoji |last7=Bonawitz |first7=Keith |last8=Charles |first8=Zachary |last9=Cormode |first9=Graham |last10=Cummings |first10=Rachel |last11=D'Oliveira |first11=Rafael G. L. |author12=Salim El Rouayheb |last13=Evans |first13=David |last14=Gardner |first14=Josh |last15=Garrett |first15=Zachary |last16=Gascón |first16=Adrià |last17=Ghazi |first17=Badih |last18=Gibbons |first18=Phillip B. |last19=Gruteser |first19=Marco |last20=Harchaoui |first20=Zaid |last21=He |first21=Chaoyang |last22=He |first22=Lie |last23=Huo |first23=Zhouyuan |last24=Hutchinson |first24=Ben |last25=Hsu |first25=Justin |last26=Jaggi |first26=Martin |last27=Javidi |first27=Tara |author27-link=Tara Javidi|last28=Joshi |first28=Gauri |last29=Khodak |first29=Mikhail |last30=Konečný |first30=Jakub |class=cs.LG |display-authors=29 }}</ref>

=== Mathematical formulation ===

The [[objective function]] for federated learning is as follows:

<math>f(\mathbf x_1, \dots, \mathbf x_K) = \dfrac{1}{K} \sum_{i=1}^K f_i(\mathbf x_i)</math>

where <math>K</math> is the number of nodes, <math>\mathbf x_i</math> are the weights of model as viewed by node <math>i</math>, and <math>f_i</math> is node <math>i</math>'s local objective function, which describes how model weights <math>\mathbf x_i</math> conforms to node <math>i</math>'s local dataset.

The goal of federated learning is to train a common model on all of the nodes' local datasets, in other words:

* Optimizing the objective function <math>f(\mathbf x_1, \dots, \mathbf x_K)</math>.
* Achieving [[Consensus (computer science)|consensus]] on <math>\mathbf x_i</math>. In other words, <math>\mathbf x_1, \dots, \mathbf x_K</math> converge to some common <math>\mathbf x</math> at the end of the training process.

=== Centralized federated learning ===
In the centralized federated learning setting, a central server is used to orchestrate the different steps of the algorithms and coordinate all the participating nodes during the learning process. The server is responsible for the nodes selection at the beginning of the training process and for the aggregation of the received model updates. Since all the selected nodes have to send updates to a single entity, the server may become a bottleneck of the system.<ref name="Survey-2019" />

=== Decentralized federated learning ===
In the decentralized federated learning setting, the nodes are able to coordinate themselves to obtain the global model. This setup prevents single point failures as the model updates are exchanged only between interconnected nodes without the orchestration of the central server. Nevertheless, the specific [[network topology]] may affect the performances of the learning process.<ref name="Survey-2019" /> See blockchain-based federated learning<ref>{{cite journal|title=Federated Learning with Blockchain for Autonomous Vehicles: Analysis and Design Challenges |journal=IEEE Transactions on Communications |year=2020|doi=10.1109/TCOMM.2020.2990686|last1=Pokhrel |first1=Shiva Raj |last2=Choi |first2=Jinho |volume=68 |issue=8 |pages=4734–4746 |s2cid=219006840 }}</ref> and the references therein.

=== Heterogeneous federated learning ===
An increasing number of application domains involve a large set of heterogeneous clients, e.g., mobile phones and IoT devices.<ref>{{Cite book|last1=Xu|first1=Zirui|last2=Yu|first2=Fuxun|last3=Xiong|first3=Jinjun|last4=Chen|first4=Xiang|title=2021 58th ACM/IEEE Design Automation Conference (DAC) |chapter=Helios: Heterogeneity-Aware Federated Learning with Dynamically Balanced Collaboration |date=December 2021|chapter-url=https://ieeexplore.ieee.org/document/9586241/;jsessionid=6HjI-LT80gn9nOJ9Vu4Qzeg-O-fNSeKUxKXGc2BDlkOkxCXpbVHu!1467215501|pages=997–1002|doi=10.1109/DAC18074.2021.9586241|arxiv=1912.01684|isbn=978-1-6654-3274-0|s2cid=243925551}}</ref> Most of the existing Federated learning strategies assume that local models share the same global model architecture. Recently, a new federated learning framework named HeteroFL was developed to address heterogeneous clients equipped with very different computation and communication capabilities.<ref name=":3">{{cite arXiv|last1=Diao|first1=Enmao|last2=Ding|first2=Jie|last3=Tarokh|first3=Vahid|date=2020-10-02|title=HeteroFL: Computation and Communication Efficient Federated Learning for Heterogeneous Clients|class=cs.LG|eprint=2010.01264}}</ref> The HeteroFL technique can enable the training of heterogeneous local models with dynamically varying computation and non-iid data complexities while still producing a single accurate global inference model.<ref name=":3"/><ref>{{Cite book|last1=Yu|first1=Fuxun|last2=Zhang|first2=Weishan|last3=Qin|first3=Zhuwei|last4=Xu|first4=Zirui|last5=Wang|first5=Di|last6=Liu|first6=Chenchen|last7=Tian|first7=Zhi|last8=Chen|first8=Xiang|title=Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery & Data Mining |chapter=Fed2 |date=2021-08-14|chapter-url=https://doi.org/10.1145/3447548.3467309|series=KDD '21|location=New York, NY, USA|publisher=Association for Computing Machinery|pages=2066–2074|doi=10.1145/3447548.3467309|arxiv=2111.14248|isbn=978-1-4503-8332-5|s2cid=240598436}}</ref>

[[File:Federated learning process central case.png|alt=Federated learning general process in central orchestrator setup|thumb|upright=2|Federated learning general process in central orchestrator setup]]

== Main features ==

=== Iterative learning ===
To ensure good task performance of a final, central machine learning model, federated learning relies on an iterative process broken up into an atomic set of client-server interactions known as a federated learning round. Each round of this process consists in transmitting the current global model state to participating nodes, training local models on these local nodes to produce a set of potential model updates at each node, and then aggregating and processing these local updates into a single global update and applying it to the global model.<ref name="Survey-2019" />

In the methodology below, a central server is used for aggregation, while local nodes perform local training depending on the central server's orders. However, other strategies lead to the same results without central servers, in a [[peer-to-peer]] approach, using [[Gossip protocol|gossip]]<ref>Decentralized Collaborative Learning of Personalized Models over Networks Paul Vanhaesebrouck, Aurélien Bellet, Marc Tommasi, 2017</ref> or [[Consensus (computer science)|consensus]] methodologies.<ref>{{cite journal |last1=Savazzi |first1=Stefano |last2=Nicoli |first2=Monica |last3=Rampa |first3=Vittorio |title=Federated Learning With Cooperating Devices: A Consensus Approach for Massive IoT Networks |journal=IEEE Internet of Things Journal |date=May 2020 |volume=7 |issue=5 |pages=4641–4654 |doi=10.1109/JIOT.2020.2964162|arxiv=1912.13163 |s2cid=209515403 }}</ref>

Assuming a federated round composed by one iteration of the learning process, the learning procedure can be summarized as follows:<ref name=":0">Towards federated learning at scale: system design, Keith Bonawitz Hubert Eichner and al., 2019</ref>
# '''Initialization''': according to the server inputs, a machine learning model (e.g., [[linear regression]], neural network, [[Boosting (machine learning)|boosting]]) is chosen to be trained on local nodes and initialized. Then, nodes are activated and wait for the central server to give the calculation tasks.
# '''Client selection''': a fraction of local nodes are selected to start training on local data. The selected nodes acquire the current statistical model while the others wait for the next federated round.
# '''Configuration''': the central server orders selected nodes to undergo training of the model on their local data in a pre-specified fashion (e.g., for some mini-batch updates of [[gradient descent]]).
# '''Reporting''': each selected node sends its local model to the server for aggregation. The central server aggregates the received models and sends back the model updates to the nodes. It also handles failures for disconnected nodes or lost model updates. The next federated round is started returning to the client selection phase.
# '''Termination''': once a pre-defined termination criterion is met (e.g., a maximum number of iterations is reached or the model accuracy is greater than a threshold) the central server aggregates the updates and finalizes the global model.

The procedure considered before assumes synchronized model updates. Recent federated learning developments introduced novel techniques to tackle asynchronicity during the training process, or training with dynamically varying models.<ref name=":3"/> Compared to synchronous approaches where local models are exchanged once the computations have been performed for all layers of the neural network, asynchronous ones leverage the properties of neural networks to exchange model updates as soon as the computations of a certain layer are available. These techniques are also commonly referred to as split learning<ref name="Gupta-2018">{{cite arXiv |last1=Gupta |first1=Otkrist |last2=Raskar |first2=Ramesh |title=Distributed learning of deep neural network over multiple agents  |date=14 October 2018 |class=cs.LG |eprint=1810.06060 }}</ref><ref name="Vepakomma-2018">{{cite arXiv |last1=Vepakomma |first1=Praneeth |last2=Gupta |first2=Otkrist |last3=Swedish |first3=Tristan |last4=Raskar |first4=Ramesh |title=Split learning for health: Distributed deep learning without sharing raw patient data |date=3 December 2018 |class=cs.LG |eprint=1812.00564 }}</ref> and they can be applied both at training and inference time regardless of centralized or decentralized federated learning settings.<ref name="Survey-2019" /><ref name=":3"/>

=== [[Independent and identically distributed random variables|Non-IID]] data ===
In most cases, the assumption of independent and identically distributed samples across local nodes does not hold for federated learning setups. Under this setting, the performances of the training process may vary significantly according to the unbalanced local data samples as well as the particular probability distribution of the training examples (i.e., [[Feature (machine learning)|features]] and [[Labeled data|labels]]) stored at the local nodes. To further investigate the effects of non-IID data, the following description considers the main categories presented in the preprint by Peter Kairouz et al. from 2019.<ref name="Survey-2019" />

The description of non-IID data relies on the analysis of the [[Joint probability distribution|joint probability]] between features and labels for each node.
This allows to decouple each contribution according to the specific distribution available at the local nodes.
The main categories for non-iid data can be summarized as follows:<ref name ="Survey-2019" />

* '''Covariate shift''': local nodes may store examples that have different statistical distributions compared to other nodes. An example occurs in [[natural language processing]] datasets where people typically write the same digits/letters with different stroke widths or slants.<ref name ="Survey-2019" />
* '''Prior probability shift''': local nodes may store labels that have different statistical distributions compared to other nodes. This can happen if datasets are regional and/or demographically partitioned. For example, datasets containing images of animals vary significantly from country to country.<ref name ="Survey-2019" />
* '''Concept drift''' (''same label, different features''): local nodes may share the same labels but some of them correspond to different features at different local nodes. For example, images that depict a particular object can vary according to the weather condition in which they were captured.<ref name ="Survey-2019" />
* '''Concept shift''' (''same features, different labels''): local nodes may share the same features but some of them correspond to different labels at different local nodes. For example, in natural language processing, the sentiment analysis may yield different sentiments even if the same text is observed.<ref name ="Survey-2019" />
* '''Unbalanced''': the amount of data available at the local nodes may vary significantly in size.<ref name ="Survey-2019" /><ref name=":3"/>

The loss in accuracy due to non-iid data can be bounded through using more sophisticated means of doing data normalization, rather than batch normalization.<ref>{{Cite journal|last1=Hsieh|first1=Kevin|last2=Phanishayee|first2=Amar|last3=Mutlu|first3=Onur|last4=Gibbons|first4=Phillip|date=2020-11-21|title=The Non-IID Data Quagmire of Decentralized Machine Learning|url=http://proceedings.mlr.press/v119/hsieh20a.html|journal=International Conference on Machine Learning|language=en|publisher=PMLR|pages=4387–4398|arxiv=1910.00189}}</ref>

== Algorithmic hyper-parameters ==

=== Network topology ===
The way the statistical local outputs are pooled and the way the nodes communicate with each other can change from the centralized model explained in the previous section. This leads to a variety of federated learning approaches: for instance no central orchestrating server, or stochastic communication.<ref>''Collaborative Deep Learning in Fixed Topology Networks,'' Zhanhong Jiang, Mukesh Yadaw, Chinmay Hegde, Soumik Sarkar, 2017</ref>

In particular, orchestrator-less distributed networks are one important variation. In this case, there is no central server dispatching queries to local nodes and aggregating local models. Each local node sends its outputs to several randomly-selected others, which aggregate their results locally. This restrains the number of transactions, thereby sometimes reducing training time and computing cost.<ref name="Gossip-2018">GossipGraD: Scalable Deep Learning using Gossip Communication based Asynchronous Gradient Descent, Jeff Daily, Abhinav Vishnu, Charles Siegel, Thomas Warfel, Vinay Amatya, 2018</ref>

=== Federated learning parameters ===
Once the topology of the node network is chosen, one can control different parameters of the federated learning process (in addition to the machine learning model's own hyperparameters) to optimize learning:

* Number of federated learning rounds: <math>T</math>
* Total number of nodes used in the process: <math>K</math>
* Fraction of nodes used at each iteration for each node: <math>C</math>
* Local [[Batch normalization|batch size]] used at each learning iteration: <math>B</math>

Other model-dependent parameters can also be tinkered with, such as:

* Number of iterations for local training before pooling: <math>N</math>
* Local learning rate: <math>\eta</math>

Those parameters have to be optimized depending on the constraints of the machine learning application (e.g., available computing power, available memory, [[Bandwidth (computing)|bandwidth]]). For instance, stochastically choosing a limited fraction <math>C</math> of nodes for each iteration diminishes computing cost and may prevent [[overfitting]]{{Citation needed|date=July 2022}}, in the same way that stochastic gradient descent can reduce overfitting.

== Technical limitations ==
Federated learning requires frequent communication between nodes during the learning process. Thus, it requires not only enough local computing power and memory, but also high bandwidth connections to be able to exchange parameters of the machine learning model. However, the technology also avoids data communication, which can require significant resources before starting centralized machine learning. Nevertheless, the devices typically employed in federated learning are communication-constrained, for example IoT devices or smartphones are generally connected to Wi-Fi networks, thus, even if the models are commonly less expensive to be transmitted compared to raw data, federated learning mechanisms may not be suitable in their general form.<ref name="Survey-2019" />

Federated learning raises several statistical challenges:

* Heterogeneity between the different local datasets: each node may have some bias with respect to the general population, and the size of the datasets may vary significantly;<ref name=":3"/>
* Temporal heterogeneity: each local dataset's distribution may vary with time;
* [[Interoperability]] of each node's dataset is a prerequisite;
* Each node's dataset may require regular curations;
* Hiding training data might allow attackers to inject [[Backdoor (computing)|backdoors]] into the global model;<ref>{{cite arXiv|last1=Bagdasaryan|first1=Eugene|last2=Veit|first2=Andreas|last3=Hua|first3=Yiqing|date=2019-08-06|title=How To Backdoor Federated Learning|class=cs.CR|eprint=1807.00459}}</ref>
* Lack of access to global training data makes it harder to identify unwanted biases entering the training e.g. age, gender, sexual orientation;
* Partial or total loss of model updates due to node failures affecting the global model;<ref name = "Survey-2019" />
*Lack of annotations or labels on the client side.<ref>{{Cite book|last1=Vahid|first1=Diao|first2=Enmao|last2=Ding|first3=Jie|last3= Tarokh|url=http://worldcat.org/oclc/1269554828|title=SemiFL: Communication Efficient Semi-Supervised Federated Learning with Unlabeled Clients|date=2021-06-02|oclc=1269554828}}</ref>
*Heterogeneity between the processing platform<ref>{{Cite web|url=https://wayang.apache.org|title=Apache Wayang - Home|website=wayang.apache.org}}</ref>

== Federated learning variations ==
In this section, the notation of the paper published by H. Brendan McMahan and al. in 2017 is followed.<ref name="ReferenceA">Communication-Efficient Learning of Deep Networks from Decentralized Data, H. Brendan McMahan and al. 2017</ref>

To describe the federated strategies, let us introduce some notations:

* <math>K</math> : total number of clients;
* <math>k</math> : index of clients;
* <math>n_k</math>: number of data samples available during training for client <math>k</math>;
* <math>k_t</math>: model's weight vector on client <math>k</math>, at the federated round <math>t</math>;
* <math>\ell(w, b)</math> : loss function for weights <math>w</math> and batch <math>b</math>;
* <math>E</math> : number of local updates;

=== Federated stochastic gradient descent (FedSGD) ===
[[Deep learning]] training mainly relies on variants of [[stochastic gradient descent]], where gradients are computed on a random subset of the total dataset and then used to make one step of the gradient descent.

Federated stochastic gradient descent<ref name="ReferencePPDL">Privacy Preserving Deep Learning, R. Shokri and V. Shmatikov, 2015</ref> is the direct transposition of this algorithm to the federated setting, but by using a random fraction <math>C</math> of the nodes and using all the data on this node. The gradients are averaged by the server proportionally to the number of training samples on each node, and used to make a gradient descent step.

=== Federated averaging ===
Federated averaging (FedAvg) is a generalization of FedSGD, which allows local nodes to perform more than one batch update on local data and exchanges the updated weights rather than the gradients. The rationale behind this generalization is that in FedSGD, if all local nodes start from the same initialization, averaging the gradients is strictly equivalent to averaging the weights themselves. Further, averaging tuned weights coming from the same initialization does not necessarily hurt the resulting averaged model's performance.<ref name="ReferenceA" />

=== Federated Learning with Dynamic Regularization (FedDyn) ===

Federated learning methods suffer when the device datasets are heterogeneously distributed. Fundamental dilemma in heterogeneously distributed device setting is that minimizing the device loss functions is not the same as minimizing the global loss objective. In 2021, Acar et al.<ref name="feddyn">{{cite journal |last1=Acar |first1=Durmus Alp Emre |last2=Zhao |first2=Yue |last3=Navarro |first3=Ramon Matas |last4=Mattina |first4=Matthew |last5=Whatmough |first5=Paul N. |last6=Saligrama |first6=Venkatesh |title=Federated Learning Based on Dynamic Regularization |journal=ICLR |date=2021 |arxiv=2111.04263 }}</ref> introduced FedDyn method as a solution to heterogenous dataset setting. FedDyn dynamically regularizes each devices loss function so that the modified device losses converges to the actual global loss. Since the local losses are aligned, FedDyn is robust to the different heterogeneity levels and it can safely perform full minimization in each device. Theoretically, FedDyn converges to the optimal (a stationary point for nonconvex losses) by being agnostic to the heterogeneity levels. These claims are verified with extensive experimentations on various datasets.<ref name="feddyn" />

Minimizing the number of communications is the gold-standard for comparison in federated learning. We may also want to decrease the local computation levels per device in each round. FedDynOneGD <ref name="feddyn" /> is an extension of FedDyn with less local compute requirements. FedDynOneGD calculates only one gradients per device in each round and update the model with a regularized version of the gradient. Hence, the computation complexity is linear in local dataset size. Moreover, gradient computation can be parallelizable within each device which is different from successive SGD steps. Theoretically, FedDynOneGD achieves the same convergence guarantees as in FedDyn with less local computation.<ref name="feddyn" />

=== Personalized Federated Learning by Pruning (Sub-FedAvg) ===

Federated Learning methods cannot achieve good global performance under Non-IID settings which motivates the participating clients to yield personalized models in federation.  Recently, Vahidian et al.<ref name="Sub-FedAvg">{{cite journal |last1=Vahidian |first1=Saeed|last2=Morafah |first2=Mahdi |last3=Lin |first3=Bill |title=Personalized Federated Learning by Structured and Unstructured Pruning under Data Heterogeneity |journal=Icdcs-W |date=2021 |arxiv=2105.00562 }}</ref> introduced Sub-FedAvg opening a new personalized FL algorithm paradigm by proposing Hybrid Pruning (structured + unstructured pruning) with averaging on the intersection of clients’ drawn subnetworks which simultaneously handles communication efficiency, resource constraints and personalized models accuracies.<ref name="Sub-FedAvg" />

Sub-FedAvg is the first work which shows existence of personalized winning tickets for clients in federated learning through experiments.<ref name="Sub-FedAvg" />  Moreover, it also proposes two algorithms on how to effectively draw the personalized subnetworks.<ref name="Sub-FedAvg" /> Sub-FedAvg tries to extend "Lottery Ticket Hypothesis" which is for centrally trained neural networks to federated learning trained neural networks leading to this open research problem: “Do winning tickets exist for clients’ neural networks being trained in federated learning? If yes, how to effectively draw the personalized subnetworks for each client?”

=== Dynamic Aggregation - Inverse Distance Aggregation ===
IDA (Inverse Distance Aggregation) is a novel adaptive weighting approach for clients based on meta-information which handles unbalanced and non-iid data. It uses the distance of the model parameters as a strategy to minimize the effect of outliers and improve the model's convergence rate.<ref>ref name="IDA">{{cite journal |last1=Yeganeh |first1=Yousef |last2=Farshad |first2=Azade |last3=Navab |first3=Nassir |last4=Albarqouni |first4=Shadi |date=2020 |title=Inverse Distance Aggregation for Federated Learning with Non-IID Data |journal=Icdcs-W |arxiv=2008.07665}}</ref>

=== Hybrid Federated Dual Coordinate Ascent (HyFDCA) ===

Very few methods for hybrid federated learning, where clients only hold subsets of both features and samples, exist. Yet, this scenario is very important in practical settings. Hybrid Federated Dual Coordinate Ascent (HyFDCA)<ref>Overman, T., Blum, G., & Klabjan, D.. (2022). A Primal-Dual Algorithm for Hybrid Federated Learning, https://arxiv.org/pdf/2210.08106.pdf</ref> is a novel algorithm proposed in 2022 that solves convex problems in the hybrid FL setting. This algorithm extends CoCoA, a primal-dual distributed optimization algorithm introduced by Jaggi et al. (2014)<ref>Jaggi, M., Smith, V., Takácˇ, M., Terhorst, J., Krishnan, S., Hofmann, T., and Jordan, M. I. (2014). Communication- efficient distributed dual coordinate ascent. In Pro- ceedings of the 27th International Conference on Neu- ral Information Processing Systems, volume 2, page 3068–3076.</ref> and Smith et al. (2017),<ref>Smith, V., Forte, S., Ma, C., Takácˇ, M., Jordan, M. I., and Jaggi, M. (2017). Cocoa: A general framework for communication-efficient distributed optimization. Journal of Machine Learning Research, 18(1):8590–8638.</ref> to the case where both samples and features are partitioned across clients.

HyFDCA claims several improvement over existing algorithms:

* HyFDCA is a provably convergent primal-dual algorithm for hybrid FL in at least the following settings.
** Hybrid Federated Setting with Complete Client Participation
** Horizontal Federated Setting with Random Subsets of Available Clients
*** The authors show HyFDCA enjoys a convergence rate of {{math|''O''}}({{Fraction|1|t}}) which matches the convergence rate of FedAvg (see below).<ref>McMahan, H. B., Moore, E., Ramage, D., Hampson, S., and y Arcas, B. A. (2017). Communication-efficient learning of deep networks from decentralized data. In AISTATS, volume 54, pages 1273–1282</ref>
** Vertical Federated Setting with Incomplete Client Participation
*** The authors show HyFDCA enjoys a convergence rate of {{math|''O''}}({{Fraction|log(t)|t}}) whereas FedBCD<ref>Liu, Y., Zhang, X., Kang, Y., Li, L., Chen, T., Hong, M., and Yang, Q. (2022). Fedbcd: A communication- efficient collaborative learning framework for distributed features. IEEE Transactions on Signal Processing, pages 1–12.</ref> exhibits a slower {{math|''O''}}({{Fraction|1|sqrt(t)}}) convergence rate and requires full client participation.
* HyFDCA provides the privacy steps that ensure privacy of client data in the primal-dual setting. These principles apply to future efforts in developing primal-dual algorithms for FL.
* HyFDCA empirically outperforms FedAvg in loss function value and validation accuracy across a multitude of problem settings and datasets. The authors also introduce a hyperparameter selection framework for FL with competing metrics using ideas from multiobjective optimization.

There is only one other algorithm that focuses on hybrid FL, HyFEM proposed by Zhang et al. (2020).<ref>Zhang, X., Yin, W., Hong, M., and Chen, T. (2020). Hybrid federated learning: Algorithms and implementation. In NeurIPS-SpicyFL 2020.</ref> This algorithm uses a feature matching formulation that balances clients building accurate local models and the server learning an accurate global model. This requires a matching regularizer constant that must be tuned based on user goals and results in disparate local and global models. Furthermore, the convergence results provided for HyFEM only prove convergence of the matching formulation not of the original global problem. This work is substantially different than HyFDCA's approach which uses data on local clients to build a global model that converges to the same solution as if the model was trained centrally. Furthermore, the local and global models are synchronized and do not require the adjustment of a matching parameter between local and global models. However, HyFEM is suitable for a vast array of architectures including deep learning architectures, whereas HyFDCA is designed for convex problems like logistic regression and support vector machines.

=== Federated [[Vision transformer|ViT]] using Dynamic Aggregation (FED-REV) ===
Federated Learning (FL) provides training of global shared model using decentralized data sources on edge nodes while preserving data privacy. However, its performance in the computer vision applications using Convolution neural network (CNN) considerably behind that of centralized training due to limited communication resources and low processing capability at edge nodes. Alternatively, Pure Vision transformer models (VIT) outperform CNNs by almost four times when it comes to computational efficiency and accuracy. Hence, we propose a new FL model with reconstructive strategy called FED-REV, Illustrates how attention-based structures (pure Vision Transformers) enhance FL accuracy over large and diverse data distributed over edge nodes, in addition to the proposed reconstruction strategy that determines the dimensions influence of each stage of the vision transformer and then reduce its dimension complexity which reduce computation cost of edge devices in addition to preserving accuracy achieved due to using the pure Vision transformer.<ref>{{Cite journal |last=Ismail |first=Hatem |date=August 2022 
|title=A FEDERATED PURE VISION TRANSFORMER ALGORITHM FOR COMPUTER VISION USING DYNAMIC AGGREGATION MODEL |url=https://www.neuroquantology.com/data-cms/articles/20220916115620amNQ55730.pdf |journal=[[NeuroQuantology]] |language=English |publication-date=Aug 2022 }}</ref>

== Current research topics ==
Federated learning has started to emerge as an important research topic in 2015<ref name=":1" /> and 2016,<ref name="Opt-2016">''Federated Optimization: Distributed Machine Learning for On-Device Intelligence,'' Jakub Konečný, H. Brendan McMahan, Daniel Ramage and Peter Richtárik, 2016</ref> with the first publications on federated averaging in telecommunication settings. Another important aspect of active research is the reduction of the communication burden during the federated learning process. In 2017 and 2018, publications have emphasized the development of resource allocation strategies, especially to reduce communication<ref name="ReferenceA" /> requirements<ref name="Comm-2017">{{cite arXiv|last1=Konečný |first1=Jakub |last2=McMahan |first2=H. Brendan |last3=Yu |first3=Felix X. |last4=Richtárik |first4=Peter |last5=Suresh |first5=Ananda Theertha |last6=Bacon |first6=Dave |title=Federated Learning: Strategies for Improving Communication Efficiency |date=30 October 2017 |class=cs.LG |eprint=1610.05492 }}</ref> between nodes with gossip algorithms<ref>''Gossip training for deep learning, Michael Blot and al., 2017''</ref> as well as on the characterization of the robustness to differential privacy attacks.<ref>''Differentially Private Federated Learning: A Client Level Perspective'' Robin C. Geyer and al., 2018</ref> Other research activities focus on the reduction of the bandwidth during training through sparsification and quantization methods,<ref name="Comm-2017"/> where the machine learning models are sparsified and/or compressed before they are shared with other nodes. Developing ultra-light DNN architectures is essential for device-/edge- learning and recent work recognises both the energy efficiency requirements <ref>{{Cite journal|date=2021|title=Green Deep Reinforcement Learning for Radio Resource Management: Architecture, Algorithm Compression, and Challenges|url=https://ieeexplore.ieee.org/document/9205233|journal=IEEE Vehicular Technology Magazine|language=en|volume=16|doi=10.1109/MVT.2020.3015184|s2cid=204401715|last1=Du|first1=Zhiyong|last2=Deng|first2=Yansha|last3=Guo|first3=Weisi|last4=Nallanathan|first4=Arumugam|last5=Wu|first5=Qihui|pages=29–39|hdl=1826/16378|hdl-access=free}}</ref> for future federated learning and the need to compress deep learning, especially during learning.<ref>{{Cite journal|date=2021|title=Random sketch learning for deep neural networks in edge computing|url=https://www.nature.com/articles/s43588-021-00039-6|journal=Nature Computational Science|language=en|volume=1}}</ref>

Recent research advancements are starting to consider real-world propagating [[Communication channel|channels]]<ref>{{cite arXiv |last1=Amiri |first1=Mohammad Mohammadi |last2=Gunduz |first2=Deniz |title=Federated Learning over Wireless Fading Channels |date=10 February 2020 |class=cs.IT |eprint=1907.09769 }}</ref> as in previous implementations ideal channels were assumed. Another active direction of research is to develop Federated learning for training heterogeneous local models with varying computation complexities and producing a single powerful global inference model.<ref name=":3"/>

A learning framework named Assisted learning was recently developed to improve each agent's learning capabilities without transmitting private data, models, and even learning objectives.<ref>{{Cite journal|last1=Xian|first1=Xun|last2=Wang|first2=Xinran|last3=Ding|first3=Jie|last4=Ghanadan|first4=Reza|date=2020|title=Assisted Learning: A Framework for Multi-Organization Learning|url=https://proceedings.neurips.cc//paper/2020/hash/a7b23e6eefbe6cf04b8e62a6f0915550-Abstract.html|journal=Advances in Neural Information Processing Systems|language=en|volume=33|arxiv=2004.00566}}</ref> Compared with Federated learning that often requires a [[Master/slave (technology)|central controller]] to orchestrate the learning and optimization, [http://assisted-learning.org/ Assisted learning] aims to provide protocols for the agents to optimize and learn among themselves without a global model.

== Use cases ==
Federated learning typically applies when individual actors need to train models on larger datasets than their own, but cannot afford to share the data in itself with others (e.g., for legal, strategic or economic reasons). The technology yet requires good connections between local servers and minimum computational power for each node.<ref name="Survey-2019" />

=== Transportation: self-driving cars ===
[[Self-driving car]]s encapsulate many machine learning technologies to function: [[computer vision]] for analyzing obstacles, [[machine learning]] for adapting their pace to the environment (e.g., bumpiness of the road). Due to the potential high number of self-driving cars and the need for them to quickly respond to real world situations, traditional cloud approach may generate safety risks. Federated learning can represent a solution for limiting volume of data transfer and accelerating learning processes.<ref>{{cite journal |title=Federated learning meets blockchain at 6G edge: a drone-assisted networking for disaster response | year= 2020 |doi=10.1145/3414045.3415949 |last1=Pokhrel |first1=Shiva Raj |pages=49–54| s2cid= 222179104 }}</ref><ref name="Elbir-2020">{{cite arXiv |last1=Elbir |first1=Ahmet M. |last2=Coleri |first2=S. |title=Federated Learning for Vehicular Networks |date=2 June 2020 |class=eess.SP |eprint=2006.01412 }}</ref>

=== Industry 4.0: smart manufacturing ===
In [[Industry 4.0]], there is a widespread adoption of machine learning techniques<ref>{{cite journal |last1=Cioffi |first1=Raffaele |last2=Travaglioni |first2=Marta |last3=Piscitelli |first3=Giuseppina |last4=Petrillo |first4=Antonella |last5=De Felice |first5=Fabio |title=Artificial Intelligence and Machine Learning Applications in Smart Production: Progress, Trends, and Directions |journal=Sustainability |date=2019 |volume=12 |issue=2 |pages=492 |doi=10.3390/su12020492 |language=en|doi-access=free }}</ref> to improve the efficiency and effectiveness of industrial process while guaranteeing a high level of safety. Nevertheless, privacy of sensitive data for industries and manufacturing companies is of paramount importance. Federated learning algorithms can be applied to these problems as they do not disclose any sensitive data.<ref name="Opt-2016" /> In addition, FL also implemented for PM2.5 prediction to support Smart city sensing applications.<ref>{{Cite journal|last1=Putra|first1=Karisma Trinanda|last2=Chen|first2=Hsing-Chung|last3=Prayitno|last4=Ogiela|first4=Marek R.|last5=Chou|first5=Chao-Lung|last6=Weng|first6=Chien-Erh|last7=Shae|first7=Zon-Yin|date=January 2021|title=Federated Compressed Learning Edge Computing Framework with Ensuring Data Privacy for PM2.5 Prediction in Smart City Sensing Applications|journal=Sensors|language=en|volume=21|issue=13|pages=4586|doi=10.3390/s21134586|pmc=8271576|pmid=34283140|bibcode=2021Senso..21.4586P|doi-access=free}}</ref>

=== Medicine: digital health ===
Federated learning seeks to address the problem of data governance and privacy by training algorithms collaboratively without exchanging the data itself. Today's standard approach of centralizing data from multiple centers comes at the cost of critical concerns regarding patient privacy and data protection. To solve this problem, the ability to train machine learning models at scale across multiple medical institutions without moving the data is a critical technology. Nature Digital Medicine published the paper "The Future of Digital Health with Federated Learning"<ref>{{cite journal |last1=Rieke |first1=Nicola |last2=Hancox |first2=Jonny |last3=Li |first3=Wenqi |last4=Milletarì |first4=Fausto |last5=Roth |first5=Holger R. |last6=Albarqouni |first6=Shadi |last7=Bakas |first7=Spyridon |last8=Galtier |first8=Mathieu N. |last9=Landman |first9=Bennett A. |last10=Maier-Hein |first10=Klaus |last11=Ourselin |first11=Sébastien |last12=Sheller |first12=Micah |last13=Summers |first13=Ronald M. |last14=Trask |first14=Andrew |last15=Xu |first15=Daguang |last16=Baust |first16=Maximilian |last17=Cardoso |first17=M. Jorge |title=The future of digital health with federated learning |journal=npj Digital Medicine |date=14 September 2020 |volume=3 |issue=1 |page=119 |doi=10.1038/s41746-020-00323-1 |pmid=33015372 |pmc=7490367 |arxiv=2003.08119 |s2cid=212747909 }}</ref> in September 2020, in which the authors explore how federated learning may provide a solution for the future of digital health, and highlight the challenges and considerations that need to be addressed. Recently, a collaboration of 20 different institutions around the world validated the utility of training AI models using federated learning. In a paper published in Nature Medicine "Federated learning for predicting clinical outcomes in patients with COVID-19",<ref>{{cite journal |last1=Dayan |first1=Ittai |last2=Roth |first2=Holger R.| last3=Zhong|first3=Aoxiao|last4=Harouni|first4=Ahmed|display-authors=3|title=Federated learning for predicting clinical outcomes in patients with COVID-19 |journal=Nature Medicine |date=2021 |volume=27 |issue=10 |pages=1735–1743 |doi=10.1038/s41591-021-01506-3 |pmid=34526699 |pmc=9157510 |s2cid=237536154 |url=https://doi.org/10.1038/s41591-021-01506-3}}</ref> they showcased the accuracy and generalizability of a federated AI model for the prediction of oxygen needs in patients with COVID-19 infections. Furthermore, in a published paper "A Systematic Review of Federated Learning in the Healthcare Area: From the Perspective of Data Properties and Applications", the authors trying to provide a set of challenges on FL challenges on medical data-centric perspective.<ref>{{Cite journal|last1=Prayitno|last2=Shyu|first2=Chi-Ren|last3=Putra|first3=Karisma Trinanda|last4=Chen|first4=Hsing-Chung|last5=Tsai|first5=Yuan-Yu|last6=Hossain|first6=K. S. M. Tozammel|last7=Jiang|first7=Wei|last8=Shae|first8=Zon-Yin|date=January 2021|title=A Systematic Review of Federated Learning in the Healthcare Area: From the Perspective of Data Properties and Applications|journal=Applied Sciences|language=en|volume=11|issue=23|pages=11191|doi=10.3390/app112311191|doi-access=free}}</ref>

A coalition from industry and academia has developed MedPerf,<ref name="Karargyris Umeton Sheller Aristizabal 2023 pp. 799–810">{{cite journal | display-authors=3 | last=Karargyris | first=Alexandros | last2=Umeton | first2=Renato | last3=Sheller | first3=Micah J. | last4=Aristizabal | first4=Alejandro | last5=George | first5=Johnu | last6=Wuest | first6=Anna | last7=Pati | first7=Sarthak | last8=Kassem | first8=Hasan | last9=Zenk | first9=Maximilian | last10=Baid | first10=Ujjwal | last11=Narayana Moorthy | first11=Prakash | last12=Chowdhury | first12=Alexander | last13=Guo | first13=Junyi | last14=Nalawade | first14=Sahil | last15=Rosenthal | first15=Jacob | last16=Kanter | first16=David | last17=Xenochristou | first17=Maria | last18=Beutel | first18=Daniel J. | last19=Chung | first19=Verena | last20=Bergquist | first20=Timothy | last21=Eddy | first21=James | last22=Abid | first22=Abubakar | last23=Tunstall | first23=Lewis | last24=Sanseviero | first24=Omar | last25=Dimitriadis | first25=Dimitrios | last26=Qian | first26=Yiming | last27=Xu | first27=Xinxing | last28=Liu | first28=Yong | last29=Goh | first29=Rick Siow Mong | last30=Bala | first30=Srini | last31=Bittorf | first31=Victor | last32=Puchala | first32=Sreekar Reddy | last33=Ricciuti | first33=Biagio | last34=Samineni | first34=Soujanya | last35=Sengupta | first35=Eshna | last36=Chaudhari | first36=Akshay | last37=Coleman | first37=Cody | last38=Desinghu | first38=Bala | last39=Diamos | first39=Gregory | last40=Dutta | first40=Debo | last41=Feddema | first41=Diane | last42=Fursin | first42=Grigori | last43=Huang | first43=Xinyuan | last44=Kashyap | first44=Satyananda | last45=Lane | first45=Nicholas | last46=Mallick | first46=Indranil | last47=Mascagni | first47=Pietro | last48=Mehta | first48=Virendra | last49=Moraes | first49=Cassiano Ferro | last50=Natarajan | first50=Vivek | last51=Nikolov | first51=Nikola | last52=Padoy | first52=Nicolas | last53=Pekhimenko | first53=Gennady | last54=Reddi | first54=Vijay Janapa | last55=Reina | first55=G. Anthony | last56=Ribalta | first56=Pablo | last57=Singh | first57=Abhishek | last58=Thiagarajan | first58=Jayaraman J. | last59=Albrecht | first59=Jacob | last60=Wolf | first60=Thomas | last61=Miller | first61=Geralyn | last62=Fu | first62=Huazhu | last63=Shah | first63=Prashant | last64=Xu | first64=Daguang | last65=Yadav | first65=Poonam | last66=Talby | first66=David | last67=Awad | first67=Mark M. | last68=Howard | first68=Jeremy P. | last69=Rosenthal | first69=Michael | last70=Marchionni | first70=Luigi | last71=Loda | first71=Massimo | last72=Johnson | first72=Jason M. | last73=Bakas | first73=Spyridon | last74=Mattson | first74=Peter | title=Federated benchmarking of medical artificial intelligence with MedPerf | journal=Nature Machine Intelligence | publisher=Springer Science and Business Media LLC | volume=5 | issue=7 | date=17 July 2023 | issn=2522-5839 | doi=10.1038/s42256-023-00652-2 | pages=799–810| doi-access=free }}</ref> an open source platform that enables validation of medical AI models in real world data. The platform relies technically on federated evaluation of AI models aiming to alleviate concerns of patient privacy and conceptually on diverse benchmark committees to build the specifications of neutral clinically impactful benchmarks.<ref name="MLCommons 2023 n420">{{cite web | title=Announcing MedPerf Open Benchmarking Platform for Medical AI | website=MLCommons | date=2023-07-17 | url=https://mlcommons.org/en/news/medperf-nature-mi/ | access-date=2023-09-13}}</ref>

=== Robotics ===
Robotics includes a wide range of applications of machine learning methods: from perception and decision-making to control. As robotic technologies have been increasingly deployed from simple and repetitive tasks (e.g. repetitive manipulation) to complex and unpredictable tasks (e.g. autonomous navigation), the need for machine learning grows. Federated Learning provides a solution to improve over conventional machine learning training methods. In the paper,<ref>{{cite book |last1=Liu |first1=Boyi |last2=Wang |first2=Lujia |last3=Liu |first3=Ming |title=2019 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) |chapter=Lifelong Federated Reinforcement Learning: A Learning Architecture for Navigation in Cloud Robotic Systems |year=2019 |pages=1688–1695 |doi=10.1109/IROS40897.2019.8967908  |arxiv=1901.06455|isbn=978-1-7281-4004-9 |s2cid=210972473 }}</ref> mobile robots learned navigation over diverse environments using the FL-based method, helping generalization. In the paper,<ref>{{cite journal |last1=Na |first1=Seongin |last2=Rouček |first2=Tomáš |last3=Ulrich |first3=Jiří |last4=Pikman |first4=Jan |last5=Krajník |first5=Tomáš |last6=Lennox |first6=Barry |last7=Arvin |first7=Farshad |title=Federated Reinforcement Learning for Collective Navigation of Robotic Swarms |journal=IEEE Transactions on Cognitive and Developmental Systems |year=2023 |page=1 |doi=10.1109/TCDS.2023.3239815|arxiv=2202.01141|s2cid=246473085 }}</ref> Federated Learning is applied to improve multi-robot navigation under limited communication bandwidth scenarios, which is a current challenge in real-world learning-based robotic tasks. In the paper,<ref>{{cite journal |last1=Yu |first1=Xianjia |last2=Queralta |first2=Jorge Pena |last3= Westerlund |first3= Tomi |title=Towards Lifelong Federated Learning in Autonomous Mobile Robots with Continuous Sim-to-Real Transfer |journal=  Procedia Computer Science
 |year=2022 |volume=210 |pages=86–93 |doi=10.1016/j.procs.2022.10.123|arxiv=2205.15496}}</ref> Federated Learning is used to learn Vision-based navigation, helping better sim-to-real transfer.

== References ==
{{reflist}}

== External links ==
*[https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:32016R0679 "Regulation (EU) 2016/679 of the European Parliament and of the Council of 27 April 2016"] at eur-lex.europa.eu. Retrieved October 18, 2019.
*[https://ico.org.uk/about-the-ico/news-and-events/ai-blog-data-minimisation-and-privacy-preserving-techniques-in-ai-systems/ "Data minimisation and privacy-preserving techniques in AI systems"] {{Webarchive|url=https://web.archive.org/web/20200723083327/https://ico.org.uk/about-the-ico/news-and-events/ai-blog-data-minimisation-and-privacy-preserving-techniques-in-ai-systems/ |date=2020-07-23 }} at UK Information Commissioners Office. Retrieved July 22, 2020
*[https://eya.global/case-studies/realising-the-potential-of-data-whilst-reserving-privacy-with-eya-and "Realising the Potential of Data Whilst Preserving Privacy with EyA and Conclave from R3"] at eya.global. Retrieved March 31, 2022.

[[Category:Machine learning]]
[[Category:Distributed artificial intelligence]]