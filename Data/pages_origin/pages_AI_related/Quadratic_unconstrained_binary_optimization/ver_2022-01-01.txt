<!-- {{refimprove|date=September 2014}} -->
'''Quadratic unconstrained binary optimization''' ('''QUBO'''), also known as '''unconstrained binary quadratic programming''' ('''UBQP'''), is a combinatorial [[optimization problem]] with a wide range of applications from [[finance]] and [[economics]] to [[machine learning]].<ref>{{cite journal |last1=Kochenberger |first1=Gary |last2=Hao |first2=Jin-Kao |title=The unconstrained binary quadratic programming problem: a survey. |journal=Journal of Combinatorial Optimization |date=2014 |volume=28 |pages=58–81 |doi=10.1007/s10878-014-9734-0 |s2cid=16808394 |url=http://leeds-faculty.colorado.edu/glover/454%20-%20xQx%20survey%20article%20as%20published%202014.pdf}}</ref> QUBO is an [[NP hard]] problem, and for many classical problems from [[theoretical computer science]], like [[Maximum cut]], [[Graph coloring]] and the [[Partition problem]], embeddings into QUBO have been formulated.<ref name="tut">{{cite arXiv |last1=Glover |first1=Fred |last2=Kochenberger|first2=Gary |eprint=1811.11538 |title=A Tutorial on Formulating and Using QUBO Models |class= cs.DS|date=2019 }}</ref><ref>{{cite journal |last1=Lucas |first1=Andrew |title=Ising formulations of many NP problems |journal=Frontiers in Physics |date=2014 |volume=2 |page=5 |doi=10.3389/fphy.2014.00005 |arxiv=1302.5843 |bibcode=2014FrP.....2....5L |doi-access=free }}</ref>
Embeddings for machine learning models include [[support-vector machine|support-vector machines]], [[cluster analysis|clustering]] and [[probabilistic graphical model|probabilistic graphical models]].<ref>{{cite journal |last1=Mücke |first1=Sascha |last2=Piatkowski |first2=Nico |last3=Morik |first3=Katharina |title=Learning Bit by Bit: Extracting the Essence of Machine Learning |journal=LWDA |date=2019 |s2cid=202760166 |url=https://pdfs.semanticscholar.org/f484/b4a789e1563b91a416a7cfabbf72f0aa3b2a.pdf |archive-url=https://web.archive.org/web/20200227143739/https://pdfs.semanticscholar.org/f484/b4a789e1563b91a416a7cfabbf72f0aa3b2a.pdf |url-status=dead |archive-date=2020-02-27 }}</ref>
Moreover, due to its close connection to [[Ising model|Ising models]], QUBO constitutes a central problem class for [[adiabatic quantum computing|Adiabatic quantum computation]], where it is solved through a physical process called [[quantum annealing]].<ref>{{cite web|url=http://www.technologyreview.com/view/514686/d-waves-quantum-computer-goes-to-the-races-wins/
| title      = D-Wave's Quantum Computer Goes to the Races, Wins
| author     = Tom Simonite
| publisher  = MIT Technology Review
| date       = 8 May 2013
| access-date = 12 May 2013
}}</ref>

==Definition==

Let <math>f: \mathbb{B}^n\rightarrow\mathbb{R}</math> be a [[quadratic polynomial]] over binary variables,
: <math>f_Q(x) = \sum_{i=1}^n \sum_{j=1}^i q_{ij} x_i x_j</math>
with <math>x_i\in\mathbb{B}</math> for <math>i\in[n]</math> and coefficients <math>q_{ij}\in\mathbb{R}</math> for <math>1\leq j\leq i\leq n</math>. Here <math>[n]</math> denotes the set of strictly positive integers less or equal to <math>n</math>, and <math>\mathbb{B}=\lbrace 0,1\rbrace</math>.
The QUBO problem consists of finding a binary vector <math>x^*</math> that is minimal with respect to <math>f</math> among all other binary vectors, namely
: <math>x^*=\underset{x\in\mathbb{B}^n}{\arg\min} ~f(x)</math>

Sometimes, QUBO is defined as a maximization instead of a minimization problem, which has no effect on the problem's complexity class, as maximizing <math>f_Q</math> is the same as minimizing <math>f_{-Q}=-f_Q</math> (see below).
Another, more compact way to formulate <math>f</math> is using matrix notation,
: <math>f_Q(x)=x^\top Qx</math>
where <math>Q\in\mathbb{R}^{n\times n}</math> is the symmetric <math>n\times n</math> matrix containing the coefficients <math>q_{ij}</math>.

==Properties==

* Multiplying the coefficients <math>q_{ij}</math> with a positive factor <math>\alpha>0</math> scales the output of <math>f</math> accordingly, leaving the optimum <math>x^*</math> unchanged:
: <math>f_{\alpha Q}(x) = \sum_{i\leq j}(\alpha q_{ij})x_ix_j = \alpha\sum_{i\leq j}q_{ij}x_ix_j = \alpha f_Q(x)</math>
* Flipping the sign of all coefficients flips the sign of <math>f</math>'s output, making <math>x^*</math> the binary vector that ''maximizes'' <math>f_{-Q}</math>:
: <math>f_{-Q}(x) = \sum_{i\leq j}(-q_{ij})x_ix_j = -\sum_{i\leq j}q_{ij}x_ix_j = -f_Q(x)</math>
* If all coefficients are positive, the optimum is trivially <math>x^*=(0,\dots,0)</math>. Similarly, if all coefficients are negative, the optimum is <math>x^*=(1,\dots,1)</math>.
* If <math>\forall i\neq j: ~q_{ij}=0</math>, then the corresponding QUBO problem is solvable in <math>\mathcal{O}(n)</math>, the optimal variable assignments <math>x^*_i</math> simply being 1 if <math>q_{ii}<0</math> and 0 otherwise.

==Connection to Ising models==

QUBO is very closely related and computationally equivalent to the [[Ising model]], whose [[Hamiltonian function]] is defined as
: <math>H(\sigma) = -\sum_{\langle i~j\rangle} J_{ij} \sigma_i \sigma_j - \mu \sum_j h_j \sigma_j</math>
with real-valued parameters <math>h_j, J_{ij}, \mu</math> for all <math>i,j</math>. The ''spin variables'' <math>\sigma_j</math> are binary with values from <math>\lbrace -1,+1\rbrace</math> instead of <math>\mathbb{B}</math>. Moreover, in the Ising model the variables are typically arranged in a lattice where only neighboring pairs of variables <math>\langle i~j\rangle</math> can have non-zero coefficients. Applying the identity <math>\sigma\mapsto 2x-1</math> yields an equivalent QUBO problem:<ref name="tut"/>
: <math>\begin{align}f(x) &= \sum_{\langle i~j\rangle} -J_{ij}(2x_i-1)(2x_j-1) +\sum_{j}\mu h_j(2x_j-1) \\
&= \sum_{\langle i~j\rangle} -4J_{ij}x_ix_j +2J_{ij}x_i +2J_{ij}x_j -J_{ij} +\sum_{j}2\mu h_jx_j-\mu h_j &&\text{using } x_j=x_jx_j\\
&= \sum_{i=1}^n\sum_{j=1}^i q_{ij}x_ix_j + C\end{align}</math>
where
: <math>\begin{align}q_{ij} &= \begin{cases}-4J_{ij} &\text{if } i\neq j \\
\sum_{\langle k~i\rangle}2J_{ki}+\sum_{\langle i~\ell\rangle}2J_{i\ell}+2\mu h_i &\text{if } i=j\end{cases} \\
C &= -\sum_{\langle i~j\rangle}J_{ij} -\sum_{j}\mu h_j\end{align}</math>
As the constant <math>C</math> does not change the position of the optimum <math>x^*</math>, it can be neglected during optimization and is only important for recovering the original Hamiltonian function value.

==References==

{{Reflist}}

==External links==
* {{cite journal
| url        = http://portal.acm.org/citation.cfm?id=1231283
| title      = Local search heuristics for Quadratic Unconstrained Binary Optimization (QUBO)
| journal    = Journal of Heuristics
| doi        = 10.1007/s10732-007-9009-3
| author     = Endre Boros, Peter L Hammer & Gabriel Tavares
| volume     =  13| issue = 2
| date       = April 2007
| pages      = 99–132
| publisher  = Association for Computing Machinery
| s2cid = 32887708
| access-date = 12 May 2013
}}
* {{cite journal
| title      = Analyzing quadratic unconstrained binary optimization problems via multicommodity flows
| journal    = Discrete Applied Mathematics
| author     = Di Wang & Robert Kleinberg
| volume     =  157| issue = 18
| date       = November 2009
| doi        = 10.1016/j.dam.2009.07.009
| pmid = 20161596
| pmc = 2808708
| pages      = 3746–3753
| publisher  = Elsevier
}}

[[Category:Machine learning algorithms]]


{{compu-AI-stub}}