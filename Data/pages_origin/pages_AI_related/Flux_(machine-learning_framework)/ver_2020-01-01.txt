{{AFC submission|d|npov|u=Bruno H Vieira|ns=118|decliner=StudiesWorld|declinets=20190703211609|reason2=nn|ts=20190625000749}} <!-- Do not remove this line! -->
{{AFC submission|d|adv|u=Bruno H Vieira|ns=118|decliner=Dreamy Jazz|declinets=20190602141534|reason2=nn|small=yes|ts=20190602023218}} <!-- Do not remove this line! -->

{{AFC comment|1=While indications suggest that it may gain notability, it is not yet notable as far as I can tell. Additionally, I see no indication that the tone concerns were addressed. [[User:StudiesWorld|StudiesWorld]] ([[User talk:StudiesWorld|talk]]) 21:16, 3 July 2019 (UTC)}}

{{AFC comment|1=All (except one) source is connected to the creators of this software. You need to find independent and reliable sources to show this machine learning software is notable. [[User:Dreamy Jazz|Dreamy <i style="color:#d01e1e">'''Jazz'''</i>]] ðŸŽ· <sup>''[[User talk:Dreamy Jazz|talk to me]]'' &#124; ''[[Special:Contributions/Dreamy Jazz|my contributions]]''</sup> 14:19, 2 June 2019 (UTC)}}

----

<!-- I've included many other sources giving credibility to the article. Flux is quite a new project, in the coming months there will be more material to add on Neural Ordinary Differential Equations and Differentiable Programming. -->

{{Infobox software
| name = Flux
| logo = FluxLogo.png
| author = Michael J Innes.<ref name="JOSS">{{Cite journal|title=Flux: Elegant machine learning with Julia|journal = Journal of Open Source Software|volume = 3|issue = 25|pages = 602|last=Innes|first=Michael|date=2018-05-03|language=en|doi=10.21105/joss.00602}}</ref>
| latest release version = v0.10.0
| repo = {{URL|https://github.com/FluxML/Flux.jl}}
| programming language = [[Julia (programming language)|Julia]]
| genre = [[Machine learning]] [[Library (computing)|library]]
| website = https://fluxml.ai
}}

'''Flux''' is an [[Open source|open-source]] machine-learning library and ecosystem written completely in [[Julia (programming language)|Julia]].<ref name="JOSS" /><ref>{{Cite web|url=https://julialang.org/blog/2018/12/ml-language-compiler|title=Building a Language and Compiler for Machine Learning|first1=Mike|last1=Innes|first2=James|last2=Bradbury|first3=Keno|last3=Fischer|first4=Dhairya|last4=Gandhi|first5=Neethu|last5=Mariya Joy|first6=Tejan|last6=Karmali|first7=Matt|last7=Kelley|first8=Avik|last8=Pal|first9=Marco|last9=Concetto Rudilosso|first10=Elliot|last10=Saba|first11=Viral|last11=Shah|first12=Deniz|last12=Yuret|website=julialang.org|access-date=2019-06-02}}</ref> Its current stable release is v0.10.0.<ref>{{Citation|last=|first=|title=FluxML/Flux.jl v0.10.0|date=2019-11-29|url=https://github.com/FluxML/Flux.jl/releases/tag/v0.10.0|volume=|pages=|publisher=Flux|access-date=2019-12-05}}</ref> Flux takes full advantage of Julia's just-ahead-of-time compilation and exposes an intuitive and flexible interface to users, while still providing a layer-stacking-based interface for simpler models, and can be readily integrated with other Julia packages.<ref>{{Cite web|url=https://juliacomputing.com/domains/ml-and-ai.html|title=Machine Learning and Artificial Intelligence|last=|first=|date=|website=juliacomputing.com|archive-url=|archive-date=|dead-url=|access-date=2019-06-02}}</ref> Flux can take full advantage of all Julia language features, and can work with almost all Julia packages. For example, GPU support is supplied transparently by CuArrays.jl, due to Julia's multiple dispatch.<ref>{{Cite web|url=https://juliacomputing.com/blog/2018/11/15/julia-ml-three-papers.html|title=Julia at NeurIPS and the Future of Machine Learning Tools|last=Gandhi|first=Dhairya|date=2018-11-15|website=juliacomputing.com|archive-url=|archive-date=|dead-url=|access-date=2019-06-02}}</ref> This is in contrast to some other machine learning frameworks which are implemented in other languages with Julia bindings,Â such as [[TensorFlow|TensorFlow.jl]], and thus are more limited by the functionality present in the underlying implementation, which is often in C or C++.<ref>{{Cite journal|title=TensorFlow.jl: An Idiomatic Julia Front End for TensorFlow|journal = Journal of Open Source Software|volume = 3|issue = 31|pages = 1002|date=2018-11-01|language=en|doi=10.21105/joss.01002|last1 = Malmaud|first1 = Jonathan|last2 = White|first2 = Lyndon}}</ref>

This advantage has been used, for example, to implement support for Neural Differential Equations, by fusing Flux and DifferentialEquations.jl into DiffEqFlux.jl<ref>{{cite arxiv|last=Rackauckas|first=Chris|last2=Innes|first2=Mike|last3=Ma|first3=Yingbo|last4=Bettencourt|first4=Jesse|last5=White|first5=Lyndon|last6=Dixit|first6=Vaibhav|date=2019-02-06|title=DiffEqFlux.jl - A Julia Library for Neural Differential Equations|eprint=1902.02376|language=en|volume=|pages=|via=|class=cs.LG}}</ref><ref>{{Cite web|url=https://jaxenter.com/julia-machine-learning-library-154880.html|title=Machine learning meets math: Solve differential equations with new Julia library|date=2019-01-25|website=JAXenter|language=en-US|access-date=2019-10-21|last=Schlothauer|first=Sarah}}</ref>.

Flux supports recurrent and convolutional networks. It is also capable of [[Differentiable programming]]<ref>{{Cite web|url=https://fluxml.ai/2019/03/05/dp-vs-rl.html|title=Flux â€“ Reinforcement Learning vs. Differentiable Programming|website=fluxml.ai|access-date=2019-06-02}}</ref><ref>{{Cite web|url=https://fluxml.ai/2019/02/07/what-is-differentiable-programming.html|title=Flux â€“ What Is Differentiable Programming?|website=fluxml.ai|access-date=2019-06-02}}</ref><ref>{{Cite web|url=https://www.techrepublic.com/article/julia-vs-python-which-programming-language-will-rule-machine-learning-in-2019/|title=Julia vs Python: Which programming language will rule machine learning in 2019?|last=Heath|first=Nick|date=December 6, 2018|website=TechRepublic|language=en|archive-url=|archive-date=|dead-url=|access-date=2019-06-03}}</ref> through its source-to-source [[Automatic differentiation]] package, Zygote<ref>{{cite arxiv|last=Innes|first=Michael|date=2018-10-18|title=Don't Unroll Adjoint: Differentiating SSA-Form Programs|eprint=1810.07951|language=en|class=cs.PL}}</ref>.

Julia is among the most popular machine-learning languages in Github<ref name=":0">{{Cite web|url=https://www.techrepublic.com/article/github-the-top-10-programming-languages-for-machine-learning/|title=GitHub: The top 10 programming languages for machine learning|last=Heath|first=Nick|date=January 25, 2019|website=TechRepublic|language=en|archive-url=|archive-date=|dead-url=|access-date=2019-06-03}}</ref> and Flux is appointed as its most highly regarded machine-learning repository.<ref name=":0" /> A demonstration<ref>{{cite arxiv|last=Saba|first=Elliot|last2=Fischer|first2=Keno|date=2018-10-23|title=Automatic Full Compilation of Julia Programs and ML Models to Cloud TPUs|eprint=1810.09868|language=en|class=cs.PL}}</ref> compiling Julia code to run in Google's [[Tensor processing unit]] received praise from [[Google Brain]] AI lead [[Jeff Dean (computer scientist)|Jeff Dean]].<ref>{{cite tweet |user=JeffDean |number=1054951415339192321 |date=2018-10-23 |title=Julia + TPUs = fast and easily expressible ML computations |first=Jeff |last=Dean|language=en|access-date=2019-06-02}}</ref>

Flux was employed to the first application of machine-learning to data encrypted with [[Homomorphic encryption]]<ref>{{Cite web|url=https://hub.packtpub.com/julia-computing-research-team-runs-machine-learning-model-on-encrypted-data-without-decrypting-it/|title=Julia Computing research team runs machine learning model on encrypted data without decrypting it|last=Patrawala|first=Fatema|date=2019-11-28|website=Packt Hub|language=en-US|access-date=2019-12-11}}</ref><ref>{{Cite web|url=https://juliacomputing.com/blog/2019/11/22/encrypted-machine-learning.html|title=Machine Learning on Encrypted Data Without Decrypting It|date=2019-11-22|website=juliacomputing.com|access-date=2019-12-11}}</ref> without ever decrypting it. This kind of application is envisioned to be central for privacy to future [[API]] using machine-learning models<ref>{{Cite web|url=https://analyticsindiamag.com/julia-computing-uses-homomorphic-encryption-for-ml-is-it-the-way-forward/|title=Julia Computing Uses Homomorphic Encryption For ML. Is It The Way Forward?|last=Yadav|first=Rohit|date=2019-12-02|website=Analytics India Magazine|language=en-US|access-date=2019-12-11}}</ref>.

== See also ==

* [[Differentiable programming]]
* [[Comparison of deep-learning software]]

== References ==
<!-- Inline citations added to your article will automatically display here. See en.wikipedia.org/wiki/WP:REFB for instructions on how to add citations. -->
{{reflist}}
[[:Category:Deep learning]]
[[:Category:Free science software]]
[[:Category:Machine learning]]
[[:Category:Software stubs]]
[[:Category:Data mining and machine learning software]]
[[:Category:Free software programmed in Julia]]
[[:Category:Software using the MIT license]]

{{AFC submission|||ts=20191211173423|u=Bruno H Vieira|ns=118}}

