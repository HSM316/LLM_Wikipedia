'''Bayesian optimization''' is a [[sequential analysis|sequential design]] strategy for [[global optimization]] of [[Black box|black-box]] functions<ref>Jonas Mockus (2012). [https://books.google.com/books?id=VuKoCAAAQBAJ&printsec=frontcover#v=onepage&q=%22global%20optimization%22&f=false Bayesian approach to global optimization: theory and applications]. Kluwer Academic.</ref> that [[Derivative-free optimization|doesn't require derivatives]].

==History==
The term is generally attributed to Jonas Mockus and is coined in his work from a series of publications on global optimization in the 1970s and 1980s.<ref>Jonas Mockus: [https://link.springer.com/content/pdf/10.1007/3-540-07165-2_55.pdf On Bayesian Methods for Seeking the Extremum]. Optimization Techniques 1974: 400-404</ref><ref>Jonas Mockus: On Bayesian Methods for Seeking the Extremum and their Application. IFIP Congress 1977: 195-200</ref><ref>J. Mockus, Bayesian Approach to Global Optimization. Kluwer Academic Publishers, Dordrecht, 1989</ref>

==Strategy==
[[File:GpParBayesAnimationSmall.gif|thumb|564x564px|Bayesian optimization of a function (black) with Gaussian processes (purple). Three acquisition functions (blue) are shown at the bottom.<ref>{{Citation|last=Wilson|first=Samuel|title=ParBayesianOptimization R package|date=2019-11-22|url=https://github.com/AnotherSamWilson/ParBayesianOptimization|volume=|pages=|access-date=2019-12-12}}</ref>]]
Since the objective function is unknown, the Bayesian strategy is to treat it as a random function and place a [[Prior distribution|prior]] over it. The prior captures beliefs about the behavior of the function. After gathering the function evaluations, which are treated as data, the prior is updated to form the [[posterior distribution]] over the objective function. The posterior distribution, in turn, is used to construct an acquisition function (often also referred to as infill sampling criteria) that determines the next query point.

There are several methods used to define the prior/posterior distribution over the objective function. The most common two methods use [[Gaussian process|Gaussian Processes]] in a method called [[Kriging]]. Another less expensive method uses the Parzen-Tree Estimator to construct two distributions for 'high' and 'low' points, and then finds the location that maximizes the expected improvement<ref>{{Citation|last=Bergstra|first=James S.|title=Algorithms for Hyper-Parameter Optimization|date=2011|url=http://papers.nips.cc/paper/4443-algorithms-for-hyper-parameter-optimization.pdf|work=Advances in Neural Information Processing Systems 24|pages=2546–2554|editor-last=Shawe-Taylor|editor-first=J.|publisher=Curran Associates, Inc.|access-date=2019-12-12|last2=Bardenet|first2=Rémi|last3=Bengio|first3=Yoshua|last4=Kégl|first4=Balázs|editor2-last=Zemel|editor2-first=R. S.|editor3-last=Bartlett|editor3-first=P. L.|editor4-last=Pereira|editor4-first=F.}}</ref>.

==Examples==
Examples of acquisition functions include probability of improvement, expected improvement, Bayesian expected losses, upper confidence bounds (UCB), [[Thompson sampling]] and hybrids of these.<ref>Matthew W. Hoffman, Eric Brochu, [[Nando de Freitas]]: Portfolio Allocation for Bayesian Optimization. Uncertainty in Artificial Intelligence (UAI): 327–336 (2011)</ref> They all trade-off exploration and exploitation so as to minimize the number of function queries. As such, Bayesian optimization is well suited for functions that are expensive to evaluate.

==Solution methods==
The maximum of the acquisition function is typically found by resorting to discretization or by means of an auxiliary optimizer. Acquisition functions are typically well-behaved and are often maximized with implementations of [[Newton's method in optimization|Newton's Method]] such as [[Broyden–Fletcher–Goldfarb–Shanno algorithm]] or the [[Nelder–Mead method|Nelder-Mead method]].

==Applications==
The approach has been applied to solve a wide range of problems,<ref>Eric Brochu, Vlad M. Cora, Nando de Freitas: [https://arxiv.org/pdf/1012.2599.pdf?bcsi_scan_dd0fad490e5fad80=fwQqmV5CfHDAMm8dFLewPK+h1WGiAAAAkj1aUQ%3D%3D&bcsi_scan_filename=1012.2599.pdf A Tutorial on Bayesian Optimization of Expensive Cost Functions, with Application to Active User Modeling and Hierarchical Reinforcement Learning]. CoRR abs/1012.2599 (2010)</ref> including learning to rank,<ref>Eric Brochu, Nando de Freitas, Abhijeet Ghosh: [http://papers.nips.cc/paper/3219-active-preference-learning-with-discrete-choice-data.pdf Active Preference Learning with Discrete Choice Data]. NIPS 2007</ref> interactive animation,<ref>Eric Brochu, Tyson Brochu, Nando de Freitas: [http://haikufactory.com/files/sca2010.pdf A Bayesian Interactive Optimization Approach to Procedural Animation Design]. Symposium on Computer Animation 2010: 103–112</ref> [[robotics]],<ref>Daniel J. Lizotte, Tao Wang, Michael H. Bowling, Dale Schuurmans: [https://www.aaai.org/Papers/IJCAI/2007/IJCAI07-152.pdf Automatic Gait Optimization with Gaussian Process Regression]. IJCAI 2007: 944–949</ref><ref>Ruben Martinez-Cantin, Nando de Freitas, Eric Brochu, Jose Castellanos and Arnaud Doucet. [https://link.springer.com/article/10.1007%2Fs10514-009-9130-2# A Bayesian exploration-exploitation approach for optimal online sensing and planning with a visually guided mobile robot]. Autonomous Robots. Volume 27, Issue 2, pp 93–103 (2009)</ref><ref>Scott Kuindersma, Roderic Grupen, and Andrew Barto. [http://ijr.sagepub.com/content/32/7/806.abstract# Variable Risk Control via Stochastic Optimization]. International Journal of Robotics Research, volume 32, number 7, pp 806–825 (2013)</ref><ref>Roberto Calandra, André Seyfarth, Jan Peters, and Marc P. Deisenroth [https://link.springer.com/article/10.1007%2Fs10472-015-9463-9 Bayesian optimization for learning gaits under uncertainty]. Ann. Math. Artif. Intell. Volume 76, Issue 1, pp 5-23 (2016) DOI:10.1007/s10472-015-9463-9</ref> [[sensor networks]],<ref>Niranjan Srinivas, Andreas Krause, Sham M. Kakade, Matthias W. Seeger: [https://infoscience.epfl.ch/record/177246/files/srinivas_ieeeit2012.pdf Information-Theoretic Regret Bounds for Gaussian Process Optimization in the Bandit Setting]. IEEE Transactions on Information Theory 58(5):3250–3265 (2012)</ref><ref>Roman Garnett, Michael A. Osborne, Stephen J. Roberts: [http://www.academia.edu/download/30681076/ipsn673-garnett.pdf Bayesian optimization for sensor set selection]. IPSN 2010: 209–219</ref> automatic algorithm configuration,<ref>Frank Hutter, Holger Hoos, and Kevin Leyton-Brown (2011). [http://www.cs.ubc.ca/labs/beta/Projects/SMAC/papers/11-LION5-SMAC.pdf Sequential model-based optimization for general algorithm configuration], Learning and Intelligent Optimization</ref><ref>{{Cite journal|last=Snoek|first=Jasper|last2=Larochelle|first2=Hugo|last3=Adams|first3=Ryan P.|date=2012-06-13|title=Practical Bayesian Optimization of Machine Learning Algorithms|url=http://arxiv.org/abs/1206.2944|journal=arXiv:1206.2944 [cs, stat]}}</ref> automatic [[machine learning]] toolboxes,<ref>J. Bergstra, D. Yamins, D. D. Cox (2013).
[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.704.3494&rep=rep1&type=pdf Hyperopt: A Python Library for Optimizing the Hyperparameters of Machine Learning Algorithms].
Proc. SciPy 2013.</ref><ref>Chris Thornton, Frank Hutter, Holger H. Hoos, Kevin Leyton-Brown: [https://arxiv.org/pdf/1208.3719 Auto-WEKA: combined selection and hyperparameter optimization of classification algorithms]. KDD 2013: 847–855</ref><ref>Jasper Snoek, Hugo Larochelle and Ryan Prescott Adams. [https://papers.nips.cc/paper/4522-practical-bayesian-optimization-of-machine-learning-algorithms.pdf Practical Bayesian Optimization of Machine Learning Algorithms]. Neural Information Processing Systems, 2012</ref> [[reinforcement learning]], planning, visual attention, architecture configuration in [[deep learning]], static program analysis and experimental [[particle physics]].<ref>Philip Ilten, Mike Williams, Yunjie Yang. [https://arxiv.org/pdf/1610.08328 Event generator tuning using Bayesian optimization]. 2017 JINST 12 P04028. DOI: 10.1088/1748-0221/12/04/P04028</ref>

==See also==
* [[Multi-armed bandit]]
* [[Thompson sampling]]
* [[Global optimization]]
* [[Bayesian experimental design]]

==References==
{{reflist}}

==External links==
* [https://botorch.org/ BoTorch], A modular and modern PyTorch-based open-source library for Bayesian optimization research with support for [http://gpytorch.ai GPyTorch].
*[https://github.com/AnotherSamWilson/ParBayesianOptimization ParBayesianOptimization], A high performance, parallel implementation of Bayesian optimization with Gaussian processes in R.
* [https://sheffieldml.github.io/GPyOpt/ GPyOpt], Python open-source library for Bayesian Optimization based on [https://github.com/SheffieldML/GPy GPy].
* [https://rmcantin.bitbucket.io/html/ Bayesopt], an efficient implementation in C/C++ with support for Python, Matlab and Octave.
* [https://github.com/HIPS/Spearmint Spearmint], a Python implementation focused on parallel and cluster computing.
* [https://github.com/hyperopt/hyperopt Hyperopt], a Python implementation for hyperparameter optimization.
* [http://www.cs.ubc.ca/labs/beta/Projects/SMAC/ SMAC], a Java implementation of random-forest-based Bayesian optimization for general algorithm configuration.
* [https://github.com/mwhoffman/pybo pybo], a Python implementation of modular Bayesian optimization.
* [https://bitbucket.org/mlcircus/bayesopt.m Bayesopt.m], a Matlab implementation of Bayesian optimization with or without constraints.
* [https://github.com/yelp/MOE MOE] MOE is a Python/C++/CUDA implementation of Bayesian Global Optimization using Gaussian Processes.
* [https://sigopt.com/ SigOpt] SigOpt offers Bayesian Global Optimization as a SaaS service focused on enterprise use cases.
* [https://github.com/mila-udem/metaopt Metaopt], a Python implementation of hyperparameter optimization focused on parallel and cluster computing.
* [https://mindfoundry.ai/optaas Mind Foundry] OPTaaS offers Bayesian Global Optimization via web-services with flexible parameter constraints.

[[Category:Sequential methods]]
[[Category:Sequential experiments]]
[[Category:Stochastic optimization]]
[[Category:Machine learning]]