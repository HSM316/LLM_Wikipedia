In [[computer security]], the '''weird machine''' is a computational artifact where additional code execution can happen outside the original specification of the program.<ref>{{cite journal|last1=Bratus|first1=Sergey|last2=Locasto|first2=Michael E.|last3=Patterson|first3=Meredith L.|last4=Sassaman|first4=Len|last5=Shubina|first5=Anna|title=Exploit Programming - From Buffer Overflows to "Weird Machines" and Theory of Computation|journal=;login:|date=December 2011|url=http://langsec.org/papers/Bratus.pdf}}</ref> It is closely related to the concept of '''weird instructions''', which are the building blocks of an [[Exploit (computer security)|exploit]] based on crafted input data.<ref>{{cite journal|last1=Bratus|first1=Sergey|last2=Darley|first2=Trey|last3=Locasto|first3=Michael E.|last4=Patterson|first4=Meredith L.|last5=Shabiro|first5=Rebecca|last6=Shubina|first6=Anna|title=Beyond Planted Bugs in "Trusting Trust": The Input-Processing Frontier|journal=IEEE Security & Privacy|date=January 2014|doi=10.1109/MSP.2014.1|volume=12|pages=83–87}}</ref>

[[File:Weird machine.png|thumb|The functionality of the weird machine is invoked through unexpected inputs.]]
While expected, valid input activates the normal, intended functionality in a [[computer program]], input that was unexpected by the program [[Software developer|developer]] may activate unintended functionality. The weird machine consists of this unintended functionality that can be [[Computer programming|programmed]] with selected inputs in an [[Exploit (computer security)|exploit]].

In a classical attack taking advantage of a [[stack buffer overflow]], the input given to a vulnerable program is crafted and delivered so that it itself becomes executed as [[Source code|program code]]. However, if the data areas of the program memory have been protected so that they [[Executable space protection|cannot be executed]] directly like this, the input may instead take the form of pointers into pieces of existing program code that then become executed in an unexpected order to generate the functionality of the exploit. These snippets of code that are used by the exploit are referred to as ''gadgets'' in the context of [[return-oriented programming]].

Through interpretation of data as code, weird machine functionality that is by definition outside the original program specification can be reached also by [[proof-carrying code]] (PCC), which has been formally proven to function in a certain specific way.<ref>{{cite journal|last1=Vanegue|first1=Julien|title=The Weird Machines in Proof-Carrying Code|journal=IEEE Security and Privacy LangSec Workshop|date=2014|pages=209–213|url=http://www.ieee-security.org/TC/SPW2014/papers/5103a209.PDF}}</ref> This disparity is essentially caused by a disconnect between formal abstract modelling of a computer program and its real-world instance, which can be influenced by events that are not captured in the original abstraction, such as memory errors or power outages.

Two central categories of mitigation to the problems caused by weird machine functionality include input validation within the software and protecting against problems arising from the platform on which the program runs, such as memory errors. [[Input validation]] aims to limit the scope and forms of unexpected inputs e.g. through whitelists of allowed inputs, so that the software program itself would not end up in an unexpected state by interpreting the data internally. Equally importantly, secure programming practices such as protecting against [[buffer overflow]]s make it less likely that input data becomes interpreted in unintended ways by lower layers, such as the hardware on which the program is executed.

== See also ==
* [[Exploit (computer security)]]
* [[Stack buffer overflow]]
* [[Return-oriented programming]]

==References==
{{reflist}}

==External links==
* [https://wiki.helsinki.fi/display/swsec/Software+Security Software Security, Lecture 1: How software breaks (native)]

[[Category:Computer security exploits]]