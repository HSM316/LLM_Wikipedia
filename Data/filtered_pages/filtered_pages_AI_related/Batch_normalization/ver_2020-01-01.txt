Batch normalization is a technique for improving the speed, performance, and stability of artificial neural networks. Batch normalization was introduced in a 2015 paper. It is used to normalize the input layer by adjusting and scaling the activations.

While the effect of batch normalization is evident, the reasons behind its effectiveness remain under discussion. It was believed that it can mitigate the problem of internal covariate shift, where parameter initialization and changes in the distribution of the inputs of each layer affects the learning rate of the network. Recently, some scholars have shown that batch normalization does not reduce internal covariate shift, but rather smooths the objective function to improve the performance. Others prove that batch normalization achieves length-direction decoupling, and thereby accelerates neural networks.

 Motivation 
Batch normalization was initially proposed to solve internal covariate shift. During the training stage of networks, as the parameters of the preceding layers change, the distribution of inputs to the current layer changes accordingly, such that the current layer needs to constantly readjust to new distributions. This problem is especially severe for deep networks, because small changes in shallower hidden layers will be amplified as they propagate within the network, resulting in significant shift in deeper hidden layers. Therefore, the method of batch normalization is proposed to reduce these unwanted shifts to speed up training and to produce more reliable models.

Besides reducing internal covariate shift, batch normalization introduces many other benefits. With this additional layer, the network can use higher learning rate without vanishing or exploding gradients. Furthermore, batch normalization regularizes the network such that it is easier to generalize, and it is thus unnecessary to use dropout to mitigate overfitting. The network also becomes more robust to different initialization schemes and learning rates.

 Procedures

 Batch Normalizing Transform 
In a neural network, batch normalization is achieved through a normalization step that fixes the means and variances of each layer's inputs. Ideally, the normalization would be conducted over the entire training set, but to use this step jointly with stochastic optimization methods, it is impractical to use the global information. Thus, normalization is restrained to each mini-batch in the training process.

Use B to denote a mini-batch of size m of the entire training set. The mean and variance of B could thus be denoted as

, and .

For a layer of the network with d-dimensional input, , each dimension of its input is then normalized separately,

, where  and  ;  and  are the per-dimension mean and variance, respectively.

 is added in the denominator for numerical stability and is an arbitrarily small constant. The resulting normalized activation have zero mean and unit variance, if  is not taken into account. To restore the representation power of the network, a transformation step then follows as

,

where the parameters  and  are subsequently learnt in the optimization process.

Formally, the transform  is denoted as the Batch Normalizing Transform. The output of the BN transform  is then passed to other network layers, while the normalized output   remains internal to the current layer.

Backpropagation
The described BN transform is a differentiable operation, and the gradient of the loss l  with respect to the different parameters can be computed directly with chain rule.

Specifically,  depends on the choice of activation function, and the gradient against other parameters could be expressed as a function of :

,

, ,, ,

and .

 Inference with Batch-Normalized Networks 
During the training stage, the normalization steps depend on the mini-batches to ensure efficient and reliable training. However, in the inference stage, this dependence is not useful any more. Instead, the normalization step in this stage is computed with the population statistics such that the output could depend on the input in a deterministic manner. The population mean, , and variance, , are computed as:

, and .

The population statistics thus is a complete representation of the mini-batches.

The BN transform in the inference step thus becomes

,

where is passed on to future layers instead of . Since the parameters are fixed in this transformation, the batch normalization procedure is essentially applying a linear transform to the activation.

 Understanding Batch Normalization 
Although batch normalization has become a popular method due to its strengths, the working mechanism of the method is not yet well-understood. Scholars show that internal covariate shift is not reduced significantly by batch normalization, despite of common belief.  Some scholars attribute the good performance to smoothing the objective function, while others propose that length-direction decoupling is the reason behind its effectiveness.

 Batch Normalization and Internal Covariate Shift 
The correlation between batch normalization and internal covariate shift is widely accepted but was not supported by experimental results. Scholars recently show with experiments that the hypothesized relationship is not an accurate one. Rather, the enhanced accuracy with the batch normalization layer seems to be independent of internal covariate shift.

 Adding Covariate Shift to Batch Normalization Layers 
To understand if there is any correlation between reducing covariate shift and improving performance, an experiment is performed to elucidate the relationship.  Specifically, three models are trained and compared: a standard VGG network without batch normalization, a VGG network with batch normalization layers, and a VGG network with batch normalization layers and random noise. In the third model, the noise has non-zero mean and non-unit variance, and is generated at random for each layer. It is then added after the batch normalization layers to deliberately introduce covariate shift into activation.

With these three models, two observations are made. First, the third, noisy model has less stable distributions at all layers compared with the other two models due to the extra noise layer. Despite of the noise, the training accuracy of the second and the third model are similar, and are both higher than that of the first model. While the internal covariate shifts are larger at all levels, the model with batch normalization still performs better than the standard VGG model. It could thus be concluded that internal covariate shift might not be the contributing factor of the performance of batch normalization.

 Measuring Internal Covariate Shift with and without Batch Normalization Layers 
Since it is hypothesized that batch normalization layers could reduce internal covariate shift, an experiment is set up to measure quantitatively how much covariate shift is reduced. First, the notion of internal covariate shift needs to be defined mathematically. Specifically, to quantify the adjustment that a layer's parameters make in response to updates in previous layers, the correlation between the gradients of the loss before and after all previous layers are updated is measured, since gradients could capture the shifts from the first-order training method. If the shift introduced by the changes in previous layers is small, then the correlation between the gradients would be close to 1.

The correlation between the gradients are computed for four models: a standard VGG network, a VGG network with batch normalization layers, a 25-layer deep linear network (DLN) trained with full-batch gradient descent, and a DLN network with batch normalization layers. Interestingly, it is shown that the standard VGG and DLN models both have higher correlations of gradients compared with their counterparts, indicating that the additional batch normalization layers are not reducing internal covariate shift.

 Smoothness of the Optimization Landscape 
Some scholars proposed and proved that batch normalization could introduce greater Lipschitzness into the loss and the gradient during training, and that this improved smoothness could explain its great performance. These effects can be observed by comparing VGG networks trained with and without batch normalization, and is also consistent among other networks, such as linear deep networks. Specifically, it is observed that the loss changes less, and that the gradients of the loss have smaller magnitudes and are more Lipschitz. Moreover, the batch normalized models are compared with models with different normalization techniques. Specifically, these normalization methods work by first fixing the first order moment of activation, and then normalizing it by the average of  the  norm. These methods thus have larger distributional shift, but smoother landscape. Evidently, these models yield similar performance as batch normalized models. This two-way relationship could thus indicate that smoothness of the optimization landscape could be a contributing factor to the superior performance of batch normalization.

Besides analyzing this correlation experimentally, theoretical analysis is also provided for verification that batch normalization could result in a smoother landscape. Consider two identical networks, one contains batch normalization layers and the other doesn't, the behaviors of these two networks are then compared. Denote the loss functions as  and , respectively. Let the input to both networks be , and the output be , for which , where  is the layer weights. For the second network,  additionally goes through a batch normalization layer. Denote the normalized activation as , which has zero mean and unit variance. Let the transformed activation be , and suppose  and  are constants. Finally, denote the standard deviation over a mini-batch  as .

First, it can be shown that the gradient magnitude of a batch normalized network, , is bounded, with the bound expressed as

.

Since the gradient magnitude represents the Lipschitzness of the loss, this relationship indicates that a batch normalized network could achieve greater Lipschitzness comparatively. Notice that the bound gets tighter when the gradient  correlates with the activation , which is a common phenomena. The scaling of  is also significant, since the variance is often large.

Secondly, the quadratic form of the loss Hessian with respect to activation in the gradient direction can be bounded as

.

The scaling of  indicates that the loss Hessian is resilient to the mini-batch variance, whereas the second term on the right hand side suggests that it becomes smoother when the Hessian and the inner product are non-negative. If the loss is locally convex, then the Hessian is positive semi-definite, while the inner product is positive if  is in the direction towards the minimum of the loss. It could thus be concluded from this inequality that the gradient generally becomes more predictive with the batch normalization layer.

It then follows to translate the bounds related to the loss with respect to the normalized activation to a bound on the loss with respect to the network weights:

, where  and .

In addition to the smoother landscape, it is further shown that batch normalization could result in a better initialization with the following inequality:

, where  and  are the local optimal weights for the two networks, respectively.

Some scholars argue that the above analysis cannot fully capture the performance of batch normalization, because the proof only concerns the largest eigenvalue, or equivalently, one direction in the landscape at all points. It is suggested that the complete eigenspectrum needs to be taken into account to make a conclusive analysis.

 Length-Direction Decoupling 
It is argued that the success of batch normalization could be at least partially credited to the length-direction decoupling effect that the method provides.

By interpreting the batch normalization procedure as the reparametrization of weight space, it could be shown that the length and the direction of the weights are separated after the procedure, and they could thus be trained separately. For a particular neural network unit with input  and weight vector , denote its output as , where  is the activation function, and denote . Assume that , and that the spectrum of the matrix  is bounded as , , such that  is symmetric positive definite. Adding batch normalization to this unit thus results in

, by definition.

The variance term can be simplified such that . Assume that  has zero mean and  can be omitted, then it follows that

, where  is the induced norm of , .

Hence, it could be concluded that , where , and  and  accounts for its length and direction separately. This property could then be used to prove the faster convergence of problems with batch normalization.

 Linear Convergence of the Least-Square Problem with Batch Normalization 
With the reparametrization interpretation, it could then be proved that applying batch normalization to the ordinary least squares problem achieves a linear convergence rate in gradient descent, which is faster than the regular gradient descent with only sub-linear convergence.

Denote the objective of minimizing an ordinary lest squares problem as

, where .

Since , the objective thus becomes

, where 0 is excluded to avoid 0 in the denominator.

Since the objective is convex with respect to , its optimal value could be calculated by setting the partial derivative of the objective against  to 0. The objective could be further simplified to be

.

Note that this objective is a form of the generalized Rayleigh quotient

, where  is a symmetric matrix and  is a symmetric positive definite matrix.

It is proven that the gradient descent convergence rate of the generalized Rayleigh quotient is

, where  is the largest eigenvalue of ,  is the second largest eigenvalue of , and  is the smallest eigenvalue of .

In our case, is a rank one matrix, and the convergence result can be simplified accordingly. Specifically, consider gradient descent steps of the form  with step size , and starting from , then

.

 Linear Convergence of the Learning Halfspace Problem with Batch Normalization 
The problem of learning halfspaces refers to the training of the Perceptron, which is the simplest form of neural network. The optimization problem in this case is

, where  and  is an arbitrary loss function.

Suppose that  is infinitely differentiable and has a bounded derivative. Assume that the objective function  is -smooth, and that a solution  exists and is bounded such that . Also assume  is a multivariate normal random variable. With the Gaussian assumption, it can be shown that all critical points lie on the same line, for any choice of loss function . Specifically, the gradient of  could be represented as

, where  , , and  is the -th derivative of .

By setting the gradient to 0, it thus follows that the bounded critical points  can be expressed as , where  depends on  and . Combining this global property with length-direction decoupling, it could thus be proved that this optimization problem converges linearly.

First, a variation of gradient descent with batch normalization, Gradient Descent in Normalized Paramterization (GDNP), is designed for the objective function , such that the direction and length of the weights are updated separately. Denote the stopping criterion of GDNP as

.

Let the step size be

.

For each step, if , then update the direction as

.

Then update the length according to

, where  is the classical bisection algorithm, and  is the total iterations ran in the bisection step.

Denote the total number of iterations as , then the final output of GDNP is

.

The GDNP algorithm thus slightly modifies the batch normalization step for the ease of mathematical analysis.

It can be shown that in GDNP, the partial derivative of against the length component converges to zero at a linear rate, such that

, where  and  are the two starting points of the bisection algorithm on the left and on the right, correspondingly.

Further, for each iteration, the norm of the gradient of  with respect to  converges linearly, such that

.

Combining these two inequalities, a bound could thus be obtained for the gradient with respect to :

, such that the algorithm is guaranteed to converge linearly.

Although the proof stands on the assumption of Gaussian input, it is also shown in experiments that GDNP could accelerate optimization without this constraint.

 Linear Convergence of Neural Networks with Batch Normalization 
Consider a multilayer perceptron (MLP) with one hidden layer and  hidden units with mapping from input  to a scalar output described as

, where  and  are the input and output weights of unit  correspondingly, and  is the activation function and is assumed to be a tanh function.

The input and output weights could then be optimized with

, where  is a loss function, , and .

Consider fixed  and optimizing only , it can be shown that the critical points of  of a particular hidden unit , , all align along one line depending on incoming information into the hidden layer, such that

, where  is a scalar, .

This result could be proved by setting the gradient of  to zero and solving the system of equations.

Apply the GDNP algorithm to this optimization problem by alternating optimization over the different hidden units. Specifically, for each hidden unit, run GDNP to find the optimal  and . With the same choice of stopping criterion and stepsize, it follows that

.

Since the parameters of each hidden unit converge linearly, the whole optimization problem has a linear rate of convergence.