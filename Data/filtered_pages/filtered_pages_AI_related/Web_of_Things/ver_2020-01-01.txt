The Web of Things (WoT) is software architectural styles and programming patterns that allow real-world objects to be part of the World Wide Web. Similarly to what the Web (Application Layer) is to the Internet (Network Layer), the Web of Things provides an Application Layer that simplifies the creation of Internet of Things (IoT) applications composed of multiple devices across different platforms and application domains.

Differently from IoT which focuses on the Network Layer, WoT assumes that the connectivity between the devices is achieved and focuses on how to build applications.

Rather than re-inventing completely new standards, the Web of Things reuses existing and well-known Web standards used in the programmable Web (e.g., REST, HTTP, JSON), semantic Web (e.g., JSON-LD, Microdata, etc.), the real-time Web (e.g., WebSockets) and the social Web (e.g., OAuth or social networks).

Nature of Things

Research in the Web of Things usually considers things in the broad sense of physical objects. Things can include (but is not limited to) tagged objects (RFID, NFC, QR codes, Barcodes, Image Recognition) to Wireless Sensor Networks (WSN), machines, vehicles and consumer electronics.

Architecture and framework

While it is being standardised by W3C, the Web of Things is a set of best practices that can be classified according to the Web of Things architecture.

The architecture proposes four main layers (or stages) that are used as a framework to classify the different patterns and protocols involved.
Layers of the Web of Things Architecture as illustrated in Building the Web of Things

Accessibility layer

This layer deals with the access of things to the Internet and ensure they expose their services via Web APIs. This is the core layer of the WoT as it ensures things have a Web accessible API, transforming them into programmable things.

The access layer in the WoT is built around two core patterns:
Firstly, all things should be exposing their services through a RESTful API (either directly or through gateway). REST is an architectural style at the root of the programmable Web thanks to its implementation in HTTP 1.1. As a consequence, if things offer RESTful APIs over HTTP, they get a URL and become seamlessly integrated to the World Wide Web and its tools such as browsers, hyperlinked HTML pages and JavaScript applications.

Several designs describing how the services offered by things can be accessed via REST have been proposed.

Secondly, the request-response nature of HTTP is often cited as one of the limitations for IoT use-cases as it does not match the event-driven nature of applications that are common in the Wireless Sensor Networks. To overcome this shortcoming while keeping a focus on fostering integration with the Web, several authors have suggested the use of HTML5 WebSockets either natively or through the use of translation brokers (e.g., translating from MQTT or CoAP to WebSockets). This complements the REST API of things with a publish subscribe mechanism that is largely integrated with the Web eco-system.

Some things can connect directly to the Internet (e.g., using Ethernet, WiFi or GSM/3G), but in other cases (for example when devices are battery-powered) devices can access the Internet through Smart Gateways. Smart Gateway are protocol translation gateways at the edge of the network.

Findability layer

The focus of this layer is to provide a way to find and locate things on the Web and hence is strongly influenced by the semantic Web.

The approach here is to reuse Web semantic standards to describe things and their services. In particular, people have been working on HTML5 Microdata integration, RDF / RDFa, JSON-LD and EXI. This enables searching for things through search engines and other Web indexes as well as enabling machine to machine interaction based on a small set of well-defined formats and standards.

Sharing layer

The Web of Things is largely based on the idea of things pushing data to the Web where more intelligence and big-data patterns can be applied as an example to help us manage our health (Wearables), optimise our energy consumption (Smart Grid), etc. This, however, can only happen in a large-scale way if some of the data can be efficiently shared across services. The sharing layer ensures that data generated by things can be shared in an efficient and secure manner.

Several approaches towards a granular and social context based sharing have been proposed such as the use of social network to build a Social Web of Things.

Composition layer

The role of the last layer is to integrate the services and data offered by things into higher level Web tools (analytics software, mashup applications such as IFTTT), making it even simpler to create applications involving things and virtual Web services.

Tools in the composition layer range from Web toolkits (e.g., JavaScript SDKs offering higher-level abstractions) to dashboards with programmable widgets and Physical Mashup tools. Inspired by Web 2.0 participatory services and in particular Web mashups, the Physical Mashups offer a unified view of the classical Web and Web of Things and empower people to build applications using the Web of Things services without requiring programming skills.

A number of Web of Things Physical Mashup have been developed and tools have been proposed and are being actively developed such as.

History

Pioneering work in connecting objects to the Web probably started around the year 2000. In 2002, a peer-reviewed paper presented the Cooltown project. This project explored the use of URLs to address and HTTP interact with physical objects such as public screens or printers.

Following this early work, the growing interest and implementation of the Internet of Things started to raise some questions about the application layer of the IoT. While most of the work in the IoT space focused on network protocols, there was a need to think about the convergence of data from IoT devices. In particular, rather than looking at "one device one app", researchers and practitioners started envisioning the IoT as a system where data from various devices could be consumed by Web applications to create innovative use-cases.

The idea of the Web as an application-layer for the IoT started to emerge in 2007. Several researchers started working in parallel on these concept. Amongst them, Dominique Guinard and Vlad Trifa started the Web of Things online community and published the first WoT manifesto, advocating the use of Web standards (REST, Lightweight semantics, etc.) to build the application layer of the IoT. The manifesto was published together with an implementation on the Sun SPOT platform. At the same time, Dave Raggett from W3C started talking about a Web of Things at various W3C and IoT events.  Erik Wilde published "Putting Things to REST", a self-published concept paper looking at utilising REST to sense and control physical objects. Early mentions of the Web of Things as a term also appeared in a paper by Vlad Stirbu et al.

From 2007 onwards, Trifa, Guinard, Wilde and other researchers tried publishing their ideas and concepts at peer-reviewed conferences but their papers got rejected by the Wireless Sensor Networks research community on the basis that Internet and Web protocols were too verbose and limited in the context of real-world devices, where optimisation of memory and computation usage, wireless bandwidth, or very short duty cycles were essential.
 
However, a number of researchers in the WSN community started considering these ideas more seriously. Early 2009, a number of respected WSN researchers such as David Culler, Jonathan Hui, Adam Dunkels and Yazar Dogan evaluated the use of Internet and Web protocols for low-power sensor nodes and showed the feasibility of the approach.

Following this, Guinard and Trifa presented their end-to-end implementation of the concepts and presented it in a peer-reviewed publication accepted at the World Wide Web conference in 2009. Building on this implementation and uniting efforts, a RESTful architecture for things was proposed in 2010 by Guinard, Trifa and Wilde. Noticing a growing industrial and academic interest for connecting things to the Web, Guinard, Trifa and Wilde ran the first International Workshop on the Web of Things, WoT 2010 which has been running yearly since. These workshops have become the first forum where a growing community of researchers and practitioners could discuss the latest findings and ideas in the Web of Things.

In 2011, two of the first PhD theses on the Web of Things were presented at ETH Zurich: Building Blocks for a Participatory Web of Things: Devices, Infrastructures, and Programming Frameworks from Vlad Trifa and A Web of Things Application Architecture â€“ Integrating the Real-World into the Web from Dominique Guinard.

In 2011 Dominique Guinard and Vlad Trifa together with Niall Murphy and Andy Hobsbawm got together and founded EVRYTHNG, one of the first cloud software companies entirely leveraging the Web of Things to serve industry needs. Several other WoT startups were started around this time such as Sensetecnic or Yaler.

In 2014, the W3C showed an increased interest in the Web of Things and organised the W3C Workshop on the Web of Things, under the lead of Dave Raggett together with Siemens and the COMPOSE European project. This workshop lead to the creation of the Web of Things Interest Group at W3C and the submission of the Web Thing Model..

The same year, Siemens announced the creation of a research group dedicated to the Web of Things. In October 2014, Google also announced their interested in these ideas by launching the Physical Web GitHub project.

The Web of Things Interest Group has identified the required set of standards needed for the Web of Things in February 2017 
  and the Working Group has start working on 4 deliverables called WoT Architecture  , 
WoT Thing Description  ,
WoT Scripting API   and 
WoT Binding Templates  .

 Application examples 
 One of the early prototypes of the Web of Things is the "Energie Visible" project in which sensors capable of monitoring and controlling the energy consumption of household appliances offered their functionality through a RESTful API. This API is then used to create a physical Mashup. 

 Nimbits is an open source data historian server built on cloud computing architecture that provides connectivity between devices using data points.
 Xively (formerly Pachube) is a commercial web of things data aggregator and data mining website often integrated into the Web of Things.
 ThingSpeak is an open source Internet of Things platform created by Hans Scharler to collect, analyze, and act on data generated by sensors and actuators.

 EVRYTHNG is a platform for making unconnected products and connected devices part of the Web based on a Web of Things architecture.
 WeIO is an open source hardware and software platform for rapid prototyping and creation of wirelessly connected interactive objects using only popular web languages such as HTML5 or Python.
 SMQ is a real time pub-sub protocol that bridges WoT with IoT. The protocol makes it easy to design web based user interfaces for device management and supervision. The Mako Server, which can be compiled for anything from embedded devices to enterprise Linux servers, includes a ready to use SMQ broker.
 An application of the Web of Things in smart homes has been investigated in,Kamilaris A. Enabling Smart Homes using Web Technologies. PhD Thesis, University of Cyprus, Nicosia, Cyprus, December, 2012. to address the problem of heterogeneous home devices by reusing Web technologies.
 Sense Tecnic Systems focuses on a lightweight toolkit for developing IoT applications and targets rapid development using Web technologies and protocols. The WoTKit toolkit has been described at the 2012 IoT conference  and builds on research from UBC's Media and Graphics Interdisciplinary Centre, in particular the work on the MAGIC Broker as published at IoT 2010.

Alternative approaches

A number of alternative approaches to Web standards have been proposed, such as WS-* services, but these were later shown as not necessarily well-suited for real-world things.

The Constrained Application Protocol (CoAP) is also quite often cited as an alternative or complementary approach for resource-constrained devices. CoAP shares similarities with the Web of Things architecture such as the use of RESTful resources.